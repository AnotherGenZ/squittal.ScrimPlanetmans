@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.Models.ScrimEngine;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;

@inject IScrimMessageBroadcastService MessageService
@inject IScrimMatchEngine ScrimMatchEngine

<h4 class="title styled">@Title</h4>

@code {

    private MatchConfiguration _matchConfiguration = new MatchConfiguration();

    private string Title => _matchConfiguration.Title;

    protected override void OnInitialized()
    {
        MessageService.RaiseMatchConfigurationUpdateEvent += ReceiveMatchConfigurationUpdateMessageEvent;

        //if (ScrimMatchEngine.MatchConfiguration != null)
        //{
        //    _matchConfiguration = ScrimMatchEngine.MatchConfiguration;
        //}
        //else
        //{
        //    _matchConfiguration = new MatchConfiguration();
        //}

        _matchConfiguration = ScrimMatchEngine.MatchConfiguration;
    }

    private void ReceiveMatchConfigurationUpdateMessageEvent(object sender, MatchConfigurationUpdateEventArgs e)
    {
        var message = e.Message;

        _matchConfiguration = message.MatchConfiguration;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
