@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.Models; 

@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService
@* InfantryMatchReportTeam *@

@if (_team != null)
{
    <div id="@($"T{_renderedTeamOrdinal}Stats")" class="team-report @($"team{_renderedTeamOrdinal}") @SqCssHelper.GetFactionClassFromId(_team.FactionId)">
        <div id="@($"T{_renderedTeamOrdinal}Stats-header")" class="stats-row-header">
            <div class="score stats-col-header">Total Points</div>
            <div class="net stats-col-header">Net</div>
            <div class="kills stats-col-header">Kills</div>
            <div class="deaths stats-col-header">Deaths</div>
            <div class="hsr stats-col-header">HSR</div>
            <div class="assists stats-col-header">Dmg<br>Assists</div>
            <div class="utils stats-col-header">Util<br>Assists</div>
        </div>

        <InfantryMatchReportTeamRow i_TeamOrdinal=_renderedTeamOrdinal />
        @lock(_renderedPlayers)
         {
            @foreach (var player in _renderedPlayers)
            {
                <InfantryMatchReportPlayerStatsRow i_CharacterId=@player.Id i_Player=player />
            }
         }
    </div>
}

@code {
    [Parameter]
    public int i_TeamOrdinal { get; set; }

    private Team _team { get; set; }

    private int _renderedTeamOrdinal { get; set; }

    private List<Player> _renderedPlayers { get; set; } = new List<Player>();

    private ConcurrentQueue<TeamPlayerChangeMessage> _teamPlayerQueue { get; set; } = new ConcurrentQueue<TeamPlayerChangeMessage>();


    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent += ReceiveTeamFactionChangeEvent;
        //MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        //MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;

        if (_team == null)
        {
            _team = ScrimTeamsManager.GetTeam(i_TeamOrdinal);
        }

        // TODO: is this necessary here in addition to in OnParametersSet?
        //lock (_renderedPlayers)
        //{
        //    var visiblePlayers = _team.Players.Where(p => p.IsParticipating && !_renderedPlayers.Contains(p));

        //    _renderedPlayers.AddRange(visiblePlayers);
        //}

    }

    protected override void OnParametersSet()
    {
        if (i_TeamOrdinal != _renderedTeamOrdinal)
        {
            _renderedTeamOrdinal = i_TeamOrdinal;
            _team = ScrimTeamsManager.GetTeam(_renderedTeamOrdinal);


            InvokeAsync(() =>
            {
                lock (_renderedPlayers)
                {
                    var visiblePlayers = _team.Players.Where(p => (p.IsParticipating || p.IsOnline) && !_renderedPlayers.Contains(p));

                    _renderedPlayers.AddRange(visiblePlayers);

                    StateHasChanged();
                }

            });

            //InvokeAsyncStateHasChanged();
        }
    }
    #endregion Initialization Methods

    #region Event Handling
    private void ReceivePlayerStatUpdateEvent(object sender, PlayerStatUpdateEventArgs e)
    {
        var player = e.Message.Player;

        if (player.TeamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        var changeType = (player.IsParticipating || player.IsOnline) ? TeamPlayerChangeType.Add : TeamPlayerChangeType.Remove;

        var changeMessage = new TeamPlayerChangeMessage(player, changeType);

        _teamPlayerQueue.Enqueue(changeMessage);

        UpdateRenderedPlayers();
    }

    private void ReceiveTeamPlayerChangeEvent(object sender, TeamPlayerChangeEventArgs e)
    {
        var player = e.Message.Player;

        if (player.TeamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        _teamPlayerQueue.Enqueue(e.Message);

        UpdateRenderedPlayers();
    }

    private void ReceiveTeamFactionChangeEvent(object sender, TeamFactionChangeEventArgs e)
    {
        var message = e.Message;

        var teamOrdinal = message.TeamOrdinal;

        if (teamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        InvokeAsyncStateHasChanged();
    }
    #endregion Event Handling

    private void UpdateRenderedPlayers()
    {
        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                while (_teamPlayerQueue.TryDequeue(out TeamPlayerChangeMessage changeMessage))
                {
                    var player = changeMessage.Player;

                    if (changeMessage.ChangeType == TeamPlayerChangeType.Remove)
                    {
                        _renderedPlayers.Remove(player);
                    }
                    else if (changeMessage.ChangeType == TeamPlayerChangeType.Add)
                    {
                        if (!_renderedPlayers.Contains(player) && (player.IsParticipating || player.IsOnline))
                        {
                            _renderedPlayers.Add(player);
                        }
                    }
                }

                StateHasChanged();
            }
        });
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
