@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.Models;

@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

@if (_team != null && _renderedPlayersCount > 0)
{
    <div id="@($"T{_renderedTeamOrdinal}Stats")" class="team-report @($"team{_renderedTeamOrdinal}") @SqCssHelper.GetFactionClassFromId(_team.FactionId)">
        <div id="@($"T{_renderedTeamOrdinal}Stats-header")" class="stats-row-header">
            
            @if (!_renderedUseObjectiveStats)
            {
                <div class="net stats-col-header">Net<br>Score</div>
                <div class="score stats-col-header">Total Points</div>
            }
            else
            {
                <div class="score stats-col-header">Score</div>
            }

            <div class="kills stats-col-header">Kills</div>
            <div class="deaths stats-col-header">Deaths</div>

            @if (_showHsr && !_renderedUseObjectiveStats)
            {
                <div class="hsr stats-col-header">HSR</div>
            }

            @if (_renderedUseObjectiveStats)
            {
                @*<div class="objective-ticks stats-col-header">Objective<br>Ticks</div>*@
                <div class="objective-ticks stats-col-header">Capture<br>Ticks</div>
                <div class="revives stats-col-header">Revives<br>Given</div>
                <div class="revives-taken stats-col-header">Revives<br>Taken</div>
            }

            <div class="assists stats-col-header">Damage<br>Assists</div>
            <div class="utils stats-col-header">Grenade<br>Assists</div>
        </div>

        <InfantryMatchReportTeamRow i_TeamOrdinal=_renderedTeamOrdinal i_showHsr=_showHsr i_useObjectiveStats=_renderedUseObjectiveStats />

        @lock (_renderedPlayers)
        {
            @foreach (var player in _renderedPlayers)
            {
                <InfantryMatchReportPlayerStatsRow i_CharacterId=@player.Id i_Player=player i_showHsr=_showHsr i_useObjectiveStats=_renderedUseObjectiveStats />
            }
        }

        <InfantryMatchReportTeamCapturePointsRow i_TeamOrdinal=i_TeamOrdinal />

        <InfantryMatchReportTeamPointAdjustmentsRow i_TeamOrdinal=i_TeamOrdinal />
    </div>
}

@code {
    [Parameter]
    public int i_TeamOrdinal { get; set; }
    private int _renderedTeamOrdinal { get; set; }

    [Parameter]
    public bool i_showHsr { get; set; } = true;
    private bool _showHsr { get; set; } = true;

    [Parameter]
    public bool i_useObjectiveStats { get; set; }
    private bool _renderedUseObjectiveStats { get; set; }

    private Team _team { get; set; }


    private List<Player> _renderedPlayers { get; set; } = new List<Player>();
    private int _renderedPlayersCount { get; set; } = 0;
    private ConcurrentQueue<TeamPlayerChangeMessage> _teamPlayerQueue { get; set; } = new ConcurrentQueue<TeamPlayerChangeMessage>();


    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent += ReceiveTeamFactionChangeEvent;

        if (_team == null)
        {
            _team = ScrimTeamsManager.GetTeam(i_TeamOrdinal);
        }
    }

    public void Dispose()
    {
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent -= ReceiveTeamFactionChangeEvent;
    }

    protected override void OnParametersSet()
    {
        //var legacyUiChanged = false;

        var stateHasChanged = false;

        if (i_showHsr != _showHsr)
        {
            _showHsr = i_showHsr;

            stateHasChanged = true;

            //legacyUiChanged = true;
        }

        if (i_useObjectiveStats != _renderedUseObjectiveStats)
        {
            _renderedUseObjectiveStats = i_useObjectiveStats;

            stateHasChanged = true;
        }

        if (i_TeamOrdinal != _renderedTeamOrdinal) // || stateHasChanged) // legacyUiChanged)
        {
            _renderedTeamOrdinal = i_TeamOrdinal;
            _team = ScrimTeamsManager.GetTeam(_renderedTeamOrdinal);

            InvokeAsync(() =>
            {
                lock (_renderedPlayers)
                {
                    var visiblePlayers = _team.Players.Where(p => (p.IsParticipating) && !_renderedPlayers.Contains(p));

                    _renderedPlayers.AddRange(visiblePlayers);

                    _renderedPlayersCount = _renderedPlayers.Count();

                    // TEST:
                    _renderedPlayers = _renderedPlayers.OrderByDescending(p => p.LoadoutId).ToList();

                    StateHasChanged();
                }
            });
        }
        else if (stateHasChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Initialization Methods

    #region Event Handling
    private void ReceivePlayerStatUpdateEvent(object sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        var player = e.Message.Player;

        if (player.TeamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        var changeType = (player.IsParticipating) ? TeamPlayerChangeType.Add : TeamPlayerChangeType.Remove;

        var changeMessage = new TeamPlayerChangeMessage(player, changeType);

        _teamPlayerQueue.Enqueue(changeMessage);

        UpdateRenderedPlayers();
    }

    private void ReceiveTeamPlayerChangeEvent(object sender, ScrimMessageEventArgs<TeamPlayerChangeMessage> e)
    {
        var player = e.Message.Player;

        if (player.TeamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        _teamPlayerQueue.Enqueue(e.Message);

        UpdateRenderedPlayers();
    }

    private void ReceiveTeamFactionChangeEvent(object sender, ScrimMessageEventArgs<TeamFactionChangeMessage> e)
    {
        var message = e.Message;

        var teamOrdinal = message.TeamOrdinal;

        if (teamOrdinal != i_TeamOrdinal)
        {
            return;
        }

        InvokeAsyncStateHasChanged();
    }

    private void ReceivePlayerLoginEvent(object sender, ScrimMessageEventArgs<PlayerLoginMessage> e)
    {
        return;
    }
    #endregion Event Handling

    private void UpdateRenderedPlayers()
    {
        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                while (_teamPlayerQueue.TryDequeue(out TeamPlayerChangeMessage changeMessage))
                {
                    var player = changeMessage.Player;

                    if (changeMessage.ChangeType == TeamPlayerChangeType.Remove)
                    {
                        _renderedPlayers.Remove(player);
                    }
                    else if (changeMessage.ChangeType == TeamPlayerChangeType.Add)
                    {
                        if (!_renderedPlayers.Contains(player) && (player.IsParticipating))
                        {
                            _renderedPlayers.Add(player);
                        }
                    }
                }

                _renderedPlayersCount = _renderedPlayers.Count();

                // TEST:
                _renderedPlayers = _renderedPlayers.OrderByDescending(p => p.LoadoutId).ToList();

                StateHasChanged();
            }
        });
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
