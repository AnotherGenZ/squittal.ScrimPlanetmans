@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@inject IStatefulTimer  Timer
@inject IScrimMatchEngine ScrimMatchEngine
@inject IScrimMessageBroadcastService MessageService

@if (Debug)
{
    <span>@_clock (@_clockStatusDisplay)</span>
}
else
{
    <span>@_clock</span>
}

@if (_playSound)
{
    <audio autoplay><source src="/resources/buzzer1.wav" /></audio>
}

@code {
    [Parameter]
    public bool Debug { get; set; } = false;

    private string _clock = "--:--";
    private MatchTimerState _clockStatus = MatchTimerState.Uninitialized;
    private string _clockStatusDisplay
    {
        get
        {
            return Enum.GetName(typeof(MatchTimerState), _clockStatus);
        }
    }

    bool _playSound = false;
    bool _playedSound = false;
    bool _canPlaySound = false;


    protected override void OnInitialized()
    {
        _canPlaySound = false;

        //Timer.RaiseMatchTimerTickEvent += ReceiveMatchTimerTickEvent;
        MessageService.RaiseMatchTimerTickEvent += ReceiveMatchTimerTickEvent;

        var prevTick = ScrimMatchEngine.GetLatestTimerTickMessage();

        if (prevTick != null)
        {
            _clock = prevTick.MatchTimerStatus.TimeRemainingDisplay;

            if (prevTick.MatchTimerStatus.GetSecondsRemaining() > 0)
            {
                _canPlaySound = true;
                _playedSound = false;
            }

        }
        else
        {
            _canPlaySound = true;
        }
    }

    private void ReceiveMatchTimerTickEvent(object sender, MatchTimerTickEventArgs e)
    {
        var message = e.Message;

        var status = message.MatchTimerStatus;

        var state = status.State;

        if (status.GetSecondsRemaining() == 0)
        {
            _playSound = (!_playedSound && _canPlaySound) ? true : false;
            _playedSound = true;
        }
        else
        {
            _playedSound = false;
            _canPlaySound = true;
            _playSound = false;
        }

        _clock = status.TimeRemainingDisplay;
        _clockStatus = state;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
