@page "/Reports"
@page "/MatchReport"
@page "/ReportBrowser"

@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Data.Models;
@using squittal.ScrimPlanetmans.Models.ScrimMatchReports;
@using squittal.ScrimPlanetmans.Services.ScrimMatchReports;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Text.RegularExpressions;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@inject IScrimMatchReportDataService ReportDataService
@inject IScrimMessageBroadcastService MessageService
@inject NavigationManager NavManager

@implements IDisposable

<div class="container-fluid" style="margin-top: 16px;">

    <div class="row">

        <div class="col-lg-8" style="margin-left: auto; margin-right: auto;">

            <div class="header-card-container default" style="background-color: transparent; box-shadow: 0px 2px 5px 0px var(--sq-light-blue-gray);">
                <h3>Match Reports</h3>

                <table style="width: 100%;" class="table-responsive-sm table-striped-light">
                    <thead>
                        <tr>
                            <th>Start Time</th>
                            <th>Team 1</th>
                            <th>Team 2</th>
                            <th>Title</th>
                            <th>Server</th>
                            <th>Facility</th>
                            <th>Rounds</th>
                            <th></th>
                        </tr>
                    </thead>

                    @if (_storeScrimMatchList == null || _isLoadingScrimMatchList)
                    {
                        <SpinnerEllipsis />
                    }
                    else
                    {
                        <tbody>
                            @foreach (var match in _storeScrimMatchList)
                            {
                                <tr>
                                    <td>@match.StartTime.ToShortDateString() @match.StartTime.ToShortTimeString()</td>
                                    <td>@match.TeamAliases[1]</td>
                                    <td>@match.TeamAliases[2]</td>
                                    <td>@match.Title</td>
                                    <td>@match.WorldName</td>
                                    @if (match.FacilityId != null)
                                    {
                                        <td>@match.FacilityName</td>
                                    }
                                    else
                                    {
                                        <td style="font-style: italic;">None</td>

                                    }
                                    <td>@match.RoundCount</td>
                                    <td>
                                        <NavLink class="nav-link" href=@($"reports/{match.ScrimMatchId}") style="padding: 4px 8px;">Open</NavLink>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    }
                </table>

            </div>

        </div>

    </div>

        @if (_isChangingScrimMatch)
        {
            <SpinnerEllipsis />
        }
        else if (_renderedScrimMatchId != _noScrimMatchSelectedId)
        {
            <div class="col-lg-9">
                @*<ConstructedTeamBuilderForm_Edit i_teamId=@_renderedTeamId />*@
            </div>
        }

        <p>Debug: @_debug</p>

</div>


@code {
    [Parameter]
    public string i_scrimMatchId { get; set; } = "-1";
    private string _renderedScrimMatchId { get; set; } = "-1";

    [Parameter]
    public string _uriScrimMatchId { get; set; }

    [Parameter]
    public int i_pageIndex { get; set; } = 1;
    public int _renderedPageIndex { get; set; } = 1;

    [Parameter]
    public int? _uriPageIndex { get; set; }


    private string _inputScrimMatchId { get; set; } = "-1";

    private string _noScrimMatchSelectedId { get; set; } = "-1";
    private int _defaultPageIndex { get; set; } = 1;

    private List<ScrimMatchInfo> _storeScrimMatchList { get; set; } = new List<ScrimMatchInfo>();

    private bool _isLoadingScrimMatchList { get; set; } = true;
    private bool _isChangingScrimMatch { get; set; } = false;

    private string _debug { get; set; } = string.Empty;


    #region Initialization Methods
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadScrimMatchListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        UpdateUriParameters();

        if (i_scrimMatchId != _renderedScrimMatchId)
        {
            _isChangingScrimMatch = true;
            InvokeAsyncStateHasChanged();

            _renderedScrimMatchId = i_scrimMatchId;

            paramsChanged = true;
        }

        if (i_pageIndex != _renderedPageIndex)
        {
            _renderedPageIndex = i_pageIndex;
            await LoadScrimMatchListAsync();

            paramsChanged = true;
        }

        if (paramsChanged)
        {
            _isChangingScrimMatch = false;
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadScrimMatchListAsync()
    {
        _isLoadingScrimMatchList = true;

        var paginatedList = await ReportDataService.GetHistoricalScrimMatchesListAsync(_renderedPageIndex);
        _storeScrimMatchList = new List<ScrimMatchInfo>();

        _storeScrimMatchList.AddRange(paginatedList.Contents);

        _debug = $"{_storeScrimMatchList.Count()}";

        _isLoadingScrimMatchList = false;
    }

    #endregion Initialization Methods

    #region Event Handling
    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (UpdateUriParameters())
        {
            StateHasChanged();
        }
    }
    #endregion Event Handling

    private bool UpdateUriParameters()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var stateChanged = false;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("scrimMatchId", out var qScrimMatchId))
        {
            if (_uriScrimMatchId != qScrimMatchId)
            {
                stateChanged = true;
            }

            if (string.IsNullOrWhiteSpace(qScrimMatchId))
            {
                _uriScrimMatchId = null;
                i_scrimMatchId = _noScrimMatchSelectedId;
            }
            else
            {
                _uriScrimMatchId = qScrimMatchId;
                i_scrimMatchId = qScrimMatchId;
            }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var qPage))
        {
            if (int.TryParse(qPage, out int page))
            {
                if (_uriPageIndex != page)
                {
                    _uriPageIndex = page;
                    i_pageIndex = page;
                    stateChanged = true;
                }
            }
            else
            {
                if (_uriPageIndex != null)
                {
                    stateChanged = true;
                }

                _uriPageIndex = null;
                i_pageIndex = _defaultPageIndex;
            }
        }

        return stateChanged;
    }

    public int GetTeamIdFromStringId(string stringId)
    {
        if (int.TryParse(stringId, out int intId))
        {
            return intId;
        }
        else
        {
            return -1;
        }
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
