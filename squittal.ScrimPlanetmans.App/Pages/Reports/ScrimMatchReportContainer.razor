@page "/Reports/{i_scrimMatchId}"
@page "/MatchReport/{i_scrimMatchId}"
@page "/ReportBrowser/{i_scrimMatchId}"
@page "/ScrimMatch/{i_scrimMatchId}"

@page "/Reports/{i_scrimMatchId}/{i_selectedPlayerId}"
@page "/MatchReport/{i_scrimMatchId}/{i_selectedPlayerId}"
@page "/ReportBrowser/{i_scrimMatchId}/{i_selectedPlayerId}"
@page "/ScrimMatch/{i_scrimMatchId}/{i_selectedPlayerId}"

@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.ScrimMatchReports;
@using squittal.ScrimPlanetmans.Services.ScrimMatchReports;
@using System.Threading;

@inject IScrimMatchReportDataService ReportDataService
@inject NavigationManager NavManager

@implements IDisposable


<div class="container-fluid" style="margin-top: 16px;">

    <div class="row">

        <div class="col-lg-7" style="margin-left: auto; margin-right: auto;">

            <div class="header-card-container default" style="background-color: transparent; box-shadow: 0px 2px 5px 0px var(--sq-light-blue-gray); overflow-x: auto;">

                @if (_matchInfo == null || _isChangingScrimMatch)
                {
                    <SpinnerEllipsis />
                }
                else
                {
                    <div style="display: grid; grid-template-columns: 60% 40%; grid-template-rows: 1.75rem 1rem; align-items: baseline; font-family: Roboto, 'Segoe UI', sans-serif; margin-bottom: 24px;">
                        <h4 style="margin-bottom: 0; font-family: 'Roboto Mono', 'Input Mono', Consolas, monospace">@(_matchInfo.Title)</h4> @*margin-bottom: 2px;*@
                        <p style="margin-bottom: 0px; font-size: 1rem; text-align: right;">@_matchInfo.StartTime.ToString("f")</p>
                        @if (string.IsNullOrWhiteSpace(_matchInfo.FacilityName))
                        {
                            <p style="margin-bottom: 0px; font-size: 1rem;">
                                <span>@_matchInfo.WorldName</span>
                                <span class="oi oi-caret-right small" style="padding-left: 4px; padding-right: 4px;"></span>
                                <span style="font-style: italic;">No facility</span>
                            </p>
                        }
                        else
                        {
                            <p style="margin-bottom: 0px; font-size: 1rem;">
                                <span>@_matchInfo.WorldName</span>
                                <span class="oi oi-caret-right small" style="padding-left: 4px; padding-right: 4px;"></span>
                                <span>@_matchInfo.FacilityName</span>
                            </p>
                        }
                        <p style="margin-bottom: 0px; font-size: 1rem; text-align: right; font-weight: 300;">@_matchInfo.RoundCount Rounds | Ruleset: @_matchInfo.RulesetName</p>

                    </div>

                    @if (_isLoadingScrimPlayers || _matchInfo == null)
                    {
                        <SpinnerEllipsis />
                    }
                    else if (_playerStats == null || !_playerStats.Any() || !_matchInfo.TeamAliases.Any() || !_teamStats.Any())
                    {
                        <p>No player data found for match @_renderedScrimMatchId</p>
                    }
                    else
                    {

                        <table style="width: 100%; text-align: right; margin-bottom: 10px;" class="table-responsive-sm table-striped-light">

                            <tbody style="font-size: 0.8rem;">
                                @foreach (var team in _teamStats)
                                {
                                    @if (team.TeamOrdinal > 1)
                                    {
                                        <tr style="height: 16px;">
                                        </tr>
                                    }

                                    <tr style="line-height: 1.2; font-size: 0.85rem; vertical-align: bottom; background-color: transparent; font-family: Roboto, 'Segoe UI', sans-serif;">
                                        <th style="padding-left: 10px;"></th>
                                        <th></th>
                                        <th style="text-align: right; font-weight: 300; width: 60px;">Points</th>
                                        <th style=" width: 110px;"></th>
                                        <th style="font-weight: 300; width: 70px;">Net Score</th>
                                        <th style="font-weight: 300; width: 60px;">Kills</th>
                                        <th style="font-weight: 300; width: 60px;">Deaths</th>
                                        <th style="font-weight: 300; width: 70px;">Head Shot %</th>
                                        <th style="font-weight: 300; width: 70px;">Dmg. Assists</th>
                                        <th style="font-weight: 300; width: 60px;">Solo Kills</th>
                                        <th style="font-weight: 300; width: 70px;">Assisted Deaths</th>
                                        @*<th style="font-weight: 300; width: 80px;">Favorable Eng. %</th>*@
                                        <th style="font-weight: 300; width: 80px;">Favorable Eng. %</th>
                                        <th style="font-weight: 300; width: 60px;">1v1 Eng. %</th>
                                        <th style="font-weight: 300; width: 60px;">1v1 KDR</th>
                                    </tr>

                                    <tr class="@SqCssHelper.GetFactionClassFromId(_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Select(p => p.FactionId).FirstOrDefault())" style="color: var(--sq-ps2-primary); font-size: 1.2rem; background-color: transparent; border-bottom: 2px solid var(--sq-ps2-primary-light); text-align: right;">
                                        <td style="padding-left: 10px;"></td>
                                        <td style="text-align: left;">@(_matchInfo.TeamAliases[team.TeamOrdinal])</td>
                                        <td>@team.Points</td>
                                        <td></td>
                                        <td>@team.NetScore</td>
                                        <td>@team.Kills</td>
                                        <td>@team.Deaths</td>
                                        <td>@team.HeadshotPercent<span style="font-size: smaller;">%</span></td>
                                        <td>@team.DamageAssists</td>
                                        <td>@team.UnassistedKills</td>
                                        <td>@team.DamageAssistedEnemyDeaths</td>
                                        @*<td>@team.WeightedFavorableEngagementPercent2<span style="font-size: smaller;">%</span></td>*@
                                        <td>@team.WeightedFavorableEngagementPercent3<span style="font-size: smaller;">%</span></td>
                                        <td>@team.OneVsOneEngagementPercent<span style="font-size: smaller;">%</span></td>
                                        <td>@team.OneVsOneKillDeathRatio</td>
                                    </tr>

                                    @foreach (var player in _playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal))
                                    {
                                        <tr class="@SqCssHelper.GetFactionClassFromId(player.FactionId)" style="color: var(--sq-ov-ps2-primary-dark);">
                                            <td>
                                                <div class="playerLoadoutIcon ps2-icon @GetLoadoutIconFromLoadoutId(player.GetOrderedPlanetsideClassEventCountsList().Select(e => e.PlanetsideClass).FirstOrDefault())" style="filter: @GetLoadoutIconFilterStyle(player.FactionId)"></div>@*@player.GetOrderedPlanetsideClassEventCountsList().OrderByDescending(e => e.EventCount).FirstOrDefault().EventCount</div>*@
                                            </td>
                                            <td style="text-align: left;" title="@player.NameFull [@(player.CharacterId)]">
                                                
                                                @*@if (team.TeamOrdinal == 1)
                                                {*@ 
                                                    <NavLink class="nav-link" href=@($"ScrimMatch/{_renderedScrimMatchId}/{player.CharacterId}")>
                                                        <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@player.NameDisplay</span>
                                                        @if (player.PrestigeLevel != 0)
                                                        {
                                                            <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                                                                <sup>
                                                                    <span class="oi oi-star small" aria-hidden="true"></span>
                                                                </sup>
                                                            </div>
                                                        }
                                                    </NavLink>

                                                    @*<button class="btn btn-link" style="color: var(--sq-ov-ps2-primary-dark) !important; font-size: 0.8rem; padding: 0; margin-top: 0; border: none; line-height: 1.5rem;" @onclick="(() => OnSelectPlayerSubmit(player.CharacterId))"></button>*@
                                                @*}
                                                else
                                                {
                                                    <button class="btn btn-link" style="color: var(--sq-ov-ps2-primary-dark) !important; font-size: 0.8rem; padding: 0; margin-top: 0; border: none; line-height: 1.5rem;" @onclick="(() => OnSelectPlayerSubmit(player.CharacterId))">
                                                        <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@player.NameDisplay</span>
                                                        @if (player.PrestigeLevel != 0)
                                                        {
                                                            <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                                                                <sup>
                                                                    <span class="oi oi-star small" aria-hidden="true"></span>
                                                                </sup>
                                                            </div>
                                                        }
                                                    </button>
                                                }*@
                                            </td>
                                            <td style="text-align: right;">@player.Points</td>
                                            <td>
                                                <div class="graph" style="width: 110px;">
                                                    @*<div class="graph-bar" style="width: @($"{GetPointGraphWidth(player.Points)}%"); height: 17px; margin: 5px 0 0 0; background-color: var(--sq-ov-ps2-primary); opacity: 0.9; box-sizing: border-box; border: 1px solid var(--sq-ov-ps2-primary-dark-alpha-80); border-left: 2px solid var(--sq-ov-ps2-primary-dark);"></div>*@
                                                    <div class="graph-bar" style="width: @($"{GetPointGraphWidth(player.Points)}%"); height: 17px; margin: 0; background-color: var(--sq-ov-ps2-primary); opacity: 0.9; box-sizing: border-box; border: 1px solid var(--sq-ov-ps2-primary-dark-alpha-80); border-left: 2px solid var(--sq-ov-ps2-primary-dark);"></div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="net stats-value">
                                                    <span class="value">@player.NetScore</span><span class="net-score-icon @GetNetScoreLabelCssClass(player.NetScore)">@GetNetScoreLabelText(player.NetScore)</span>
                                                </div>
                                            </td>
                                            <td>@player.Kills</td>
                                            <td>@player.Deaths</td>
                                            <td>@player.HeadshotPercent<span style="font-size: smaller; padding-left: 1px;">%</span></td>
                                            <td>@player.DamageAssists</td>
                                            <td>@player.UnassistedKills</td>
                                            <td>@player.DamageAssistedEnemyDeaths</td>
                                            @*<td>@player.WeightedFavorableEngagementPercent2<span style="font-size: smaller; padding-left: 1px;">%</span></td>*@
                                            <td>@player.WeightedFavorableEngagementPercent3<span style="font-size: smaller; padding-left: 1px;">%</span></td>
                                            <td>@player.OneVsOneEngagementPercent<span style="font-size: smaller; padding-left: 1px;">%</span></td>
                                            <td>@player.OneVsOneKillDeathRatio</td>
                                        </tr>
                                    }

                                    @if (team.FacilityCapturePoints != 0)
                                    {
                                        <tr class="@SqCssHelper.GetFactionClassFromId(_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Select(p => p.FactionId).FirstOrDefault())" style="background-color: transparent; @(team.PointAdjustments == 0 ? "border-bottom: 1px solid var(--sq-ps2-primary-light);" : string.Empty)">
                                            <td colspan="2" style="font-style: italic;">Captures</td>
                                            <td>@team.FacilityCapturePoints</td>
                                        </tr>
                                    }


                                    @if (team.PointAdjustments != 0)
                                    {
                                        <tr class="@SqCssHelper.GetFactionClassFromId(_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Select(p => p.FactionId).FirstOrDefault())" style="background-color: transparent; border-bottom: 1px solid var(--sq-ps2-primary-light);">
                                            <td colspan="2" style="font-style: italic;">Adjustments</td>
                                            <td>@team.PointAdjustments</td>
                                        </tr>
                                    }

                                    @if (team.FacilityCapturePoints == 0 && team.PointAdjustments == 0)
                                    {
                                        <tr class="@SqCssHelper.GetFactionClassFromId(_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Select(p => p.FactionId).FirstOrDefault())" style="background-color: transparent; border-bottom: 1px solid var(--sq-ps2-primary-light);"></tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }

                    <div style="height: 1rem; line-height: 1rem; color: var(--sq-gray);">
                        @_matchInfo.ScrimMatchId
                    </div>

                }

            </div>

        </div>

        <div class="col-lg-5" style="margin-left: auto; margin-right: auto;">

            <div class="header-card-container @GetDetailsPanelFactionClass()" style="background-color: transparent; box-shadow: 0px 2px 5px 0px var(--sq-light-blue-gray); overflow-y: auto; margin-bottom: 16px;">
                @*max-height: 700px;">*@

                @if (_renderedScrimMatchId != null && !_isChangingScrimMatch)
                {
                    if (!string.IsNullOrWhiteSpace(_renderedSelectedPlayerId) && !_isChangingSelectedPlayer)
                    {
                        <ScrimMatchInfantryReportPlayerDetailsContainer i_scrimMatchId=@_renderedScrimMatchId i_playerId=@_renderedSelectedPlayerId OnSelectDetailsPlayer="OnSelectPlayerSubmit" />

                        <ScrimMatchInfantryReportPlayerWeaponStatsContainer i_scrimMatchId=@_renderedScrimMatchId i_playerId=@_renderedSelectedPlayerId />
                    }
                    else
                    {
                        @*<ScrimMatchInfantryReportDeathsContainer i_scrimMatchId="@_renderedScrimMatchId" i_playerId="@_renderedSelectedPlayerId" />*@
                    }

                    <ScrimMatchInfantryReportDeathsContainer i_scrimMatchId="@_renderedScrimMatchId" i_playerId="@_renderedSelectedPlayerId" />
                }

            </div>
        </div>

    </div>
</div>


@code {
    [Parameter]
    public string i_scrimMatchId { get; set; }
    private string _renderedScrimMatchId { get; set; }

    [Parameter]
    public string i_selectedPlayerId { get; set; }
    private string _renderedSelectedPlayerId { get; set; } //= string.Empty;


    private IEnumerable<ScrimMatchReportInfantryPlayerStats> _playerStats { get; set; }
    private IEnumerable<ScrimMatchReportInfantryTeamStats> _teamStats { get; set; }

    private ScrimMatchInfo _matchInfo { get; set; }

    private int _maxPlayerPoints { get; set; } = 1;

    private bool _isLoadingScrimPlayers { get; set; } = false;
    private bool _isChangingScrimMatch { get; set; } = false;

    private bool _isChangingSelectedPlayer { get; set; } = false;

    private CancellationTokenSource cts;

    private string _debug { get; set; } = string.Empty;

    #region Initialization Methods
    //protected override async Task OnInitializedAsync()
    //{
    //    _isLoadingScrimPlayers = true;

    //    if (i_scrimMatchId != null)
    //    {
    //        // If a process is already underway, cancel it
    //        if (cts != null)
    //        {
    //            cts.Cancel();
    //        }

    //        // Set cts to cancel the current process if another table refresh is requested
    //        CancellationTokenSource newCTS = new CancellationTokenSource();
    //        cts = newCTS;

    //        try
    //        {
    //            _renderedScrimMatchId = i_scrimMatchId;

    //            var TaskList = new List<Task>();

    //            var playerStatsTask = LoadInfantryPlayerStats(cts.Token);
    //            TaskList.Add(playerStatsTask);

    //            var teamStatsTask = LoadInfantryTeamStats(cts.Token);
    //            TaskList.Add(teamStatsTask);

    //            var matchInfoTask = LoadMatchInfo(cts.Token);
    //            TaskList.Add(matchInfoTask);

    //            await Task.WhenAll(TaskList);

    //            cts.Token.ThrowIfCancellationRequested();
    //        }
    //        catch
    //        {
    //            // Ignore
    //        }

    //        // When the process is complete, signal that another process can proceed
    //        if (cts == newCTS)
    //        {
    //            cts = null;
    //        }
    //    }

    //    _isLoadingScrimPlayers = false;
    //}

    public void Dispose()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_scrimMatchId != _renderedScrimMatchId)
        {
            // If a process is already underway, cancel it
            if (cts != null)
            {
                cts.Cancel();
            }

            // Set cts to cancel the current process if another table refresh is requested
            CancellationTokenSource newCTS = new CancellationTokenSource();
            cts = newCTS;

            try
            {
                _isChangingScrimMatch = true;
                InvokeAsyncStateHasChanged();

                _renderedScrimMatchId = i_scrimMatchId;

                var TaskList = new List<Task>();

                var playerStatsTask = LoadInfantryPlayerStats(cts.Token);
                TaskList.Add(playerStatsTask);

                var teamStatsTask = LoadInfantryTeamStats(cts.Token);
                TaskList.Add(teamStatsTask);

                var matchInfoTask = LoadMatchInfo(cts.Token);
                TaskList.Add(matchInfoTask);

                await Task.WhenAll(TaskList);

                cts.Token.ThrowIfCancellationRequested();


                if (!string.IsNullOrWhiteSpace(i_selectedPlayerId))
                {
                    _renderedSelectedPlayerId = i_selectedPlayerId;

                    if (!IsSelectedPlayerValid())
                    {
                        NavManager.NavigateTo($"/ScrimMatch/{_renderedScrimMatchId}");
                    }

                    paramsChanged = true;
                }

                paramsChanged = true;
            }
            catch
            {
                // Ignore
            }

            // When the process is complete, signal that another process can proceed
            if (cts == newCTS)
            {
                cts = null;
            }
        }
        else if (i_selectedPlayerId != _renderedSelectedPlayerId)
        {
            _renderedSelectedPlayerId = i_selectedPlayerId;

            if (!IsSelectedPlayerValid())
            {
                NavManager.NavigateTo($"/ScrimMatch/{_renderedScrimMatchId}");
            }

            paramsChanged = true;
        }

        if (paramsChanged)
        {
            _isChangingScrimMatch = false;
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadInfantryPlayerStats(CancellationToken cancellationToken)
    {
        _playerStats = await ReportDataService.GetHistoricalScrimMatchInfantryPlayerStatsAsync(_renderedScrimMatchId, cancellationToken);

        if (_playerStats != null && _playerStats.Any())
        {
            _maxPlayerPoints = _playerStats.Max(p => p.Points);
        }
    }

    private async Task LoadInfantryTeamStats(CancellationToken cancellationToken)
    {
        _teamStats = await ReportDataService.GetHistoricalScrimMatchInfantryTeamStatsAsync(_renderedScrimMatchId, cancellationToken);
    }

    private async Task LoadMatchInfo(CancellationToken cancellationToken)
    {
        _matchInfo = await ReportDataService.GetHistoricalScrimMatchInfoAsync(_renderedScrimMatchId, cancellationToken);
    }

    private bool IsSelectedPlayerValid()
    {
        if (string.IsNullOrWhiteSpace(i_selectedPlayerId))
        {
            return true;
        }
        else if (_playerStats != null && _playerStats.Any())
        {
            return _playerStats.Any(p => p.CharacterId == i_selectedPlayerId);
        }
        else
        {
            return false;
        }
    }
    #endregion Initialization Methods

    #region UI & Form Controls
    private void OnSelectPlayerSubmit(string playerId)
    {
        if (_renderedSelectedPlayerId == playerId)
        {
            return;
        }

        _isChangingSelectedPlayer = true;

        _renderedSelectedPlayerId = playerId;

        _isChangingSelectedPlayer = false;

        InvokeAsyncStateHasChanged();
    }
    #endregion UI & Form Controls

    private decimal GetPointGraphWidth(int points)
    {
        var maxPoints = _maxPlayerPoints;

        var playerPoints = points;

        return (playerPoints >= 1 && maxPoints > 0) ? Math.Ceiling(90 * ((decimal)playerPoints / (decimal)maxPoints)) : 4;
    }

    private double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }

    private string GetNetScoreLabelCssClass(int netScore)
    {
        if (netScore == 0)
        {
            return "neutral";
        }
        else if (netScore < 0)
        {
            return "negative";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetNetScoreLabelText(int netScore)
    {
        if (netScore == 0)
        {
            return "•";
        }
        else
        {
            return "Δ";
        }
    }

    private string GetLoadoutIconFromLoadoutId(PlanetsideClass planetsideClass)
    {
        if (planetsideClass == PlanetsideClass.Infiltrator)
        {
            return "infil";
        }
        else if (planetsideClass == PlanetsideClass.LightAssault)
        {
            return "la";
        }
        else if (planetsideClass == PlanetsideClass.Medic)
        {
            return "medic";
        }
        else if (planetsideClass == PlanetsideClass.Engineer)
        {
            return "engy";
        }
        else if (planetsideClass == PlanetsideClass.HeavyAssault)
        {
            return "heavy";
        }
        else if (planetsideClass == PlanetsideClass.MAX)
        {
            return "max";
        }
        else
        {
            return "unknown";
        }
    }

    private string GetLoadoutIconFilterStyle(int factionId)
    {
        if (factionId == 1)
        {
            return "brightness(0) saturate(100%) invert(39%) sepia(41%) saturate(1794%) hue-rotate(224deg) brightness(98%) contrast(91%);";
        }
        if (factionId == 2)
        {
            return "brightness(0) saturate(100%) invert(49%) sepia(57%) saturate(1428%) hue-rotate(184deg) brightness(101%) contrast(98%);";
        }
        if (factionId == 3)
        {
            return "brightness(0) saturate(100%) invert(50%) sepia(34%) saturate(1466%) hue-rotate(307deg) brightness(98%) contrast(88%);";
        }

        return string.Empty;
    }

    private string GetDetailsPanelFactionClass()
    {
        return (_renderedScrimMatchId != null && !_isChangingScrimMatch && !string.IsNullOrWhiteSpace(_renderedSelectedPlayerId) && !_isChangingSelectedPlayer)
            ? SqCssHelper.GetFactionClassFromId(_playerStats.Where(p => p.CharacterId == _renderedSelectedPlayerId).Select(p => p.FactionId).FirstOrDefault())
            : "default";
        @*{
                if ()
                {
                    return SqCssHelper.GetFactionClassFromId(_playerStats.Where(p => p.CharacterId == _renderedSelectedPlayerId).Select(p => p.FactionId).FirstOrDefault());
                }
                else
                {
                    <ScrimMatchInfantryReportDeathsContainer i_scrimMatchId="@_renderedScrimMatchId" />
                }
            }*@
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
