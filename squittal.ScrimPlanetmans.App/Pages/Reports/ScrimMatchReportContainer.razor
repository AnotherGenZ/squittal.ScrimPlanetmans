@page "/Reports/{i_scrimMatchId}"
@page "/MatchReport/{i_scrimMatchId}"
@page "/ReportBrowser/{i_scrimMatchId}"

@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Data.Models;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.ScrimMatchReports;
@using squittal.ScrimPlanetmans.Services.ScrimMatchReports;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Text.RegularExpressions;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@inject IScrimMatchReportDataService ReportDataService
@inject IScrimMessageBroadcastService MessageService
@inject NavigationManager NavManager
@*@implements IDisposable*@

<div class="container-fluid" style="margin-top: 16px;">

    <div class="row">

        <div class="col-lg-6" style="margin-left: auto; margin-right: auto;">

            <div class="header-card-container default" style="background-color: transparent; box-shadow: 0px 2px 5px 0px var(--sq-light-blue-gray);">

                @if (_matchInfo == null)
                {
                    <SpinnerEllipsis />
                }
                else
                {

                    <h3>@(_matchInfo.Title): @_matchInfo.TeamAliases[1] vs @_matchInfo.TeamAliases[2]</h3>

                    @if (_isLoadingScrimPlayers || _matchInfo == null)
                    {
                        <SpinnerEllipsis />
                    }
                    else if (_playerStats == null || !_playerStats.Any() || !_matchInfo.TeamAliases.Any() || !_teamStats.Any())
                    {
                        <p>No player data found for match @_renderedScrimMatchId</p>
                    }
                    else
                    {

                    <table style="width: 100%;" class="table-responsive-sm table-striped-light">
                        <thead>
                            <tr>
                                <th></th>
                                <th></th>
                                <th style="text-align: right;">Points</th>
                                <th></th>
                                <th>Net Score</th>
                                <th>Kills</th>
                                <th>Deaths</th>
                                <th>HSR</th>
                                <th>Damage Assists</th>
                                <th>Damage Assisted Kills</th>
                                <th>1v1 KDR</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var team in _teamStats)
                            {
                                <tr class="@SqCssHelper.GetFactionClassFromId(_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Select(p => p.FactionId).FirstOrDefault())" style="color: var(--sq-ps2-primary); font-size: 1.2rem; background-color: transparent; border-bottom: 2px solid var(--sq-ps2-primary-light);">
                                    <td></td>
                                    <td>@(_matchInfo.TeamAliases[team.TeamOrdinal])</td>
                                    <td>@team.Points</td>
                                    <td></td>
                                    <td>@team.NetScore</td>
                                    <td>@team.Kills</td>
                                    <td>@team.Deaths</td>
                                    <td>@team.HeadshotPercent<span style="font-size: smaller;">%</span></td>
                                    <td>@team.DamageAssists</td>
                                    <td>@team.DamageAssistedKills</td>
                                    <td>@team.OneVsOneRatio</td>
                                    @*<td>@_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Sum(p => p.Kills)</td>
                                    <td>@_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Sum(p => p.Deaths)</td>
                                    <td>@Math.Round((double)_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Average(p => p.HeadshotPercent), 1)<span style="font-size: smaller;">%</span></td>
                                    <td>@_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Sum(p => p.DamageAssists)</td>
                                    <td>@_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Sum(p => p.DamageAssistedKills)</td>
                                    <td>@Math.Round(_playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal).Average(p => p.OneVsOneRatio), 2)</td>*@
                                </tr>

                                @foreach (var player in _playerStats.Where(p => p.TeamOrdinal == team.TeamOrdinal))
                                {
                                    <tr class="@SqCssHelper.GetFactionClassFromId(player.FactionId)" style="color: var(--sq-ps2-primary);">
                                        <td>
                                            @*<div class="playerLoadoutIcon ps2-icon @GetLoadoutIconFromLoadoutId(player.GetOrderedPlanetsideClassEventCountsList().FirstOrDefault().PlanetsideClass)" style="filter: drop-shadow(0px 0px 1px var(--sq-ps2-primary)); filter: "></div>*@
                                            <div class="playerLoadoutIcon ps2-icon @GetLoadoutIconFromLoadoutId(player.GetOrderedPlanetsideClassEventCountsList().FirstOrDefault().PlanetsideClass)" style="filter: @GetLoadoutIconFilterStyle(player.FactionId)"></div>
                                        </td>
                                        <td title="@player.NameFull [@(player.CharacterId)]">
                                            <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@player.NameDisplay</span>
                                            @if (player.PrestigeLevel != 0)
                                            {
                                                <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                                                    <sup>
                                                        <span class="oi oi-star small" aria-hidden="true"></span>
                                                    </sup>
                                                </div>
                                            }
                                        </td>
                                        <td style="text-align: right;">@player.Points</td>
                                        <td>
                                            <div class="graph" style="width: 110px;">
                                                <div class="graph-bar" style="width: @($"{GetPointGraphWidth(player.Points)}%"); height: 17px; margin: 5px 0 0 0; background-color: var(--sq-ov-ps2-primary); opacity: 0.9; box-sizing: border-box; border: 1px solid var(--sq-ov-ps2-primary-dark-alpha-80); border-left: 2px solid var(--sq-ov-ps2-primary-dark);"></div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="net stats-value">
                                                <span class="value">@player.NetScore</span><span class="label @GetNetScoreLabelCssClass(player.NetScore)">@GetNetScoreLabelText(player.NetScore)</span>
                                            </div>
                                        </td>
                                        <td>@player.Kills</td>
                                        <td>@player.Deaths</td>
                                        <td>@player.HeadshotPercent<span style="font-size: smaller;">%</span></td>
                                        <td>@player.DamageAssists</td>
                                        <td>@player.DamageAssistedKills</td>
                                        <td>@player.OneVsOneRatio</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    }

                }

            </div>

        </div>

    </div>
</div>

@code {
    [Parameter]
    public string i_scrimMatchId { get; set; }
    private string _renderedScrimMatchId { get; set; }

    private IEnumerable<ScrimMatchReportInfantryPlayerStats> _playerStats { get; set; }
    private IEnumerable<ScrimMatchReportInfantryTeamStats> _teamStats { get; set; }

    private ScrimMatchInfo _matchInfo { get; set; }

    private int _maxPlayerPoints { get; set; } = 1;

    private bool _isLoadingScrimPlayers { get; set; } = false;
    private bool _isChangingScrimMatch { get; set; } = false;

    private string _debug { get; set; } = string.Empty;

    #region Initialization Methods
    protected override async Task OnInitializedAsync()
    {
        _isLoadingScrimPlayers = true;

        if (i_scrimMatchId != null)
        {
            _renderedScrimMatchId = i_scrimMatchId;

            var TaskList = new List<Task>();

            var playerStatsTask = LoadInfantryPlayerStats();
            TaskList.Add(playerStatsTask);

            var teamStatsTask = LoadInfantryTeamStats();
            TaskList.Add(teamStatsTask);

            var matchInfoTask = LoadMatchInfo();
            TaskList.Add(matchInfoTask);

            await Task.WhenAll(TaskList);

            //_matchInfo = await ReportDataService.GetHistoricalScrimMatchInfoAsync(_renderedScrimMatchId);

            //_playerStats = await ReportDataService.GetHistoricalScrimMatchInfantryPlayerStatsAsync(_renderedScrimMatchId);

            //if (_playerStats.Any())
            //{
            //    _maxPlayerPoints = _playerStats.Max(p => p.Points);
            //}
        }

        _isLoadingScrimPlayers = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        //UpdateUriParameters();

        if (i_scrimMatchId != _renderedScrimMatchId)
        {
            _isChangingScrimMatch = true;
            InvokeAsyncStateHasChanged();

            _renderedScrimMatchId = i_scrimMatchId;

            var TaskList = new List<Task>();

            var playerStatsTask = LoadInfantryPlayerStats();
            TaskList.Add(playerStatsTask);

            var teamStatsTask = LoadInfantryTeamStats();
            TaskList.Add(teamStatsTask);

            var matchInfoTask = LoadMatchInfo();
            TaskList.Add(matchInfoTask);

            await Task.WhenAll(TaskList);

            //_matchInfo = await ReportDataService.GetHistoricalScrimMatchInfoAsync(_renderedScrimMatchId);

            //await LoadInfantryPlayerStats();

            paramsChanged = true;
        }

        if (paramsChanged)
        {
            _isChangingScrimMatch = false;
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadInfantryPlayerStats()
    {
        _playerStats = await ReportDataService.GetHistoricalScrimMatchInfantryPlayerStatsAsync(_renderedScrimMatchId);

        if (_playerStats != null && _playerStats.Any())
        {
            _maxPlayerPoints = _playerStats.Max(p => p.Points);
        }
    }

    private async Task LoadInfantryTeamStats()
    {
        _teamStats = await ReportDataService.GetHistoricalScrimMatchInfantryTeamStatsAsync(_renderedScrimMatchId);
    }

    private async Task LoadMatchInfo()
    {
        _matchInfo = await ReportDataService.GetHistoricalScrimMatchInfoAsync(_renderedScrimMatchId);
    }

    #endregion Initialization Methods


    private decimal GetPointGraphWidth(int points)
    {
        var maxPoints = _maxPlayerPoints;

        var playerPoints = points;

        return (playerPoints >= 1 && maxPoints > 0) ? Math.Ceiling(90 * ((decimal)playerPoints / (decimal)maxPoints)) : 4;
    }

    private double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }

    private string GetNetScoreLabelCssClass(int netScore)
    {
        if (netScore == 0)
        {
            return "neutral";
        }
        else if (netScore < 0)
        {
            return "negative";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetNetScoreLabelText(int netScore)
    {
        if (netScore == 0)
        {
            return "•";
        }
        else
        {
            return "Δ";
        }
    }

    private string GetLoadoutIconFromLoadoutId(PlanetsideClass planetsideClass)
    {
        if (planetsideClass == PlanetsideClass.Infiltrator)
        {
            return "infil";
        }
        else if (planetsideClass == PlanetsideClass.LightAssault)
        {
            return "la";
        }
        else if (planetsideClass == PlanetsideClass.Medic)
        {
            return "medic";
        }
        else if (planetsideClass == PlanetsideClass.Engineer)
        {
            return "engy";
        }
        else if (planetsideClass == PlanetsideClass.HeavyAssault)
        {
            return "heavy";
        }
        else if (planetsideClass == PlanetsideClass.MAX)
        {
            return "max";
        }
        else
        {
            return "unknown";
        }
    }

    private string GetLoadoutIconFilterStyle(int factionId)
    {
        if (factionId == 1)
        {
            return "brightness(0) saturate(100%) invert(39%) sepia(41%) saturate(1794%) hue-rotate(224deg) brightness(98%) contrast(91%);";
        }
        if (factionId == 2)
        {
            return "brightness(0) saturate(100%) invert(49%) sepia(57%) saturate(1428%) hue-rotate(184deg) brightness(101%) contrast(98%);";
        }
        if (factionId == 3)
        {
            return "brightness(0) saturate(100%) invert(50%) sepia(34%) saturate(1466%) hue-rotate(307deg) brightness(98%) contrast(88%);";
        }

        return string.Empty;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
