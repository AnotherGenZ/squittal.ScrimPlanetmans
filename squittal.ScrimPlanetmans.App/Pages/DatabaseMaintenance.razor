@page "/DbAdmin"

@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Services;

@inject DatabaseMaintenanceService DbMaintenance

<div class="container-fluid">
    <div class="row">

        <div class="col-lg-7">

            <div class="header-card-container default">

            <h5>Database Maintenance</h5>

            @if (_comparisons != null && _comparisons.Any())
            {
                <table class="table-responsive-sm table-striped-light mono-font ">
                    <thead>
                        <tr>
                            <th></th>
                            <th colspan="2" style="text-align: right;">Database<br/>Count</th>
                            <th colspan="2" style="text-align: right;">Census<br />Count</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var comparison in _comparisons)
                        {
                        <tr>
                            <td>@comparison.Name</td>

                            @if (comparison.IsLoadingStoreCount)
                            {
                                <td style="text-align: right; width: 80px; color: var(--sq-pink-lighter-alpha-50);">
                                    --
                                </td>
                                <td>
                                    <div class="btn btn-icon-primary">
                                        <span class="oi oi-reload spin"></span>
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td style="text-align: right; width: 80px;">
                                    @comparison.StoreCount
                                </td>
                                <td>
                                    <button class="btn btn-icon-primary" @onclick="(() => RefreshStoreCount(comparison))" title="Update @comparison.Name database entity count">
                                        <span class="oi oi-reload"></span>
                                    </button>
                                </td>
                            }

                            @if (comparison.IsLoadingCensusCount)
                            {
                                <td style="text-align: right; width: 80px; color: var(--sq-pink-lighter-alpha-50);">
                                    --
                                </td>
                                <td>
                                    <div class="btn btn-icon-primary">
                                        <span class="oi oi-reload spin"></span>
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td style="text-align: right; width: 80px;">
                                    @comparison.CensusCount
                                </td>
                                <td>
                                    <button class="btn btn-icon-primary" @onclick="(() => RefreshCensusCount(comparison))" title="Refresh @comparison.Name census entity count">
                                        <span class="oi oi-reload"></span>
                                    </button>
                                </td>
                            }

                            @if (comparison.IsRefreshingStore)
                            {
                                <td colspan="2" style="min-width: 160px;">
                                    <div class="btn btn-icon-primary" style="margin-left: calc(50% - 10px); padding-top: 0.375rem; padding-bottom: 0.375rem; margin-top: 0.2rem; margin-bottom: 0.2rem;">
                                        <span class="oi oi-reload spin"></span>
                                    </div>
                                </td>
                            }
                            else
                            {
                                @if (comparison.IsRefreshable)
                                {
                                    <td style="text-align: right; min-width: 160px;">
                                        <button class="btn btn-outline-primary" @onclick="(() => UpdateDatabaseFromCensus(comparison))" title="Update @comparison.Name database from census API">
                                            <span class="oi oi-cloud-download"></span>Update from Census
                                        </button>
                                    </td>
                                }
                                else
                                {
                                    <td style="text-align: center;">--</td>
                                }

                                <td style="text-align: right; min-width: 160px;">
                                    <button class="btn btn-outline-primary" @onclick="(() => UpdateDatabaseFromBackup(comparison))" title="Update @comparison.Name database from census API">
                                        <span class="oi oi-spreadsheet"></span>Update from Backup
                                    </button>
                                </td>
                            }
                        </tr>
                        }
                    </tbody>
                </table>
            }
            </div>
        </div>
    </div>
</div>


@code {
    private List<CensusStoreDataComparisonRow> _comparisons = new List<CensusStoreDataComparisonRow>();

    protected override void OnInitialized()
    {
        _comparisons = DbMaintenance.Comparisons;
    }

    protected override async Task OnInitializedAsync()
    {
        await DbMaintenance.InitializeCounts();
    }

    private async Task RefreshCensusCount(CensusStoreDataComparisonRow comparison)
    {
        var censusCountTask = comparison.SetCensusCount();
        await censusCountTask;
    }

    private async Task RefreshStoreCount(CensusStoreDataComparisonRow comparison)
    {
        var storeCountTask = comparison.SetStoreCount();
        await storeCountTask;
    }

    private async Task UpdateDatabaseFromCensus(CensusStoreDataComparisonRow comparison)
    {
        var updateStoreTask = comparison.RefreshStoreFromCensus();
        await updateStoreTask;
    }

    private async Task UpdateDatabaseFromBackup(CensusStoreDataComparisonRow comparison)
    {
        var updateStoreTask = comparison.RefreshStoreFromBackup();
        await updateStoreTask;
    }
}
