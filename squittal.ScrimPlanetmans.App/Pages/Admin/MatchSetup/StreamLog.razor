@using Newtonsoft.Json.Linq;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;

@inject IScrimMessageBroadcastService MessageService

<p style="margin: 0 0 0.1rem 0; font-size: 12px; color: var(--sq-logo-purple);">Stream Log</p>
<div style="height: 300px; overflow-y: auto; border: 1px solid var(--sq-light-blue-gray-alpha); background-color: white;">
    @if (_streamLogs.Any())
    {
        foreach (var log in _streamLogs.Reverse<MarkupString>().Take(200).ToList())
        {
            <p style="font-size: 10.5px; margin: 0 0 0.1rem 0;">@log</p>
        }

        if (_streamLogs.Count() > 200)
        {
            <p style="font-size: 10.5px; margin: 0;">...max log entries reach (showing 200 / @_streamLogs.Count)</p>
        }
    }
</div>


@code {
    private List<MarkupString> _streamLogs { get; set; } = new List<MarkupString>();

    protected override void OnInitialized()
    {
        MessageService.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;
        MessageService.RaiseScrimDeathActionEvent += ReceiveDeathActionEvent;

        MessageService.RaiseScrimReviveActionEvent += ReceiveReviveActionEvent;
        MessageService.RaiseScrimAssistActionEvent += ReceiveAssistActionEvent;
        MessageService.RaiseScrimObjectiveTickActionEvent += ReceiveObjectiveTickActionEvent;
        MessageService.RaiseScrimFacilityControlActionEvent += ReceiveScrimFacilityControlActionEvent;
    }

    #region  Event Handling
    private void ReceiveSimpleMessageEvent(object sender, SimpleMessageEventArgs e)
    {
        ReceiveMessage(e.Message);
    }

    private void ReceiveDeathActionEvent(object sender, ScrimDeathActionEventEventArgs e)
    {
        var info = e.Message.Info;
        LogMessage(info);
    }

    private void ReceiveReviveActionEvent(object sender, ScrimReviveActionEventEventArgs e)
    {
        var info = e.Message.Info;
        LogMessage(info);
    }

    private void ReceiveAssistActionEvent(object sender, ScrimAssistActionEventEventArgs e)
    {
        var info = e.Message.Info;
        LogMessage(info);
    }

    private void ReceiveObjectiveTickActionEvent(object sender, ScrimObjectiveTickActionEventEventArgs e)
    {
        var info = e.Message.Info;
        LogMessage(info);
    }
    
    private void ReceiveScrimFacilityControlActionEvent(object sender, ScrimFacilityControlActionEventEventArgs e)
    {
        var info = e.Message.Info;
        LogMessage(info);
    }


    #endregion


    private void ReceiveMessage(string message)
    {
        var payload = TryParseMessagePayload(message);
        if (payload == null)
        {
            return;
        }

        /*
        var eventName = payload.Value<string>("event_name");

        if (eventName == "Death")
        {
            LogMessage(payload.ToString(), _streamLogs);
        }

        else if (eventName == "GainExperience")
        {
            LogMessage(payload.ToString(), _streamLogs);
        }

        else if (eventName == "PlayerLogin")
        {
            LogMessage(payload.ToString(), _streamLogs);
            HandlePlayerLoginPayload(payload);
        }

        else if (eventName == "PlayerLogout")
        {
            LogMessage(payload.ToString(), _streamLogs);
            HandlePlayerLogoutPayload(payload);
        }
        */
    }

    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            //Console.WriteLine($"(91097) Failed to parse message: {message}");
            return null;
        }

        return jMsg;
    }

    private void LogMessage(string message)
    {
        var time = DateTime.Now.ToString("hh:mm:ss.fff tt");

        _streamLogs.Add((MarkupString)$"<span style=\"font-weight: 600;\">{time}:</span>  {message}");

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
