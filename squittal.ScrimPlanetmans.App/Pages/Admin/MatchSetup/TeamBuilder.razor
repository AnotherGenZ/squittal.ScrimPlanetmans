@using Newtonsoft.Json.Linq;
@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.Forms;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;

@inject IScrimTeamsManager ScrimTeamsManager
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchEngine ScrimMatchEngine
@inject IOutfitService OutfitService
@inject IWorldService WorldService
@inject IFactionService FactionService
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable


<div class="header-card-container @GetHeaderCardClass()">

    @if (_team == null)
    {
        <h4>Team @i_teamOrdinal</h4>
    }
    else if (!_teamOutfits.Any() && !_teamNonOutfitPlayers.Any())
    {
        <h4>
            @*Team @(i_teamOrdinal)<span class="mono-font">@(_team.HasCustomAlias ? $": {_team.Alias}" : string.Empty)</span>*@
            Team @(i_teamOrdinal):
            <EditForm Model="@_displayAlias" OnValidSubmit="HandleSetCustomDisplayAlias" style="display: inline; font-size: 1.2rem;" class="mono-font">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputAlias id="setAliasInput" @bind-Value="_displayAlias" style="width: 55px; color: inherit;" />

                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-pencil"></span>Update
                </button>
            </EditForm>

            @if (_team.EventAggregate != null && (_team.EventAggregate.Points != 0 || _team.EventAggregate.PointAdjustments.Any()))
            {
                <span style="font-size: 0.85rem; font-weight: 500;position: absolute;vertical-align: bottom;right: 2rem;top: 0.85rem;">
                    @(_team.EventAggregate.Kills)k @(_team.EventAggregate.Deaths)d
                    <span style="font-weight: 700; font-size: larger;">
                        @(_team.EventAggregate.Points)
                    </span>
                </span>
            }

        </h4>

    }
    else
    {
        <h4 class="@SqCssHelper.GetFactionClassFromId(_team.FactionId)" style="color: var(--sq-ps2-primary);">
            Team @($"{i_teamOrdinal}: ")
            <EditForm Model="@_displayAlias" OnValidSubmit="HandleSetCustomDisplayAlias" style="display: inline; font-size: 1.2rem; color: inherit;" class="mono-font">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputAlias id="setAliasInput" @bind-Value="_displayAlias" style="width: 55px; color: inherit;" />

                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-pencil"></span>Update
                </button>
            </EditForm>
            <span style="font-size: 0.85rem; font-weight: 500;position: absolute;vertical-align: bottom;right: 2rem;top: 0.85rem;">
                @(_team.EventAggregate.Kills)k @(_team.EventAggregate.Deaths)d
                <span style="font-weight: 700; font-size: larger;">
                    @(_team.EventAggregate.Points)
                </span>
            </span>
        </h4>
    }

    @* TODO: only display if match hasn't started yet*@
    @*<div style="margin: 0.2rem 0;">
            <EditForm Model="@_displayAlias" OnValidSubmit="HandleSetCustomDisplayAlias" style="display: inline;">
                <DataAnnotationsValidator />
                <ValidationSummary />

                Display Alias: <InputAlias id="setAliasInput" @bind-Value="_displayAlias" />

                <button type="submit" class="btn btn-primary">Update</button>
            </EditForm>
        </div>*@

    <div style="margin: 0.2rem 0;">
        <EditForm Model="@_inputAlias" OnValidSubmit="HandleValidOutfitAliasSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            Add Outfit: <InputAlias id="addOutfitInput" @bind-Value="_inputAlias" />

            <button type="submit" class="btn btn-primary">
                <span class="oi oi-people"></span>Add
            </button>
        </EditForm>
    </div>

    <div style="margin: 0.2rem 0;">
        <EditForm Model="@_inputPlayer" OnValidSubmit="HandleAddPlayerSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            Add Player: <InputText id="addPlayerInput" @bind-Value="_inputPlayer" />

            <button type="submit" class="btn btn-primary">
                <span class="oi oi-person"></span>Add
            </button>
        </EditForm>
    </div>

    @if (_teamOutfits.Any() || _teamNonOutfitPlayers.Any())
    {
        <div style="margin: 0.2rem 0;" title="Unlock to show buttons for removing outfits and players from this team">
            <EditForm Model="@_showRemovals">
                @*OnValidSubmit="HandleAddPlayerSubmit"*@
                <DataAnnotationsValidator />
                <ValidationSummary />

                Show Removal Controls: <InputCheckbox id="showRemovalsCheckBox" @bind-Value="_showRemovals" />
            </EditForm>
        </div>
    }

    <div style="margin: 0.4rem 0 0.2rem 0;">
        <div>
            <div style="display: inline-block; font-size: 0.9rem;">Point Adjustments</div>
            <button class="btn btn-link" style="padding: 0 0 0 0.5rem; font-size: smaller; vertical-align: baseline;" @onclick="TogglePointAdjustmentsVisibility">@(_extendPointAdjustments ? "Hide" : "Show")</button>
        </div>

        @if (_extendPointAdjustments)
        {
            @if (_team != null && _team.EventAggregate.PointAdjustments.Any())
            {
                <div class="@GetHeaderCardClass()">
                    <table class="table-responsive-sm table-striped-light mono-font smaller @SqCssHelper.GetFactionClassFromId(_team.FactionId)" style="margin-bottom: 0.5rem; width: 100%; font-size: small;">
                        <tbody style="border-top: 1px solid var(--sq-ps2-primary-light);">
                            @foreach (var adjustment in _team.EventAggregate.PointAdjustments)
                            {
                                <tr>
                                    <td style="text-align: right">@GetPointsDisplay(adjustment.Points)</td>
                                    @if (string.IsNullOrWhiteSpace(adjustment.Rationale))
                                    {
                                        <td style="font-style: italic;">No reason given</td>
                                    }
                                    else
                                    {
                                        <td>@adjustment.Rationale</td>
                                    }
                                    <td>@adjustment.Timestamp.ToString("hh:mm:ss tt")</td>

                                    <td style="width: 15px; text-align: right;">
                                        <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="(() => HandlePointAdjustmentRemove(adjustment))" title="Remove Point Adjustment">
                                            <span class="oi oi-x" style="font-size: 0.7rem; top: 0;"></span>
                                        </button>
                                    </td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (_showPointAdjustmentForm)
            {
                <EditForm Model="@_inputPointAdjustment" OnValidSubmit="HandlePointAdjustmentSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    Amount: <InputNumber id="adjustmentPoints" @bind-Value="_inputPointAdjustment.Points" style="width: 64px; margin: 0.2rem 0.4rem 0.2rem 0;" />

                    Reason: <InputText id="adjustmentRationale" @bind-Value="_inputPointAdjustment.Rationale" style="margin: 0.2rem 0;" />

                    <div style="display: block; margin-left: auto; margin-right: auto;">
                        <button type="submit" class="btn btn-primary" style="display: inline-block; margin: 0.2rem 0;">
                            <span class="oi oi-check"></span>Confirm
                        </button>

                        <button @onclick="HandlePointAdjustmentCancel" class="btn btn-outline-primary" style="display: inline-block; margin: 0.2rem 0;" title="Cancel adding new point adjustment">
                            <span class="oi oi-x" style="top: 0;"></span>Cancel
                        </button>
                    </div>

                </EditForm>
            }
            else
            {
                <button class="btn btn-outline-primary" @onclick="TogglePointAdjustmentFormVisibility" style="display: block; margin: 0.2rem auto 0.2rem auto; font-size: small;">
                    <span class="oi oi-plus"></span>New Point Adjustment
                </button>
            }


        }
    </div>

</div>

@if (_teamOutfits.Any())
{
    foreach (var outfit in _teamOutfits)
    {
        <div class="sq-mini-card-12 @SqCssHelper.GetFactionClassFromId(outfit.FactionId)">

            <h5 class="@SqCssHelper.GetFactionClassFromId(outfit.FactionId)" style="color: var(--sq-ps2-primary); margin-bottom: 0.1rem;">
                @*margin-top: 0.5rem;*@
                <b><span class="mono-font">[@outfit.Alias]</span> @outfit.Name</b> (@outfit.MemberCount | @outfit.MembersOnlineCount) <span>@_worlds?.Where(w => w.Id == outfit.WorldId).Select(w => w.Name).FirstOrDefault()</span><span> @FactionService.GetFactionAbbrevFromId((int)outfit.FactionId)</span>
            </h5>

            <p style="margin: 0 0 0.1rem 0;">
                @if (!_teamOutfitsLoadingMembers.Contains(outfit.AliasLower))
                {
                    <button class="btn btn-link" style="padding: 0 0 0 1rem; font-size: smaller; vertical-align: baseline;" @onclick="(() => ToggleOutfitPlayersVisibility(outfit.AliasLower))">@(ShowOutfitPlayers(outfit.AliasLower) ? "Hide Players" : "Show Players")</button>
                    <span>|</span><button class="btn btn-link" style="padding: 0 0 0 0.5rem; font-size: smaller; vertical-align: baseline;" @onclick="(() => RefreshOutfitPlayers(outfit.AliasLower))">Refresh</button>
                    @if (_showRemovals)
                    {
                        <span>|</span><button class="btn btn-link" style="padding: 0 0 0 0.5rem; font-size: smaller; vertical-align: baseline;" @onclick="(() => RemoveOutfit(outfit.AliasLower))">Remove</button>
                    }
                }
            </p>

            <div class="sq-content">

                @if (_teamOutfitsLoadingMembers.Contains(outfit.AliasLower))@*&& (_teamPlayersOnline == null || !_teamPlayersOnline.Any(p => p.OutfitId == outfit.Id)))*@
                {
                    <SpinnerEllipsis />
                }

                else if (_teamPlayersVisible != null && _teamPlayersVisible.Any(p => p.OutfitId == outfit.Id) && ShowOutfitPlayers(outfit.AliasLower))
                {
                    @if (_teamPlayersVisible.Any(p => p.OutfitId == outfit.Id && !p.IsBenched))
                    {
                        <table class="table-responsive-sm table-striped-light mono-font smaller @SqCssHelper.GetFactionClassFromId(outfit.FactionId)" style="margin-bottom: 0.5rem;">
                            <thead>
                                <tr>
                                    <th style="padding-right: 5px;width: 15px;"></th>
                                    <th></th>
                                    <th>K</th>
                                    <th>D</th>
                                    <th>P</th>
                                    <th>N</th>
                                    <th style="padding-right: 5px;width: 15px;"></th>
                                    @if (_showRemovals)
                                    {
                                        <th style="width: 15px; padding-right: 5px;"></th>
                                    }
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var member in _teamPlayersVisible.Where(p => p.OutfitId == outfit.Id && !p.IsBenched).ToList())
                                {
                                    <TeamBuilderPlayerRow Player=@member ShowRemovalControls=@_showRemovals />
                                }
                            </tbody>
                        </table>
                    }

                    @if (_teamPlayersVisible.Any(p => p.OutfitId == outfit.Id && p.IsBenched))
                    {
                        <table class="table-responsive-sm table-striped-light mono-font smaller @SqCssHelper.GetFactionClassFromId(outfit.FactionId)" style="margin-bottom: 0.5rem;">
                            <thead>

                                <tr style="border-bottom: 1px solid var(--sq-ps2-primary-light)">
                                    @if (!_teamPlayersVisible.Any(p => p.OutfitId == outfit.Id && !p.IsBenched))
                                    {
                                        <th colspan="2" style="font-weight: 400;">Benched Players</th>
                                        <th>K</th>
                                        <th>D</th>
                                        <th>P</th>
                                        <th>N</th>
                                    }
                                    else
                                    {
                                        <td colspan="6" style="font-weight: 400;">Benched Players</td>
                                    }

                                    <th style="padding-right: 5px;width: 15px;"></th>

                                    @if (_showRemovals)
                                    {
                                        <th style="width: 15px; padding-right: 5px;"></th>
                                    }
                                </tr>

                            </thead>

                            <tbody>
                                @foreach (var member in _teamPlayersVisible.Where(p => p.OutfitId == outfit.Id && p.IsBenched).ToList())
                                {
                                    <TeamBuilderPlayerRow Player=@member ShowRemovalControls=@_showRemovals />
                                }
                            </tbody>
                        </table>
                    }
                }
            </div>
        </div>
    }
}

@if (_teamOutfitsLoading.Any())
{
    <SpinnerEllipsis />
}

@if (_teamNonOutfitPlayers.Any() || _teamNonOutfitPlayersLoading.Any())
{
    <div class="sq-mini-card-12 default">

        <h5 style="color: var(--sq-pink); margin-bottom: 0.1rem;">
            <b>Other Players</b> (@_teamNonOutfitPlayers.Count() | @_teamNonOutfitPlayers.Count(p => p.IsOnline == true))
        </h5>

        <p style="margin: 0 0 0.1rem 0;">
            @if (_teamNonOutfitPlayers.Any())
            {
                <button class="btn btn-link" style="padding: 0 0 0 1rem; font-size: smaller; vertical-align: baseline;" @onclick="TogglNoneOutfitPlayersVisibility">@(_extendNonOutfitPlayers ? "Hide Players" : "Show Players")</button>
            }
        </p>

        <div class="sq-content">

            @if (_extendNonOutfitPlayers && _teamNonOutfitPlayers.Any(p => !p.IsBenched))
            {
                <table class="table-responsive-sm table-striped-light mono-font smaller" style="margin-bottom: 0.5rem; border-bottom: 1px solid var(--sq-pink-lighter-alpha-50);">
                    <thead>
                        <tr>
                            <th style="padding-right: 5px;width: 15px;"></th>
                            <th></th>
                            <th>K</th>
                            <th>D</th>
                            <th>P</th>
                            <th>N</th>
                            <th style="padding-right: 5px;width: 15px;"></th>
                            @if (_showRemovals)
                            {
                                <th style="width: 15px; padding-right: 5px;"></th>
                            }
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var member in _teamNonOutfitPlayers.Where(p => !p.IsBenched).ToList())
                        {
                            <TeamBuilderPlayerRow Player=@member ShowRemovalControls=@_showRemovals />
                        }
                    </tbody>
                </table>
            }

            @if (_teamNonOutfitPlayers.Any(p => p.IsBenched))
            {
                <table class="table-responsive-sm table-striped-light mono-font smaller" style="margin-bottom: 0.5rem; border-bottom: 1px solid var(--sq-pink-lighter-alpha-50);">
                    <thead>

                        <tr style="border-bottom: 1px solid var(--sq-pink-lighter-alpha-50)">
                            @if (!_teamNonOutfitPlayers.Any(p => !p.IsBenched))
                            {
                                <th colspan="2" style="font-weight: 400;">Benched Players</th>
                                <th>K</th>
                                <th>D</th>
                                <th>P</th>
                                <th>N</th>
                            }
                            else
                            {
                                <td colspan="6" style="font-weight: 400;">Benched Players</td>
                            }

                            <th style="padding-right: 5px;width: 15px;"></th>

                            @if (_showRemovals)
                            {
                                <th style="width: 15px; padding-right: 5px;"></th>
                            }
                        </tr>

                    </thead>

                    <tbody>
                        @foreach (var member in _teamNonOutfitPlayers.Where(p => p.IsBenched).ToList())
                        {
                            <TeamBuilderPlayerRow Player=@member ShowRemovalControls=@_showRemovals />
                        }
                    </tbody>
                </table>
            }

            @if (_teamNonOutfitPlayersLoading.Any())
            {
                <SpinnerEllipsis />
            }
        </div>
    </div>
}

<p style="width: 95%; margin: 1rem 0; border-bottom: 1px solid gray;"></p>



@code {
    [Parameter]
    public int i_teamOrdinal { get; set; }

    //[Parameter]
    //public EventCallback<string> i_OnAdminLogTextAdded { get; set; }


    #region Form & Input Variables
    private OutfitAlias _inputAlias = new OutfitAlias();

    private OutfitAlias _displayAlias = new OutfitAlias();

    private string _inputPlayer = string.Empty;

    private PointAdjustment _inputPointAdjustment = new PointAdjustment();


    private List<string> _teamOutfitsLoadingMembers = new List<string>();

    private List<string> _teamOutfitsLoading = new List<string>();

    private List<string> _validOutfitAliasHistory = new List<string>();


    private List<string> _teamNonOutfitPlayersLoading = new List<string>();
    #endregion

    #region Team & Players
    private Team _team;

    private List<Outfit> _teamOutfits = new List<Outfit>();

    private List<Player> _teamPlayers = new List<Player>();

    private List<Player> _teamPlayersOnline = new List<Player>();

    private List<Player> _teamPlayersParticipating = new List<Player>();

    private List<Player> _teamPlayersVisible = new List<Player>();

    private List<Player> _teamNonOutfitPlayers = new List<Player>();
    #endregion

    #region UI & Layout Variables
    private Dictionary<string, bool> _outfitPlayersExtendedMap = new Dictionary<string, bool>(); // <outfit alias, is player list expanded?>

    private bool _extendNonOutfitPlayers = true;

    private int _defaultMaxPlayersToExtend = 6;

    private bool _showRemovals = false;

    private bool _showPointAdjustmentForm = false;

    private bool _extendPointAdjustments = true;
    #endregion

    #region Helpers
    private IEnumerable<World> _worlds;
    private int _renderedTeamOrdinal;
    #endregion

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaiseTeamOutfitChangeEvent += ReceiveTeamOutfitChangeEvent;

        MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;

        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamStatUpdateEvent += ReceiveTeamStatUpdateEvent;
        MessageService.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;
    }

    protected override async Task OnInitializedAsync()
    {
        // TODO: move MessageService event subscriptions to OnInitialized?
        //MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        //MessageService.RaiseTeamOutfitChangeEvent += ReceiveTeamOutfitChangeEvent;

        //MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        //MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;

        //MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        //MessageService.RaiseTeamStatUpdateEvent += ReceiveTeamStatUpdateEvent;
        //MessageService.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;

        _worlds = await WorldService.GetAllWorldsAsync();
    }

    public void Dispose()
    {
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaiseTeamOutfitChangeEvent -= ReceiveTeamOutfitChangeEvent;

        MessageService.RaisePlayerLoginEvent -= ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent -= ReceivePlayerLogoutEvent;

        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamStatUpdateEvent -= ReceiveTeamStatUpdateEvent;
        MessageService.RaiseSimpleMessageEvent -= ReceiveSimpleMessageEvent;
    }

    protected override void OnParametersSet()
    {
        if (i_teamOrdinal != _renderedTeamOrdinal && i_teamOrdinal >= 0)
        {
            _renderedTeamOrdinal = i_teamOrdinal;
            InitializeTeamData();
        }
    }

    private void InitializeTeamData()
    {
        var message = $"Starting to reload Team {i_teamOrdinal} data...";
        LogMessage(message);

        _team = ScrimTeamsManager.GetTeam(i_teamOrdinal);

        if (_team == null)
        {
            return;
        }

        _displayAlias.Alias = _team.Alias;

        _teamOutfits = _team.Outfits;

        _teamPlayersParticipating = _team.ParticipatingPlayers;

        _teamPlayersVisible.AddRange(_teamPlayersParticipating);

        _validOutfitAliasHistory = _team.Outfits.Select(o => o.AliasLower).ToList();

        _teamPlayers = _team.Players;

        foreach (var player in _teamPlayers)
        {
            if (player.IsOnline && !_teamPlayersOnline.Any(p => p.Id == player.Id))
            {
                _teamPlayersOnline.Add(player);
            }

            if (player.IsOnline && !_teamPlayersVisible.Any(p => p.Id == player.Id))
            {
                _teamPlayersVisible.Add(player);
            }

            if (player.IsOutfitless && !_teamNonOutfitPlayers.Any(p => p.Id == player.Id))
            {
                _teamNonOutfitPlayers.Add(player);
            }
        }

        foreach (var outfit in _teamOutfits)
        {
            message = $"Loaded Team {i_teamOrdinal} outfit: [{outfit.Alias}] {outfit.Name}";
            LogMessage(message);

            if (_teamPlayersOnline.Count(p => p.OutfitAliasLower == outfit.AliasLower && !p.IsOutfitless) > _defaultMaxPlayersToExtend)
            {
                _outfitPlayersExtendedMap.Add(outfit.AliasLower, false);
            }
            else
            {
                _outfitPlayersExtendedMap.Add(outfit.AliasLower, true);
            }

            SetOutfitMembersOnlineCount(outfit.AliasLower);
        }

        message = $"Finished reloading Team {i_teamOrdinal} data";
        LogMessage(message);
    }
    #endregion

    #region  Form Submission & Validation
    private async void HandleValidOutfitAliasSubmit()
    {
        Outfit newOutfit;

        var newAlias = _inputAlias.Alias;
        var newAliasLower = newAlias.ToLower();

        if (!_validOutfitAliasHistory.Contains(newAliasLower) && ScrimTeamsManager.IsOutfitAvailable(newAliasLower, out Team owningTeam))
        {
            _teamOutfitsLoading.Add(newAliasLower);

            try
            {
                newOutfit = await OutfitService.GetOutfitByAlias(newAliasLower);

                if (newOutfit != null && newOutfit.MemberCount > 0)
                {
                    _validOutfitAliasHistory.Add(newAliasLower);
                    _inputAlias.Alias = string.Empty;

                    _teamOutfitsLoadingMembers.Add(newAliasLower);

                    var success = await ScrimTeamsManager.AddOutfitAliasToTeam(i_teamOrdinal, newAliasLower, newAlias);

                    _teamOutfitsLoading.Remove(newAliasLower);

                    if (_teamPlayersOnline.Count(p => p.OutfitAliasLower == newAliasLower) > _defaultMaxPlayersToExtend)
                    {
                        _outfitPlayersExtendedMap.Add(newAliasLower, false);
                    }
                    else
                    {
                        _outfitPlayersExtendedMap.Add(newAliasLower, true);
                    }

                    _teamOutfitsLoadingMembers.Remove(newAliasLower);
                }
                else
                {
                    if (newOutfit != null && newOutfit.MemberCount == 0)
                    {
                        LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add outfit [{newAliasLower}]</span>. Outfit has no members</span>");
                    }

                    _teamOutfitsLoading.Remove(newAliasLower);

                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
                }
            }
            catch (DaybreakGames.Census.Exceptions.CensusServiceUnavailableException ex)
            {
                _teamOutfitsLoading.Remove(newAliasLower);
                _teamOutfitsLoadingMembers.Remove(newAliasLower);

                LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add outfit [{newAliasLower}]</span>. The Census API Outfit service may be broken: {ex}</span>");

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                _teamOutfitsLoading.Remove(newAliasLower);
                _teamOutfitsLoadingMembers.Remove(newAliasLower);

                LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add outfit [{newAliasLower}]</span>: {ex}</span>");

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }
    }

    private void HandleSetCustomDisplayAlias()
    {
        var newAlias = _displayAlias.Alias;

        //var success = _team.TrySetAlias(newAlias, true);
        var success = ScrimTeamsManager.UpdateTeamAlias(i_teamOrdinal, newAlias, true);

        if (!success)
        {
            _displayAlias.Alias = string.Empty;
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void HandleAddPlayerSubmit()
    {
        var input = _inputPlayer;

        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        _teamNonOutfitPlayersLoading.Add(input);

        try
        {
            var success = await ScrimTeamsManager.TryAddCharacterToTeam(i_teamOrdinal, input);

            if (success)
            {
                _inputPlayer = string.Empty;
                _teamNonOutfitPlayersLoading.Remove(input);
            }
            else
            {
                _teamNonOutfitPlayersLoading.Remove(input);

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }
        catch (DaybreakGames.Census.Exceptions.CensusServiceUnavailableException ex)
        {
            _teamNonOutfitPlayersLoading.Remove(input);

            LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add character {input}</span>. The Census API Character service may be broken: {ex}</span>");
        }
        catch (Exception ex)
        {
            _teamNonOutfitPlayersLoading.Remove(input);
            LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add character {input}</span>: {ex}</span>");
        }

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void RefreshOutfitPlayers(string aliasLower)
    {
        if (!_teamOutfitsLoadingMembers.Contains(aliasLower) && _teamOutfits.Any(o => o.AliasLower == aliasLower))
        {
            _teamOutfitsLoadingMembers.Add(aliasLower);

            try
            {
                var success = await ScrimTeamsManager.RefreshOutfitPlayers(aliasLower);

                _teamOutfitsLoadingMembers.Remove(aliasLower);

                var alias = _teamOutfits.Where(o => o.AliasLower == aliasLower).Select(o => o.Alias).FirstOrDefault();

                var message = success
                                ? $"Team {i_teamOrdinal} [{alias}] Players REFRESH: Players Added"
                                : $"Team {i_teamOrdinal} [{alias}] Players REFRESH: No Players Added";

                LogMessage(message);

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
            catch (DaybreakGames.Census.Exceptions.CensusServiceUnavailableException ex)
            {
                _teamOutfitsLoadingMembers.Remove(aliasLower);

                var alias = _teamOutfits.Where(o => o.AliasLower == aliasLower).Select(o => o.Alias).FirstOrDefault();

                var message = $"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to refresh outfit [{alias}]. The Census API Outfit service may be broken:</span> {ex.ToString()}</span>";

                LogMessage(message);

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                _teamOutfitsLoadingMembers.Remove(aliasLower);

                var alias = _teamOutfits.Where(o => o.AliasLower == aliasLower).Select(o => o.Alias).FirstOrDefault();

                var message = $"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to refresh outfit [{alias}]. The outfit may no longer exist:</span> {ex.ToString()}</span>";

                LogMessage(message);

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }
    }

    private async void RemoveOutfit(string aliasLower)
    {
        if (!_teamOutfitsLoading.Contains(aliasLower) && !_teamOutfitsLoadingMembers.Contains(aliasLower))
        {
            await ScrimTeamsManager.RemoveOutfitFromTeamAndDb(aliasLower);

            _validOutfitAliasHistory.RemoveAll(alias => alias == aliasLower);
            _outfitPlayersExtendedMap.Remove(aliasLower);
        }
    }

    private async void RemovePlayer(string characterId)
    {
        var success = await ScrimTeamsManager.RemoveCharacterFromTeamAndDb(characterId);


        //if (success)
        //{
        //    _teamPlayers.RemoveAll(p => p.Id == characterId);
        //    _teamNonOutfitPlayers.RemoveAll(p => p.Id == characterId);
        //}
    }

    private void HandleSubPlayerIn(string characterId)
    {
        ScrimTeamsManager.SetPlayerBenchedStatus(characterId, false);
    }

    private void HandleSubPlayerOut(string characterId)
    {
        ScrimTeamsManager.SetPlayerBenchedStatus(characterId, true);
    }

    private async void HandlePointAdjustmentSubmit()
    {
        var adjustment = _inputPointAdjustment;

        if (adjustment.Points == 0 && string.IsNullOrWhiteSpace(adjustment.Rationale))
        {
            return;
        }

        adjustment.Timestamp = DateTime.Now;

        await ScrimTeamsManager.AdjustTeamPoints(i_teamOrdinal, adjustment);

        _inputPointAdjustment = new PointAdjustment();

        _showPointAdjustmentForm = false;
    }

    private void HandlePointAdjustmentCancel()
    {
        _inputPointAdjustment = new PointAdjustment();

        _showPointAdjustmentForm = false;
    }

    private void HandlePointAdjustmentRemove(PointAdjustment adjustment)
    {
        ScrimTeamsManager.RemoveTeamPointAdjustment(i_teamOrdinal, adjustment);
    }

    #endregion

    #region UI & Layout Controls
    private void ToggleOutfitPlayersVisibility(string aliasLower)
    {
        if (_outfitPlayersExtendedMap.TryGetValue(aliasLower, out bool oldshowPlayers))
        {
            _outfitPlayersExtendedMap[aliasLower] = !oldshowPlayers;
        }
    }

    private void TogglNoneOutfitPlayersVisibility()
    {
        _extendNonOutfitPlayers = !_extendNonOutfitPlayers;
    }

    private bool ShowOutfitPlayers(string aliasLower)
    {
        if (_outfitPlayersExtendedMap.TryGetValue(aliasLower, out bool showPlayers))
        {
            return showPlayers;
        }
        else
        {
            return false;
        }
    }

    private void TogglePointAdjustmentsVisibility()
    {
        _extendPointAdjustments = !_extendPointAdjustments;

        if (!_extendPointAdjustments)
        {
            _showPointAdjustmentForm = false;
        }
    }

    private void TogglePointAdjustmentFormVisibility()
    {
        _showPointAdjustmentForm = !_showPointAdjustmentForm;
    }

    #endregion UI & Layout Controls

    #region Event Handling
    private void LogMessage(string message)
    {
        MessageService.BroadcastSimpleMessage(message);
    }

    private void ReceiveTeamPlayerChangeEvent(object sender, TeamPlayerChangeEventArgs e)
    {
        var message = e.Message;

        var player = message.Player;
        if (player.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        switch (message.ChangeType)
        {
            case TeamPlayerChangeType.Add:
                HandleTeamPlayerChangeAdd(message);
                break;

            case TeamPlayerChangeType.Remove:
                HandleTeamPlayerChangeRemove(message);
                break;
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ReceiveTeamOutfitChangeEvent(object sender, TeamOutfitChangeEventArgs e)
    {
        var message = e.Message;

        var aliasLower = message.Outfit.AliasLower;

        if (message.ChangeType == TeamChangeType.Add)
        {
            _teamOutfitsLoading.Remove(aliasLower);
        }
        else if (message.ChangeType == TeamChangeType.Remove)
        {
            _validOutfitAliasHistory.RemoveAll(alias => alias == aliasLower);
            _outfitPlayersExtendedMap.Remove(aliasLower);
        }

        _displayAlias.Alias = _team.Alias;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });

    }

    private void HandleTeamPlayerChangeAdd(TeamPlayerChangeMessage message)
    {
        var player = message.Player;

        if (player.IsOutfitless && !_teamNonOutfitPlayers.Any(p => p.Id == player.Id))
        {
            _teamNonOutfitPlayers.Add(player);
        }
        else
        {
            _teamOutfitsLoading.Remove(player.OutfitAliasLower);
        }

        if (player.IsOnline)
        {
            _teamPlayersOnline.Add(player);

            if (!player.IsOutfitless)
            {
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
            }

            if (!_teamPlayersVisible.Any(p => p.Id == player.Id))
            {
                _teamPlayersVisible.Add(player);
            }
        }

        if (message.IsLastOfOutfit)
        {
            _teamOutfitsLoadingMembers.Remove(player.OutfitAliasLower);
        }
    }

    private void HandleTeamPlayerChangeRemove(TeamPlayerChangeMessage message)
    {
        var player = message.Player;

        _teamPlayersOnline.RemoveAll(p => p.Id == player.Id);
        _teamPlayersParticipating.RemoveAll(p => p.Id == player.Id);
        _teamPlayersVisible.RemoveAll(p => p.Id == player.Id);

        if (player.IsOutfitless)
        {
            _teamNonOutfitPlayers.RemoveAll(p => p.Id == player.Id);
        }
        else
        {
            SetOutfitMembersOnlineCount(player.OutfitAliasLower);
        }
    }

    private void ReceivePlayerStatUpdateEvent(object sender, PlayerStatUpdateEventArgs e)
    {
        var message = e.Message;
        var player = message.Player;

        if (player.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        if (player.IsParticipating && !_teamPlayersParticipating.Any(p => p.Id == player.Id))
        {
            _teamPlayersParticipating.Add(player);
        }

        if ((player.IsParticipating || player.IsOnline) && !_teamPlayersVisible.Any(p => p.Id == player.Id))
        {
            _teamPlayersVisible.Add(player);
        }

        if (player.IsOutfitless && !_teamNonOutfitPlayers.Any(p => p.Id == player.Id))
        {
            _teamNonOutfitPlayers.Add(player);
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ReceiveTeamStatUpdateEvent(object sender, TeamStatUpdateEventArgs e)
    {
        var message = e.Message;
        var team = message.Team;

        if (team.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ReceiveSimpleMessageEvent(object sender, SimpleMessageEventArgs e)
    {
        ReceiveMessage(e.Message);
    }

    private void ReceiveMessage(string message)
    {
        //var payload = TryParseMessagePayload(message);
        //if (payload == null)
        //{
        //    return;
        //}

        //var eventName = payload.Value<string>("event_name");

        //if (eventName == "PlayerLogin")
        //{
        //    HandlePlayerLoginPayload(payload);
        //}

        //else if (eventName == "PlayerLogout")
        //{
        //    HandlePlayerLogoutPayload(payload);
        //}
    }

    private void HandlePlayerLoginPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = _teamPlayers.Where(p => p.Id == characterId).FirstOrDefault();

        if (player == null)
        {
            return;
        }

        if (!_teamPlayersOnline.Any(p => p.Id == player.Id))
        {
            _teamPlayersOnline.Add(player);

            if (_teamOutfits.Any(o => o.Id == player.OutfitId) && !player.IsOutfitless)
            {
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
            }
        }

        if (!_teamPlayersVisible.Any(p => p.Id == player.Id))
        {
            _teamPlayersVisible.Add(player);
        }

        var message = $"Team {i_teamOrdinal} Player LOGIN: {player.NameDisplay} [{player.Id}]";

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void HandlePlayerLogoutPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = _teamPlayers.Where(p => p.Id == characterId).FirstOrDefault();

        if (player == null)
        {
            return;
        }

        if (_teamPlayersOnline.Any(p => p.Id == player.Id))
        {
            _teamPlayersOnline.Remove(player);

            if (_teamOutfits.Any(o => o.Id == player.OutfitId) && !player.IsOutfitless)
            {
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
            }
        }

        // Only remove the player from the visible list if they haven't done anything in the match
        if (!_teamPlayersParticipating.Any(p => p.Id == player.Id))
        {
            _teamPlayersVisible.RemoveAll(p => p.Id == player.Id);
        }

        var message = $"Team {i_teamOrdinal} Player LOGOUT: {player.NameDisplay} [{player.Id}]";

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            //Console.WriteLine($"(91097) Failed to parse message: {message}");
            return null;
        }

        return jMsg;
    }

    private void ReceivePlayerLoginEvent(object sender, PlayerLoginEventArgs e)
    {
        var player = e.Message.Player;

        if (player.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        if (!_teamPlayersOnline.Any(p => p.Id == player.Id))
        {
            _teamPlayersOnline.Add(player);

            if (_teamOutfits.Any(o => o.Id == player.OutfitId) && !player.IsOutfitless)
            {
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
            }
        }

        if (!_teamPlayersVisible.Any(p => p.Id == player.Id))
        {
            _teamPlayersVisible.Add(player);
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ReceivePlayerLogoutEvent(object sender, PlayerLogoutEventArgs e)
    {
        var player = e.Message.Player;

        if (player.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        if (_teamPlayersOnline.Any(p => p.Id == player.Id))
        {
            _teamPlayersOnline.Remove(player);

            if (_teamOutfits.Any(o => o.Id == player.OutfitId) && !player.IsOutfitless)
            {
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
            }
        }

        // Only remove the player from the visible list if they haven't done anything in the match
        if (!_teamPlayersParticipating.Any(p => p.Id == player.Id))
        {
            _teamPlayersVisible.RemoveAll(p => p.Id == player.Id);
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    #endregion

    private void SetOutfitMembersOnlineCount(string aliasLower)
    {
        var outfit = _teamOutfits.FirstOrDefault(o => o.AliasLower == aliasLower);
        if (outfit == null)
        {
            return;
        }
        outfit.MembersOnlineCount = _teamPlayersOnline.Where(p => p.OutfitAliasLower == aliasLower && !p.IsOutfitless).Count();
    }

    private void UpdateOutfitMembersOnlineCount(string aliasLower, int addend)
    {
        var outfit = _teamOutfits.FirstOrDefault(o => o.AliasLower == aliasLower);
        if (outfit == null)
        {
            return;
        }
        outfit.MembersOnlineCount += addend;
    }

    private string GetHeaderCardClass()
    {
        return (_team == null || !_teamOutfits.Any())
            ? "default"
            : SqCssHelper.GetFactionClassFromId(_team.FactionId);
    }

    private double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }

    private string GetPointsDisplay(int points)
    {
        if (points >= 0)
        {
            return $"+{points.ToString()}";
        }
        else
        {
            return $"{points.ToString()}";
        }
    }
}
