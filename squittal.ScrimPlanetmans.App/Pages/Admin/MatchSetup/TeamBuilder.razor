@using Newtonsoft.Json.Linq;
@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.Shared.Models.ScrimEngine;
@using squittal.ScrimPlanetmans.Shared.Models.Planetside;
@using System.Diagnostics;

@inject IScrimTeamsManager ScrimTeamsManager
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchEngine ScrimMatchEngine
@inject IOutfitService OutfitService
@inject IWorldService WorldService
@inject IFactionService FactionService
@inject IScrimMessageBroadcastService MessageService


<div class="header-card-container @GetHeaderCardClass()">
    
    @if (_team == null)
    {
        <h4>Team @i_teamOrdinal</h4>
    }
    else if (!_teamOutfits.Any() )
    {
        <h4>Team @(i_teamOrdinal)@(_team.HasCustomAlias ? $": {_team.Alias}" : string.Empty)</h4>
    }
    else
    {
        <h4 class="@SqCssHelper.GetFactionClassFromId(_team.FactionId)" style="color: var(--sq-ps2-primary);">
            Team @($"{i_teamOrdinal}: {_team.Alias}")
            <span style="font-size: 0.85rem; font-weight: 500;position: absolute;vertical-align: bottom;right: 2rem;top: 0.85rem;">
                @(_team.EventAggregate.Kills)k @(_team.EventAggregate.Deaths)d
                <span style="font-weight: 700; font-size: larger;">
                    @(_team.EventAggregate.Points)
                </span>
            </span>
        </h4>
    }

    @* TODO: only display if match hasn't started yet*@
    <div style="margin: 0.2rem 0;">
        <EditForm Model="@_displayAlias" OnValidSubmit="HandleSetCustomDisplayAlias">
            <DataAnnotationsValidator />
            <ValidationSummary />

            Display Alias: <InputAlias id="alias1" @bind-Value="_displayAlias" />

            <button type="submit" class="btn btn-primary">Update</button>
        </EditForm>
    </div>

    <div style="margin: 0.2rem 0;">
        <EditForm Model="@_inputAlias" OnValidSubmit="HandleValidOutfitAliasSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            Add Outfit: <InputAlias id="alias1" @bind-Value="_inputAlias" />

            <button type="submit" class="btn btn-primary">
                <span class="oi oi-plus" style="color: #ffffff; font-size: 0.7rem; top: 0;"></span> Add
            </button>
        </EditForm>
    </div>

    <div style="margin: 0.2rem 0;">
        <EditForm Model="@_inputPlayer" OnValidSubmit="HandleAddPlayerSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            Add Player: <InputText id="matchTitle" @bind-Value="_inputPlayer" />

            <button type="submit" class="btn btn-primary">
                <span class="oi oi-plus" style="color: #ffffff; font-size: 0.7rem; top: 0;"></span> Add
            </button>
        </EditForm>
    </div>

    @*@if  (_team != null && _teamOutfits.Any() && ScrimMatchEngine.GetMatchState() != MatchState.Uninitialized)
    {
        <table class="table-responsive-sm table-striped-light @SqCssHelper.GetFactionClassFromId(_team.FactionId)" style="margin-bottom: 0.5rem;">
            <thead>
                <tr>
                    <th>K</th>
                    <th>D</th>
                    <th>P</th>
                    <th>N</th>
                </tr>
            </thead>
                    
            <tbody>
                <tr>
                    <td style="opacity: @GetStatOpacity(_team.EventAggregate.Kills);">@(_team.EventAggregate.Kills)</td>
                    <td style="opacity: @GetStatOpacity(_team.EventAggregate.Deaths);">@(_team.EventAggregate.Deaths)</td>
                    <td style="opacity: @GetStatOpacity(_team.EventAggregate.Points);">@(_team.EventAggregate.Points)</td>
                    <td style="font-weight: 700; font-size: larger; opacity: @GetStatOpacity(_team.EventAggregate.NetScore);">@(_team.EventAggregate.NetScore)</td>
                </tr>
            </tbody>
        </table>
    }*@

</div>

@if (_teamOutfits.Any())
{
    foreach (var outfit in _teamOutfits)
    {
    <div class="sq-mini-card-12 @SqCssHelper.GetFactionClassFromId(outfit.FactionId)">

        <h5  class="@SqCssHelper.GetFactionClassFromId(outfit.FactionId)" style="color: var(--sq-ps2-primary); margin-bottom: 0.1rem;"> @*margin-top: 0.5rem;*@
            <b>[@outfit.Alias] @outfit.Name</b> (@outfit.MemberCount | @outfit.MembersOnlineCount) <span>@_worlds?.Where(w => w.Id == outfit.WorldId).Select(w => w.Name).FirstOrDefault()</span><span> @FactionService.GetFactionAbbrevFromId((int)outfit.FactionId)</span>
        </h5>

        <p style="margin: 0 0 0.1rem 0;">
            @if (!_teamOutfitsLoadingMembers.Contains(outfit.AliasLower))
            {
            <button class="btn btn-link" style="padding: 0 0 0 1rem; font-size: smaller; vertical-align: baseline;" @onclick="(() => ToggleOutfitPlayersVisibility(outfit.AliasLower))">@(ShowOutfitPlayers(outfit.AliasLower) ? "Hide Players" : "Show Players")</button>
            <span>|</span><button class="btn btn-link" style="padding: 0 0 0 0.5rem; font-size: smaller; vertical-align: baseline;" @onclick="(() => RefreshOutfitPlayers(outfit.AliasLower))">Refresh</button>
            <span>|</span><button class="btn btn-link" style="padding: 0 0 0 0.5rem; font-size: smaller; vertical-align: baseline;" @onclick="(() => RemoveOutfit(outfit.AliasLower))">Remove</button>
            }
        </p>

        <div class="sq-content">

            @if (_teamOutfitsLoadingMembers.Contains(outfit.AliasLower) && (_teamPlayersOnline == null || !_teamPlayersOnline.Any(p => p.OutfitId == outfit.Id)))
            {
                <SpinnerEllipsis /><span>first</span>
            }

            else if (_teamPlayersVisible != null && _teamPlayersVisible.Any(p => p.OutfitId == outfit.Id) && ShowOutfitPlayers(outfit.AliasLower))
            {
                <table class="table-responsive-sm table-striped-light @SqCssHelper.GetFactionClassFromId(outfit.FactionId)" style="margin-bottom: 0.5rem;">
                    <thead>
                        <tr>
                            <th></th>
                            <th></th>
                            <th>K</th>
                            <th>D</th>
                            <th>P</th>
                            <th>N</th>
                        </tr>
                    </thead>
                    
                    <tbody>
                        @foreach (var member in _teamPlayersVisible.Where(p => p.OutfitId == outfit.Id).ToList())
                        {
                            <tr>
                                <td title="@(member.IsOnline ? "Online" : "Offline")">@SqCssHelper.GetOnlineStatusEmoji(member.IsOnline)</td>
                                <td  title="@member.NameFull [@(member.Id)]">
                                    <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@member.NameFull</span>
                                    <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(member.Id)]</span> @*opacity: 0.8;*@

                                </td>
                                <td style="opacity: @GetStatOpacity(member.EventAggregate.Kills);">@(member.EventAggregate.Kills)</td>
                                <td style="opacity: @GetStatOpacity(member.EventAggregate.Deaths);">@(member.EventAggregate.Deaths)</td>
                                <td style="opacity: @GetStatOpacity(member.EventAggregate.Points);">@(member.EventAggregate.Points)</td>
                                <td style="font-weight: 700; font-size: larger; opacity: @GetStatOpacity(member.EventAggregate.NetScore);">@(member.EventAggregate.NetScore)</td>

                                @* TODO: add button to remove player*@

                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

    </div>
    }
}

@if (_teamOutfitsLoading.Any())
{
    <SpinnerEllipsis /><span>second</span>
}

@if (_teamNonOutfitPlayers.Any() || _teamNonOutfitPlayersLoading.Any())
{
    <div class="sq-mini-card-12 @SqCssHelper.GetFactionClassFromId(null)">

        <h5 style="color: var(--sq-pink); margin-bottom: 0.1rem;">
            <b>Other Players</b> (@_teamNonOutfitPlayers.Count() | @_teamNonOutfitPlayers.Count(p => p.IsOnline == true))
        </h5>

        <p style="margin: 0 0 0.1rem 0;">
            @if (!_teamNonOutfitPlayers.Any())
            {
            <button class="btn btn-link" style="padding: 0 0 0 1rem; font-size: smaller; vertical-align: baseline;" @onclick="TogglNoneOutfitPlayersVisibility">@(_extendNonOutfitPlayers ? "Hide Players" : "Show Players")</button>
            }
        </p>

        <div class="sq-content">

            @if (_extendNonOutfitPlayers && _teamNonOutfitPlayers.Any())
            {
                <table class="table-responsive-sm table-striped-light @SqCssHelper.GetFactionClassFromId(null)" style="margin-bottom: 0.5rem;">
                    <thead>
                        <tr>
                            <th></th>
                            <th></th>
                            <th>K</th>
                            <th>D</th>
                            <th>P</th>
                            <th>N</th>
                        </tr>
                    </thead>
                    
                    <tbody>
                        @foreach (var member in _teamNonOutfitPlayers)
                        {
                            <tr>
                                <td title="@(member.IsOnline ? "Online" : "Offline")">@SqCssHelper.GetOnlineStatusEmoji(member.IsOnline)</td>
                                <td  title="@member.NameFull [@(member.Id)]">
                                    <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@member.NameFull</span>
                                    <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(member.Id)]</span> @*opacity: 0.8;*@

                                </td>
                                <td style="opacity: @GetStatOpacity(member.EventAggregate.Kills);">@(member.EventAggregate.Kills)</td>
                                <td style="opacity: @GetStatOpacity(member.EventAggregate.Deaths);">@(member.EventAggregate.Deaths)</td>
                                <td style="opacity: @GetStatOpacity(member.EventAggregate.Points);">@(member.EventAggregate.Points)</td>
                                <td style="font-weight: 700; font-size: larger; opacity: @GetStatOpacity(member.EventAggregate.NetScore);">@(member.EventAggregate.NetScore)</td>

                                @* TODO: add button to remove player*@

                            </tr>
                        }
                    </tbody>
                </table>
            }

            @if (_teamNonOutfitPlayersLoading.Any())
            {
                <SpinnerEllipsis /><span>first</span>
            }
        </div>
    </div>
}

<p style="width: 95%; margin: 1rem 0; border-bottom: 1px solid gray;"></p>



@code {
    [Parameter]
    public int i_teamOrdinal { get; set; }

    //[Parameter]
    //public EventCallback<string> i_OnAdminLogTextAdded { get; set; }


    /* Form & Input Variables */
    private OutfitAlias _inputAlias = new OutfitAlias();

    private OutfitAlias _displayAlias = new OutfitAlias();

    private string _inputPlayer = string.Empty;


    private List<string> _teamOutfitsLoadingMembers = new List<string>();

    private List<string> _teamOutfitsLoading = new List<string>();

    private List<string> _validOutfitAliasHistory = new List<string>();


    private List<string> _teamNonOutfitPlayersLoading = new List<string>();


    /* Team & Players */
    private Team _team;

    private List<Outfit> _teamOutfits = new List<Outfit>();

    private List<Player> _teamPlayers = new List<Player>();

    private List<Player> _teamPlayersOnline = new List<Player>();

    private List<Player> _teamPlayersParticipating = new List<Player>();

    private List<Player> _teamPlayersVisible = new List<Player>();

    private List<Player> _teamNonOutfitPlayers = new List<Player>();

    /* UI & Layout Variables */
    private Dictionary<string, bool> _outfitPlayersExtendedMap = new Dictionary<string, bool>(); // <outfit alias, is player list expanded?>

    private bool _extendNonOutfitPlayers = true;

    private int _defaultMaxPlayersToExtend = 6;

    /* Helpers */
    private IEnumerable<World> _worlds;
    private int _renderedTeamOrdinal;

    /***********
       Methods
     ***********/
    protected override async Task OnInitializedAsync()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;

        _worlds = await WorldService.GetAllWorldsAsync();

        //InitializeTeamData();
    }

    protected override void OnParametersSet()
    {
        if (i_teamOrdinal != _renderedTeamOrdinal && i_teamOrdinal >= 0)
        {
            _renderedTeamOrdinal = i_teamOrdinal;
            InitializeTeamData();
        }
    }

    private void InitializeTeamData()
    {
        var message = $"Starting to reload Team {i_teamOrdinal} data...";
        LogMessage(message);

        _team = ScrimTeamsManager.GetTeam(i_teamOrdinal);

        if (_team == null)
        {
            return;
        }

        _teamOutfits = _team.Outfits;

        _teamPlayersParticipating = _team.ParticipatingPlayers; // ScrimTeamsManager.GetParticipatingPlayers().ToList();

        _teamPlayersVisible.AddRange(_teamPlayersParticipating);

        _validOutfitAliasHistory = _team.Outfits.Select(o => o.AliasLower).ToList();

        //var players = _team.Players;
        _teamPlayers = _team.Players;

        //foreach (var player in players)
        foreach (var player in _teamPlayers)
        {
            //_teamPlayers.Add(player);

            if (player.IsOnline && !_teamPlayersOnline.Any(p => p.Id == player.Id))
            {
                _teamPlayersOnline.Add(player);
                //UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, 1);
            }

            if (player.IsOnline && !_teamPlayersVisible.Any(p => p.Id == player.Id))
            {
                _teamPlayersVisible.Add(player);
            }

            if (player.IsOutfitless && !_teamNonOutfitPlayers.Any(p => p.Id == player.Id))
            {
                _teamNonOutfitPlayers.Add(player);
            }
        }

        foreach (var outfit in _teamOutfits)
        {
            message = $"Loaded Team {i_teamOrdinal} outfit: [{outfit.Alias}] {outfit.Name}";
            LogMessage(message);

            //_outfitPlayersExtendedMap.Add(outfit.AliasLower, true);
            if (_teamPlayersOnline.Count(p => p.OutfitAliasLower == outfit.AliasLower && !p.IsOutfitless) > _defaultMaxPlayersToExtend)
            {
                _outfitPlayersExtendedMap.Add(outfit.AliasLower, false);
            }
            else
            {
                _outfitPlayersExtendedMap.Add(outfit.AliasLower, true);
            }

            SetOutfitMembersOnlineCount(outfit.AliasLower);
        }

        message = $"Finished reloading Team {i_teamOrdinal} data";
        LogMessage(message);
    }

    /**********************************
     *  Form Submission & Validation
     **********************************/
    private async void HandleValidOutfitAliasSubmit()
    {
        Outfit newOutfit;

        var newAlias = _inputAlias.Alias;
        var newAliasLower = newAlias.ToLower();

        if (!_validOutfitAliasHistory.Contains(newAliasLower) && ScrimTeamsManager.IsOutfitAvailable(newAliasLower, out Team owningTeam))
        {
            _teamOutfitsLoading.Add(newAliasLower);

            newOutfit = await OutfitService.GetOutfitByAlias(newAliasLower);

            if (newOutfit != null)
            {
                _validOutfitAliasHistory.Add(newAliasLower);
                _inputAlias.Alias = string.Empty;

                _teamOutfitsLoadingMembers.Add(newAliasLower);

                try
                {
                    var success = await ScrimTeamsManager.AddOutfitAliasToTeam(i_teamOrdinal, newAliasLower, newAlias);
                }
                //catch (DaybreakGames.Census.Exceptions.CensusServiceUnavailableException er)
                catch (Exception ex)
                {
                    LogMessage($"<span style=\"color: red;\">Failed to add outfit {newAlias}: {ex}</span>");
                }

                _teamOutfitsLoading.Remove(newAliasLower);

                if (_teamPlayersOnline.Count(p => p.OutfitAliasLower == newAliasLower) > _defaultMaxPlayersToExtend)
                {
                    _outfitPlayersExtendedMap.Add(newAliasLower, false);
                }
                else
                {
                    _outfitPlayersExtendedMap.Add(newAliasLower, true);
                }

                _teamOutfitsLoadingMembers.Remove(newAliasLower);
            }
            else
            {
                _teamOutfitsLoading.Remove(newAliasLower);

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }
    }

    private void HandleSetCustomDisplayAlias()
    {
        var newAlias = _displayAlias.Alias;

        var success = _team.TrySetAlias(newAlias, true);

        if (success)
        {
            _displayAlias.Alias = string.Empty;
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void HandleAddPlayerSubmit()
    {
        var input = _inputPlayer;

        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        _teamNonOutfitPlayersLoading.Add(_inputPlayer);

        try
        {
            var success = await ScrimTeamsManager.TryAddCharacterToTeam(i_teamOrdinal, input);

            if (success)
            {
                _inputPlayer = string.Empty;
                _teamNonOutfitPlayersLoading.Remove(_inputPlayer);
            }
            else
            {
                _teamNonOutfitPlayersLoading.Remove(_inputPlayer);

                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }
        catch (Exception ex)
        {
            _teamNonOutfitPlayersLoading.Remove(_inputPlayer);
            LogMessage($"<span style=\"color: red;\">Failed to add character {input}: {ex}</span>");
        }
    }

    private async void RefreshOutfitPlayers(string aliasLower)
    {
        if (!_teamOutfitsLoadingMembers.Contains(aliasLower) && _teamOutfits.Any(o => o.AliasLower == aliasLower))
        {
            var success = await ScrimTeamsManager.RefreshOutfitPlayers(aliasLower);

            var alias = _teamOutfits.Where(o => o.AliasLower == aliasLower).Select(o => o.Alias).FirstOrDefault();

            var message = success
                            ? $"Team {i_teamOrdinal} [{alias}] Players REFRESH: Players Added"
                            : $"Team {i_teamOrdinal} [{alias}] Players REFRESH: No Players Added";

            LogMessage(message);
        }
    }

    private void RemoveOutfit(string aliasLower)
    {
        if (!_teamOutfitsLoading.Contains(aliasLower) && !_teamOutfitsLoadingMembers.Contains(aliasLower) && _teamOutfits.Any(o => o.AliasLower == aliasLower))
        {
            var playersIds = _teamPlayers.Where(p => p.OutfitAliasLower == aliasLower && !p.IsOutfitless).Select(p => p.Id).ToList();
            WebsocketMonitor.RemoveCharacterSubscriptions(playersIds);

            ScrimTeamsManager.RemoveOutfitFromTeam(aliasLower);

            _validOutfitAliasHistory.RemoveAll(alias => alias == aliasLower);
            _teamOutfits.RemoveAll(o => o.AliasLower == aliasLower);

            //_teamPlayers.RemoveAll(p => p.OutfitAliasLower == aliasLower);
            //_teamPlayersOnline.RemoveAll(p => p.OutfitAliasLower == aliasLower);
            //_teamPlayersParticipating.RemoveAll(p => p.OutfitAliasLower == aliasLower);
            _outfitPlayersExtendedMap.Remove(aliasLower);
        }
    }


    /*************************
     *  UI & Layout Controls
     *************************/
    private void ToggleOutfitPlayersVisibility(string aliasLower)
    {
        if (_outfitPlayersExtendedMap.TryGetValue(aliasLower, out bool oldshowPlayers))
        {
            _outfitPlayersExtendedMap[aliasLower] = !oldshowPlayers;
            StateHasChanged();
        }
    }

    private void TogglNoneOutfitPlayersVisibility()
    {
        _extendNonOutfitPlayers = !_extendNonOutfitPlayers;
        //StateHasChanged();
    }

    private bool ShowOutfitPlayers(string aliasLower)
    {
        if (_outfitPlayersExtendedMap.TryGetValue(aliasLower, out bool showPlayers))
        {
            return showPlayers;
        }
        else
        {
            return false;
        }
    }

    private void LogMessage(string message)
    {
        MessageService.BroadcastSimpleMessage(message);

        //i_OnAdminLogTextAdded.InvokeAsync(message);
    }

    /*****************
     *  Event Handling
     *****************/
    private void ReceiveTeamPlayerChangeEvent(object sender, TeamPlayerChangeEventArgs e)
    {
        var message = e.Message;

        var player = message.Player;
        if (player.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        switch (message.ChangeType)
        {
            case TeamPlayerChangeType.Add:
                HandleTeamPlayerChangeAdd(message);
                break;

            case TeamPlayerChangeType.Remove:
                HandleTeamPlayerChangeRemove(message);
                break;
        }

        //LogMessage(message.Info);
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void HandleTeamPlayerChangeAdd(TeamPlayerChangeMessage message)
    {
        var player = message.Player;

        //if (player.TeamOrdinal != i_teamOrdinal)
        //{
        //    return;
        //}

        //_teamPlayers.Add(player);

        _teamOutfitsLoading.Remove(player.OutfitAliasLower); //TEST TEST TEST TEST

        if (player.IsOnline)
        {
            _teamPlayersOnline.Add(player);

            if (player.IsOutfitless && !_teamNonOutfitPlayers.Any(p => p.Id == player.Id))
            {
                _teamNonOutfitPlayers.Add(player);
            }
            else
            {
                //UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, 1);
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
            }

            if (!_teamPlayersVisible.Any(p => p.Id == player.Id))
            {
                _teamPlayersVisible.Add(player);
            }
        }

        if (message.IsLastOfOutfit)
        {
            _teamOutfitsLoadingMembers.Remove(player.OutfitAliasLower);
        }

        //LogMessage(message.Info);
    }

    private void HandleTeamPlayerChangeRemove(TeamPlayerChangeMessage message)
    {
        var player = message.Player;

        //if (player.TeamOrdinal != i_teamOrdinal)
        //{
        //    return;
        //}

        //_teamPlayers.RemoveAll(p => p.Id == player.Id);

        if (_teamPlayersOnline.Any(p => p.Id == player.Id) || _teamPlayersParticipating.Any(p => p.Id == player.Id))
        {
            _teamPlayersOnline.RemoveAll(p => p.Id == player.Id);
            _teamPlayersParticipating.RemoveAll(p => p.Id == player.Id);
            _teamPlayersVisible.RemoveAll(p => p.Id == player.Id);

            if (player.IsOutfitless)
            {
                _teamNonOutfitPlayers.RemoveAll(p => p.Id == player.Id);
            }
            else
            {
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
                //UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, -1);
            }
        }

        //LogMessage(message.Info);
    }

    private void ReceivePlayerStatUpdateEvent(object sender, PlayerStatUpdateEventArgs e)
    {
        var message = e.Message;
        var player = message.Player;

        if (player.TeamOrdinal != i_teamOrdinal)
        {
            return;
        }

        if (!_teamPlayersParticipating.Any(p => p.Id == player.Id))
        {
            _teamPlayersParticipating.Add(player);
        }

        if (!_teamPlayersVisible.Any(p => p.Id == player.Id))
        {
            _teamPlayersVisible.Add(player);
        }

        if (player.IsOutfitless && !_teamNonOutfitPlayers.Any(p => p.IsOutfitless))
        {
            _teamNonOutfitPlayers.Add(player);
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });

        //LogMessage(message.Info);
    }

    private void ReceiveSimpleMessageEvent(object sender, SimpleMessageEventArgs e)
    {
        ReceiveMessage(e.Message);
    }

    private void ReceiveMessage(string message)
    {
        var payload = TryParseMessagePayload(message);
        if (payload == null)
        {
            return;
        }

        var eventName = payload.Value<string>("event_name");

        if (eventName == "PlayerLogin")
        {
            HandlePlayerLoginPayload(payload);
        }

        else if (eventName == "PlayerLogout")
        {
            HandlePlayerLogoutPayload(payload);
        }
    }

    private void HandlePlayerLoginPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = _teamPlayers.Where(p => p.Id == characterId).FirstOrDefault();

        if (player == null)
        {
            return;
        }

        //player.IsOnline = true; // TODO: remove this once PlayerLogin message events are implemented

        if (!_teamPlayersOnline.Any(p => p.Id == player.Id))
        {
            _teamPlayersOnline.Add(player);

            if (_teamOutfits.Any(o => o.Id == player.OutfitId) && !player.IsOutfitless)
            {
                //UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, 1);
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
            }
        }

        if (!_teamPlayersVisible.Any(p => p.Id == player.Id))
        {
            _teamPlayersVisible.Add(player);
        }

        var message = $"Team {i_teamOrdinal} Player LOGIN: {player.NameDisplay} [{player.Id}]";

        //LogMessage(message);

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void HandlePlayerLogoutPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = _teamPlayers.Where(p => p.Id == characterId).FirstOrDefault();

        if (player == null)
        {
            return;
        }

        //player.IsOnline = false; // TODO: remove this once PlayerLogin message events are implemented

        if (_teamPlayersOnline.Any(p => p.Id == player.Id))
        {
            _teamPlayersOnline.Remove(player);

            if (_teamOutfits.Any(o => o.Id == player.OutfitId) && !player.IsOutfitless)
            {
                SetOutfitMembersOnlineCount(player.OutfitAliasLower);
                //UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, -1);
            }
        }

        // Only remove the player from the visible list if they haven't done anything in the match
        if (!_teamPlayersParticipating.Any(p => p.Id == player.Id))
        {
            _teamPlayersVisible.RemoveAll(p => p.Id == player.Id);
        }

        var message = $"Team {i_teamOrdinal} Player LOGOUT: {player.NameDisplay} [{player.Id}]";

        //LogMessage(message);

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            //Console.WriteLine($"(91097) Failed to parse message: {message}");
            return null;
        }

        return jMsg;
    }

    private void ReceivePlayerLoginEvent(object sender, PlayerLoginEventArgs e)
    {

    }

    private void ReceivePlayerLogoutEvent(object sender, PlayerLogoutEventArgs e)
    {

    }


    private void SetOutfitMembersOnlineCount(string aliasLower)
    {
        var outfit = _teamOutfits.FirstOrDefault(o => o.AliasLower == aliasLower);
        if (outfit == null)
        {
            return;
        }
        outfit.MembersOnlineCount = _teamPlayersOnline.Where(p => p.OutfitAliasLower == aliasLower && !p.IsOutfitless).Count();
    }

    private void UpdateOutfitMembersOnlineCount(string aliasLower, int addend)
    {
        var outfit = _teamOutfits.FirstOrDefault(o => o.AliasLower == aliasLower);
        if (outfit == null)
        {
            return;
        }
        outfit.MembersOnlineCount += addend;
    }

    private string GetHeaderCardClass()
    {
        return (_team == null || !_teamOutfits.Any())
            ? "default"
            : SqCssHelper.GetFactionClassFromId(_team.FactionId);
    }

    private double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }
}
