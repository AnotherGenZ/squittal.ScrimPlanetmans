@page "/admin"
@using Newtonsoft.Json.Linq;
@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models.ScrimEngine
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.Services.Planetside;

@inject IScrimMessageBroadcastService MessageService
@inject IScrimMatchEngine ScrimMatchEngine
@inject IScrimTeamsManager ScrimTeamsEngine
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchScorer MatchScorer
@inject IItemService ItemService

<h3>Match Setup</h3>

<div style="width: calc(45% - 1rem); float: left; margin-right: 1rem; font-size: smaller; font-family: 'Roboto Mono', 'Input Mono', Consolas, monospace;">

    <EditForm Model="@_matchConfiguration">

        <p>Match Title: <InputText id="matchTitle" @bind-Value="_matchConfiguration.Title" /></p>
        <p>Round Length (seconds): <InputNumber min="1" type="text" id="roundSecondsTotal" @bind-Value="_matchConfiguration.RoundSecondsTotal" /></p>

    </EditForm>

    @*Round Length (seconds): <InputText id="roundSecondsTotal" @bind-Value="_matchConfiguration.RoundSecondsTotal.ToString()" />*@

    <TeamBuilder i_teamOrdinal=1 i_OnAdminLogTextAdded="LogAdminMessage" />

    <TeamBuilder i_teamOrdinal=2 i_OnAdminLogTextAdded="LogAdminMessage" />

    <button class="btn btn-primary" @onclick="SubscribeToCensus">Subscribe!</button>
    <button class="btn btn-primary" @onclick="EndCensusSubscription">STOP!</button>

    <button class="btn btn-primary" @onclick="StartMatch">START MATCH!</button>

</div>

<div style="width: 55%; float: right; font-size: 10px; max-height: 550px; word-wrap: normal; font-family: 'Roboto Mono', 'Input Mono', Consolas, monospace;">

    <h5>Status: @_isStreamServiceEnabled.ToString() (@_debug)</h5>

    <MatchTimer />

    <AdminLog />

    <StreamLog />

</div>


@code {
    private string _roundSecondsInput = string.Empty;
    private MatchConfiguration _matchConfiguration { get; set; }

    private List<MarkupString> _adminLogs { get; set; } = new List<MarkupString>();
    private List<MarkupString> _streamLogs { get; set; } = new List<MarkupString>();

    private bool _isStreamServiceEnabled { get; set; } = false;

    private string _debug { get; set; } = "init";



    protected override async Task OnInitializedAsync()
    {
        await GetCensusStreamStatus();
    }

    protected override void OnInitialized()
    {
        //MessageService.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;
        //MessageService.RaisePlayerScrimDeathEvent += ReceivePlayerDeathEvent;
        //MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        //MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;

        if (ScrimMatchEngine.MatchConfiguration != null)
        {
            _matchConfiguration = ScrimMatchEngine.MatchConfiguration;
        }
        else
        {
            _matchConfiguration = new MatchConfiguration();
        }
    }


    #region Match & Subscription State Buttons
    private async Task GetCensusStreamStatus()
    {
        var status = await WebsocketMonitor.GetStatus();
        _isStreamServiceEnabled = status.IsEnabled;
        _debug = "GetCensusStreamStatus";
    }

    private void SubscribeToCensus()
    {
        ScrimMatchEngine.SubmitPlayersList();
        _debug = "SubscribeToCensus";

        LogAdminMessage($"Subscribed all characters to Stream Monitor!");
    }

    private void EndCensusSubscription()
    {
        WebsocketMonitor.RemoveAllCharacterSubscriptions();
        _debug = "EndCensusSubscription";

        LogAdminMessage($"Removed all characters to Stream Monitor!");
    }

    private void StartMatch()
    {
        SubscribeToCensus();

        ScrimMatchEngine.ConfigureMatch(_matchConfiguration);
        ScrimMatchEngine.Start();

        LogAdminMessage($"Started new match: {_matchConfiguration.Title}"); // TODO: add team names to this
    }
    #endregion


    #region  Event Handling
    private void ReceiveSimpleMessageEvent(object sender, SimpleMessageEventArgs e)
    {
        ReceiveMessage(e.Message);
    }

    private void ReceiveMessage(string message)
    {
        var payload = TryParseMessagePayload(message);
        if (payload == null)
        {
            return;
        }

        /*
        var eventName = payload.Value<string>("event_name");

        if (eventName == "Death")
        {
            LogMessage(payload.ToString(), _streamLogs);
        }

        else if (eventName == "GainExperience")
        {
            LogMessage(payload.ToString(), _streamLogs);
        }

        else if (eventName == "PlayerLogin")
        {
            LogMessage(payload.ToString(), _streamLogs);
            HandlePlayerLoginPayload(payload);
        }

        else if (eventName == "PlayerLogout")
        {
            LogMessage(payload.ToString(), _streamLogs);
            HandlePlayerLogoutPayload(payload);
        }
        */
    }

    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            //Console.WriteLine($"(91097) Failed to parse message: {message}");
            return null;
        }

        return jMsg;
    }

    private void HandlePlayerLoginPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = ScrimTeamsEngine.GetPlayerFromId(characterId);

        if (player == null)
        {
            return;
        }

        var message = $"Team {player.TeamOrdinal} Player LOGIN: [{player.OutfitAlias}] {player.NameDisplay} [{player.Id}]";

        //LogAdminMessage(message);
    }

    private void HandlePlayerLogoutPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = ScrimTeamsEngine.GetPlayerFromId(characterId);

        if (player == null)
        {
            return;
        }

        var message = $"Team {player.TeamOrdinal} Player LOGOUT: [{player.OutfitAlias}] {player.NameDisplay} [{player.Id}]";

        //LogAdminMessage(message);
    }

    private void ReceivePlayerDeathEvent(object sender, PlayerScrimDeathEventEventArgs e)
    {
        var info = e.Message.Info;
        LogStreamMessage(info);
    }

    private void ReceivePlayerLoginEvent(object sender, PlayerLoginEventArgs e)
    {
        var info = e.Message.Info;
        LogAdminMessage(info);
    }

    private void ReceivePlayerLogoutEvent(object sender, PlayerLogoutEventArgs e)
    {
        var info = e.Message.Info;
        LogAdminMessage(info);
    }
    #endregion


    #region  Log Messages
    private void LogAdminMessage(string message)
    {
        MessageService.BroadcastSimpleMessage(message);

        //LogMessage(message, _adminLogs);
    }

    private void LogStreamMessage(string message)
    {
        LogMessage(message, _streamLogs);
    }

    private void LogMessage(string message, List<MarkupString> target)
    {
        var time = DateTime.Now.ToString("hh:mm:ss.fff tt");

        target.Add((MarkupString)$"<span style=\"font-weight: 600;\">{time}:</span>  {message}");

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    #endregion
}
