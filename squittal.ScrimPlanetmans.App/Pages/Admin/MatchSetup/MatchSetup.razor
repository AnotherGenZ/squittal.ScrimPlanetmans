@page "/"
@page "/admin"
@using Newtonsoft.Json.Linq;
@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models.ScrimEngine
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.Services.Planetside;

@inject IScrimMessageBroadcastService MessageService
@inject IScrimMatchEngine ScrimMatchEngine
@inject IScrimTeamsManager ScrimTeamsEngine
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchScorer MatchScorer
@inject IItemService ItemService

<div class="container-fluid">
    <div class="row">

        @*<h3>Match Setup</h3>*@

        <div class="col-lg-4">
            @*<div style="width: calc(45% - 1rem); float: left; margin-right: 1rem; font-size: smaller; font-family: 'Roboto Mono', 'Input Mono', Consolas, monospace;">*@

            @*<EditForm Model="@_matchConfiguration">

                <p>Match Title: <InputText id="matchTitle" @bind-Value="_matchConfiguration.Title" /></p>
                <p>Round Length (seconds): <InputNumber min="1" type="text" id="roundSecondsTotal" @bind-Value="_matchConfiguration.RoundSecondsTotal" /></p>

            </EditForm>*@

            @*Round Length (seconds): <InputText id="roundSecondsTotal" @bind-Value="_matchConfiguration.RoundSecondsTotal.ToString()" />*@

            @*<TeamBuilder i_teamOrdinal=1 i_OnAdminLogTextAdded="LogAdminMessage" />*@
            <TeamBuilder i_teamOrdinal=1 />

        </div>

        <div class="col-lg-4">
            @*<TeamBuilder i_teamOrdinal=2 i_OnAdminLogTextAdded="LogAdminMessage" />*@
            <TeamBuilder i_teamOrdinal=2 />
        </div>

        @*<div style="width: 55%; float: right; font-size: 10px; max-height: 550px; word-wrap: normal; font-family: 'Roboto Mono', 'Input Mono', Consolas, monospace;">*@
    <div class="col-lg-4">

        <h5>@(_matchConfiguration.Title)@(_currentRound == 0 ? string.Empty : $" - Round {_currentRound}"): @Enum.GetName(typeof(MatchState), _matchState)</h5>

        @*<span>Status: @_isStreamServiceEnabled.ToString() (@_debug)</span>*@

        <div style="font-size: 14px; display: block;">
            <MatchTimer />
        </div>

        @if (_matchState == MatchState.Uninitialized || _matchState == MatchState.Stopped)
        {
            <EditForm Model="@_matchConfiguration">

                <p>Match Title: <InputText id="matchTitle" @bind-Value="_matchConfiguration.Title" /></p>
                <p>Round Length (seconds): <InputNumber min="1" type="text" id="roundSecondsTotal" @bind-Value="_matchConfiguration.RoundSecondsTotal" /></p>

            </EditForm>
        }



        @if (_matchState == MatchState.Uninitialized && _currentRound == 0)
        {
            <button class="btn btn-primary" @onclick="StartMatch">
                <span class="oi oi-media-play"></span>Start Match
            </button>
            <button class="btn btn-outline-primary" @onclick="ClearMatch">
                <span class="oi oi-eject"></span>Clear Match
            </button>
        }
        else if (_matchState == MatchState.Stopped && _currentRound >= 1)
        {
            <button class="btn btn-primary" @onclick="StartMatch">
                <span class="oi oi-media-play"></span>Start Round @(_currentRound + 1)
            </button>
            <button class="btn btn-outline-primary" @onclick="ClearMatch">
                <span class="oi oi-eject"></span>Clear Match
            </button>
        }
        else if (_matchState == MatchState.Paused)
        {
            <button class="btn btn-primary" @onclick="ResumeRound">
                <span class="oi oi-media-play"></span>Resume Round
            </button>
        }
        else if (_matchState == MatchState.Running)
        {
            <button class="btn btn-primary" @onclick="PauseRound">
                <span class="oi oi-media-pause"></span>Pause Round
            </button>
            <button class="btn btn-outline-primary" @onclick="EndRound">
                <span class="oi oi-media-stop"></span> End Round
            </button>
        }

        <button class="btn btn-outline-primary" @onclick="SubscribeToCensus">
            <span class="oi oi-media-record"></span>Subscribe
        </button>

        @*<button class="btn btn-primary" @onclick="EndCensusSubscription">STOP!</button>*@


        <AdminLog />
        @*<p style="margin: 0 0 0.1rem 0; font-size: 12px; color: var(--sq-logo-purple);">Admin Log</p>
        <div style="height: 225px; overflow-y: auto; margin-bottom: 1rem; border: 1px solid var(--sq-light-blue-gray-alpha);">
            @if (_adminLogs.Any())
            {
                foreach (var log in _adminLogs.Reverse<MarkupString>().Take(200))
                {
                    <p style="font-size: 10.5px; margin: 0 0 0.1rem 0;">@log</p>
                }

                if (_adminLogs.Count() > 200)
                {
                    <p style="font-size: 10.5px; margin: 0;">...max log entries reach showing (showing 200 / @_adminLogs.Count)</p>
                }
            }
        </div>*@

        <StreamLog />
        @*<p style="margin: 0 0 0.1rem 0; font-size: 12px; color: var(--sq-logo-purple);">Stream Log</p>
        <div style="height: 300px; overflow-y: auto; border: 1px solid var(--sq-light-blue-gray-alpha);">
            @if (_streamLogs.Any())
            {
                foreach (var log in _streamLogs.Reverse<MarkupString>().Take(200))
                {
                    <p style="font-size: 10.5px; margin: 0 0 0.1rem 0;">@log</p>
                }

                if (_streamLogs.Count() > 200)
                {
                    <p style="font-size: 10.5px; margin: 0;">...max log entries reach (showing 200 / @_streamLogs.Count)</p>
                }
            }
        </div>*@

    </div>

    </div>

</div>

@code {
    private string _roundSecondsInput = string.Empty;
    private MatchConfiguration _matchConfiguration { get; set; }

    private List<MarkupString> _adminLogs { get; set; } = new List<MarkupString>();
    private List<MarkupString> _streamLogs { get; set; } = new List<MarkupString>();

    private bool _isStreamServiceEnabled { get; set; } = false;

    private string _debug { get; set; } = "init";

    private bool _isRunning = false;
    private int _currentRound = 0;
    private MatchState _matchState = MatchState.Uninitialized;


    protected override async Task OnInitializedAsync()
    {
        await GetCensusStreamStatus();
    }

    protected override void OnInitialized()
    {
        //MessageService.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;
        //MessageService.RaiseScrimDeathActionEvent += ReceivePlayerDeathEvent;
        //MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        //MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;
        MessageService.RaiseMatchStateUpdateEvent += ReceiveMatchStateUpdateMessageEvent;

        if (ScrimMatchEngine.MatchConfiguration != null)
        {
            _matchConfiguration = ScrimMatchEngine.MatchConfiguration;
        }
        else
        {
            _matchConfiguration = new MatchConfiguration();
        }

        _isRunning = ScrimMatchEngine.IsRunning();
        _currentRound = ScrimMatchEngine.GetCurrentRound();
        _matchState = ScrimMatchEngine.GetMatchState();
    }


    /*****************************************
     *  Match & Subscription State Buttons
     *****************************************/
    private async Task GetCensusStreamStatus()
    {
        var status = await WebsocketMonitor.GetStatus();
        _isStreamServiceEnabled = status.IsEnabled;
        _debug = "GetCensusStreamStatus";

        //StateHasChanged();
    }

    private void SubscribeToCensus()
    {
        ScrimMatchEngine.SubmitPlayersList();
        _debug = "SubscribeToCensus";

        LogAdminMessage($"Subscribed all characters to Stream Monitor!");

        //StateHasChanged();
    }

    private void EndCensusSubscription()
    {
        WebsocketMonitor.RemoveAllCharacterSubscriptions();
        _debug = "EndCensusSubscription";

        LogAdminMessage($"Removed all characters from Stream Monitor!");

        //StateHasChanged();
    }

    //private async Task StartMatch()
    private void StartMatch()
    {
        SubscribeToCensus();

        //await MatchScorer.SetActiveRuleset();
        //await ItemService.SetUpItemsListAsync();

        ScrimMatchEngine.ConfigureMatch(_matchConfiguration);
        ScrimMatchEngine.Start();

        //ScrimMatchEngine.InitializeNewRound();
        //ScrimMatchEngine.StartRound();

        _isRunning = ScrimMatchEngine.IsRunning();
        _currentRound = ScrimMatchEngine.GetCurrentRound();
        _matchState = ScrimMatchEngine.GetMatchState();

        LogAdminMessage($"Started new match: {_matchConfiguration.Title}"); // TODO: add team names to this

        InvokeAsync(() =>
        {
            StateHasChanged();
        });

        //SateHasChanged();
    }

    private void EndRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Running)
        {
            ScrimMatchEngine.EndRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void PauseRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Running)
        {
            ScrimMatchEngine.PauseRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void ResumeRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Paused)
        {
            ScrimMatchEngine.ResumeRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void ClearMatch()
    {
        if ((ScrimMatchEngine.GetMatchState() == MatchState.Stopped || ScrimMatchEngine.GetMatchState() == MatchState.Uninitialized))
        {
            ScrimMatchEngine.ClearMatch();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    #region  Event Handling
    private void ReceiveSimpleMessageEvent(object sender, SimpleMessageEventArgs e)
    {
        ReceiveMessage(e.Message);
    }

    private void ReceiveMatchStateUpdateMessageEvent(object sender, MatchStateUpdateEventArgs e)
    {
        var message = e.Message;

        _isRunning = message.MatchState == MatchState.Running;
        _currentRound = message.CurrentRound;
        _matchState = message.MatchState;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    #endregion

    private void ReceiveMessage(string message)
    {
        var payload = TryParseMessagePayload(message);
        if (payload == null)
        {
            //LogAdminMessage(message);
            return;
        }

        /*
        var eventName = payload.Value<string>("event_name");

        if (eventName == "Death")
        {
            LogMessage(payload.ToString(), _streamLogs);
        }

        else if (eventName == "GainExperience")
        {
            LogMessage(payload.ToString(), _streamLogs);
        }

        else if (eventName == "PlayerLogin")
        {
            LogMessage(payload.ToString(), _streamLogs);
            HandlePlayerLoginPayload(payload);
        }

        else if (eventName == "PlayerLogout")
        {
            LogMessage(payload.ToString(), _streamLogs);
            HandlePlayerLogoutPayload(payload);
        }
        */
    }

    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            //Console.WriteLine($"(91097) Failed to parse message: {message}");
            return null;
        }

        return jMsg;
    }

    private void HandlePlayerLoginPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = ScrimTeamsEngine.GetPlayerFromId(characterId);

        if (player == null)
        {
            return;
        }

        var message = $"Team {player.TeamOrdinal} Player LOGIN: [{player.OutfitAlias}] {player.NameDisplay} [{player.Id}]";

        //LogAdminMessage(message);
    }

    private void HandlePlayerLogoutPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = ScrimTeamsEngine.GetPlayerFromId(characterId);

        if (player == null)
        {
            return;
        }

        var message = $"Team {player.TeamOrdinal} Player LOGOUT: [{player.OutfitAlias}] {player.NameDisplay} [{player.Id}]";

        //LogAdminMessage(message);
    }

    private void ReceivePlayerDeathEvent(object sender, ScrimDeathActionEventEventArgs e)
    {
        var info = e.Message.Info;
        LogStreamMessage(info);
    }

    private void ReceivePlayerLoginEvent(object sender, PlayerLoginEventArgs e)
    {
        var info = e.Message.Info;
        LogAdminMessage(info);
    }

    private void ReceivePlayerLogoutEvent(object sender, PlayerLogoutEventArgs e)
    {
        var info = e.Message.Info;
        LogAdminMessage(info);
    }

    /*****************
     *  Log Messages
     *****************/
    private void LogAdminMessage(string message)
    {
        MessageService.BroadcastSimpleMessage(message);

        //LogMessage(message, _adminLogs);
    }

    private void LogStreamMessage(string message)
    {
        LogMessage(message, _streamLogs);
    }

    private void LogMessage(string message, List<MarkupString> target)
    {
        var time = DateTime.Now.ToString("hh:mm:ss.fff tt");

        target.Add((MarkupString)$"<span style=\"font-weight: 600;\">{time}:</span>  {message}");

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
