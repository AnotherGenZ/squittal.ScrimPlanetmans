@page "/"
@page "/admin"
@using Newtonsoft.Json.Linq;
@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models.ScrimEngine
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Shared.Models.Planetside;

@inject IScrimMessageBroadcastService MessageService
@inject IScrimMatchEngine ScrimMatchEngine
@inject IScrimTeamsManager ScrimTeamsManager
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchScorer MatchScorer
@inject IItemService ItemService
@inject IFacilityService FacilityService
@inject IZoneService ZoneService
@inject IWorldService WorldService

<div class="container-fluid">
    <div class="row">

        <div class="col-lg-4">
            <TeamBuilder i_teamOrdinal=1 />
        </div>

        <div class="col-lg-4">
            <TeamBuilder i_teamOrdinal=2 />
        </div>

        <div class="col-lg-4">

            <div class="header-card-container default">
                <div style="display: grid; grid-template-columns: 1fr 115px;">
                    <h5>@(_matchConfiguration.Title)@(_currentRound == 0 ? string.Empty : $" - Round {_currentRound}"): @Enum.GetName(typeof(MatchState), _matchState)</h5>
                    <div class="mono-font" style="font-size: 18px; text-align: right;">
                        <MatchTimer Debug=false />
                    </div>
                </div>


                @* TODO: (1) Move buttons to own components, (2) add hover text to buttons *@
                @if (_matchState == MatchState.Uninitialized && _currentRound == 0)
                {
                    <button class="btn btn-primary" @onclick="StartMatch">
                        <span class="oi oi-media-play"></span>Start Match
                    </button>
                    @*<button class="btn btn-outline-primary" @onclick="SubscribeToCensus">
                        <span class="oi oi-media-record"></span>Subscribe
                    </button>*@
                    <button class="btn btn-outline-primary" @onclick="ClearMatch">
                        <span class="oi oi-eject"></span>Clear Match
                    </button>
                }
                else if (_matchState == MatchState.Stopped && _currentRound >= 1)
                {
                    <button class="btn btn-primary" @onclick="StartMatch">
                        <span class="oi oi-media-play"></span>Start Round @(_currentRound + 1)
                    </button>
                    @*<button class="btn btn-outline-primary" @onclick="SubscribeToCensus">
                        <span class="oi oi-media-record"></span>Subscribe
                    </button>*@
                    <button class="btn btn-outline-primary" @onclick="ResetRound">
                        <span class="oi oi-media-step-backward"></span>Reset Round
                    </button>
                    <button class="btn btn-outline-primary" @onclick="ClearMatch">
                        <span class="oi oi-eject"></span>Clear Match
                    </button>
                }
                else if (_matchState == MatchState.Paused)
                {
                    <button class="btn btn-primary" @onclick="ResumeRound">
                        <span class="oi oi-media-play"></span>Resume
                    </button>
                    @*<button class="btn btn-outline-primary" @onclick="SubscribeToCensus">
                        <span class="oi oi-media-record"></span>Subscribe
                    </button>*@
                }
                else if (_matchState == MatchState.Running)
                {
                    <button class="btn btn-primary" @onclick="PauseRound">
                        <span class="oi oi-media-pause"></span>Pause Round
                    </button>
                    @*<button class="btn btn-outline-primary" @onclick="SubscribeToCensus">
                        <span class="oi oi-media-record"></span>Subscribe
                    </button>*@
                    <button class="btn btn-outline-primary" @onclick="EndRound">
                        <span class="oi oi-media-stop"></span> End Round
                    </button>
                }

                @*@if (_matchState != MatchState.Uninitialized || _currentRound != 0)
                {
                    <button class="btn btn-outline-primary" @onclick="SubscribeToCensus">
                        <span class="oi oi-media-record"></span>Subscribe
                    </button>
                }*@

                @if (_matchState == MatchState.Uninitialized || _matchState == MatchState.Stopped)
                {
                    <EditForm Model="@_matchConfiguration">

                        <p>Match Title: <InputText id="matchTitle" @bind-Value="_matchConfiguration.Title" /></p>
                        <p>Round Length (seconds): <InputNumber min="1" type="text" id="roundSecondsTotal" @bind-Value="_matchConfiguration.RoundSecondsTotal" /></p>

                        <p>
                            Scrim Server: <InputSelect TValue="string" style="margin-right: 5px; width: 125px; padding: 0.1rem;" Value="@_matchConfiguration.WorldIdString" ValueChanged="@((string s) => _matchConfiguration.TrySetWorldId(s, true, false))" ValueExpression="@(() => _matchConfiguration.WorldIdString)">  @*@bind-Value=@_matchConfiguration.WorldIdString>*@ <!--class="btn-sm"--> 
                            @foreach (var world in _worlds)
                            {
                                <option value=@world.Id.ToString() label="@world.Name">@world.Name (@world.Id.ToString())</option>
                            }
                            </InputSelect>
                            
                            Scrim Base: <InputSelect style="margin-right: 5px; width: 250px; padding: 0.1rem;"  @bind-Value=@_matchConfiguration.FacilityIdString> <!--class="btn-sm"--> 
                            <option value=@_noFacilitIdValue>No Base</option>

                            @foreach (var zone in _mapZones)
                            {
                                <optgroup label="@(_zones.Where(z => zone == z.Id).Select(z => z.Name).FirstOrDefault())" style="background-color: var(--sq-bg-white-unlit); color: var(--sq-pink); font-size: 1rem;">@(_zones.Where(z => zone == z.Id).Select(z => z.Name).FirstOrDefault())</optgroup>

                                @foreach (var region in _mapRegions.Where(r => r.ZoneId == zone))
                                {
                                    <option value=@region.Id.ToString() label="@region.FacilityName">@region.FacilityName (@region.Id.ToString())</option>
                                }
                            }
                            </InputSelect>
                        </p>

                        <p>End Round on Base Capture: <InputCheckbox id="endRoundOnCapture" @bind-Value="_matchConfiguration.EndRoundOnFacilityCapture"/></p>
                    </EditForm>
                }

            </div>

            <div class="sq-mini-card-12">
                <AdminLog />
            </div>

            <div class="sq-mini-card-12">
                <StreamLog />
            </div>

        </div>

    </div>

</div>

@code {
    private string _roundSecondsInput = string.Empty;
    private MatchConfiguration _matchConfiguration { get; set; }

    private List<MarkupString> _adminLogs { get; set; } = new List<MarkupString>();
    private List<MarkupString> _streamLogs { get; set; } = new List<MarkupString>();

    #region Facility & World Select List Variables
    private List<MapRegion> _mapRegions { get; set; } = new List<MapRegion>();
    private List<int> _mapZones { get; set; } = new List<int>();
    private List<Zone> _zones { get; set; } = new List<Zone>();
    private string _noFacilitIdValue { get; set; } = "-1";

    private List<World> _worlds { get; set; } = new List<World>();
    #endregion

    private bool _isStreamServiceEnabled { get; set; } = false;

    private string _debug { get; set; } = "init";

    private bool _isRunning = false;
    private int _currentRound = 0;
    private MatchState _matchState = MatchState.Uninitialized;


    protected override async Task OnInitializedAsync()
    {
        await GetCensusStreamStatus();
    }

    protected override void OnInitialized()
    {
        //MessageService.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;
        //MessageService.RaiseScrimDeathActionEvent += ReceivePlayerDeathEvent;
        //MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        //MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;
        MessageService.RaiseMatchStateUpdateEvent += ReceiveMatchStateUpdateMessageEvent;
        MessageService.RaiseMatchConfigurationUpdateEvent += ReceiveMatchConfigurationUpdateMessageEvent;

        if (ScrimMatchEngine.MatchConfiguration != null)
        {
            _debug = "Scrim Engine Configuration 3";
            _matchConfiguration = ScrimMatchEngine.MatchConfiguration;
        }
        else
        {
            _debug = "New Configuration 4";
            _matchConfiguration = new MatchConfiguration();
        }

        _isRunning = ScrimMatchEngine.IsRunning();
        _currentRound = ScrimMatchEngine.GetCurrentRound();
        _matchState = ScrimMatchEngine.GetMatchState();

        _zones = ZoneService.GetAllZones().ToList();

        _mapRegions = FacilityService.GetScrimmableMapRegions().OrderBy(r => r.FacilityName).ToList();
        _mapZones = _mapRegions.Select(r => r.ZoneId).Distinct().ToList();

        _worlds = WorldService.GetAllWorlds().OrderBy(w => w.Name).ToList();
    }


    #region  Match & Subscription State Buttons
    private async Task GetCensusStreamStatus()
    {
        var status = await WebsocketMonitor.GetStatus();
        _isStreamServiceEnabled = status.IsEnabled;
        //_debug = "GetCensusStreamStatus";
    }

    private void SubscribeToCensus()
    {
        ScrimMatchEngine.SubmitPlayersList();
        //_debug = "SubscribeToCensus";

        LogAdminMessage($"Subscribed all characters to Stream Monitor!");
    }

    private void EndCensusSubscription()
    {
        WebsocketMonitor.RemoveAllCharacterSubscriptions();
        //_debug = "EndCensusSubscription";

        LogAdminMessage($"Removed all characters from Stream Monitor!");
    }

    private void StartMatch()
    {
        SubscribeToCensus();

        ScrimMatchEngine.ConfigureMatch(_matchConfiguration);
        ScrimMatchEngine.Start();

        _isRunning = ScrimMatchEngine.IsRunning();
        _currentRound = ScrimMatchEngine.GetCurrentRound();
        _matchState = ScrimMatchEngine.GetMatchState();

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void EndRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Running)
        {
            ScrimMatchEngine.EndRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void PauseRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Running)
        {
            ScrimMatchEngine.PauseRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void ResumeRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Paused)
        {
            ScrimMatchEngine.ResumeRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void ClearMatch()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Stopped || ScrimMatchEngine.GetMatchState() == MatchState.Uninitialized)
        {
            ScrimMatchEngine.ClearMatch();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            _matchConfiguration = new MatchConfiguration();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void ResetRound()
    {
        if (ScrimMatchEngine.GetMatchState() == MatchState.Stopped && ScrimMatchEngine.GetCurrentRound() > 0)
        {
            ScrimMatchEngine.ResetRound();

            _isRunning = ScrimMatchEngine.IsRunning();
            _currentRound = ScrimMatchEngine.GetCurrentRound();
            _matchState = ScrimMatchEngine.GetMatchState();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }
    #endregion

    #region  Event Handling
    private void ReceiveSimpleMessageEvent(object sender, SimpleMessageEventArgs e)
    {
        ReceiveMessage(e.Message);
    }

    private void ReceiveMatchStateUpdateMessageEvent(object sender, MatchStateUpdateEventArgs e)
    {
        var message = e.Message;

        _isRunning = message.MatchState == MatchState.Running;
        _currentRound = message.CurrentRound;
        _matchState = message.MatchState;

        _matchConfiguration.Title = message.MatchTitle;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ReceiveMatchConfigurationUpdateMessageEvent(object sender, MatchConfigurationUpdateEventArgs e)
    {
        var message = e.Message;

        _matchConfiguration = message.MatchConfiguration;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    #endregion

    private void ReceiveMessage(string message)
    {
        var payload = TryParseMessagePayload(message);
        if (payload == null)
        {
            //LogAdminMessage(message);
            return;
        }

        /*
        var eventName = payload.Value<string>("event_name");

        if (eventName == "Death")
        {
            LogMessage(payload.ToString(), _streamLogs);
        }

        else if (eventName == "GainExperience")
        {
            LogMessage(payload.ToString(), _streamLogs);
        }

        else if (eventName == "PlayerLogin")
        {
            LogMessage(payload.ToString(), _streamLogs);
            HandlePlayerLoginPayload(payload);
        }

        else if (eventName == "PlayerLogout")
        {
            LogMessage(payload.ToString(), _streamLogs);
            HandlePlayerLogoutPayload(payload);
        }
        */
    }

    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            //Console.WriteLine($"(91097) Failed to parse message: {message}");
            return null;
        }

        return jMsg;
    }

    private void HandlePlayerLoginPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = ScrimTeamsManager.GetPlayerFromId(characterId);

        if (player == null)
        {
            return;
        }

        var message = $"Team {player.TeamOrdinal} Player LOGIN: [{player.OutfitAlias}] {player.NameDisplay} [{player.Id}]";

        //LogAdminMessage(message);
    }

    private void HandlePlayerLogoutPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = ScrimTeamsManager.GetPlayerFromId(characterId);

        if (player == null)
        {
            return;
        }

        var message = $"Team {player.TeamOrdinal} Player LOGOUT: [{player.OutfitAlias}] {player.NameDisplay} [{player.Id}]";

        //LogAdminMessage(message);
    }

    private void ReceivePlayerDeathEvent(object sender, ScrimDeathActionEventEventArgs e)
    {
        var info = e.Message.Info;
        LogStreamMessage(info);
    }

    private void ReceivePlayerLoginEvent(object sender, PlayerLoginEventArgs e)
    {
        var info = e.Message.Info;
        LogAdminMessage(info);
    }

    private void ReceivePlayerLogoutEvent(object sender, PlayerLogoutEventArgs e)
    {
        var info = e.Message.Info;
        LogAdminMessage(info);
    }

    /*****************
     *  Log Messages
     *****************/
    private void LogAdminMessage(string message)
    {
        MessageService.BroadcastSimpleMessage(message);

        //LogMessage(message, _adminLogs);
    }

    private void LogStreamMessage(string message)
    {
        LogMessage(message, _streamLogs);
    }

    private void LogMessage(string message, List<MarkupString> target)
    {
        var time = DateTime.Now.ToString("hh:mm:ss.fff tt");

        target.Add((MarkupString)$"<span style=\"font-weight: 600;\">{time}:</span>  {message}");

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
