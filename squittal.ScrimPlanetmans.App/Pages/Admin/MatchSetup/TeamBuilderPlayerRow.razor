@using Newtonsoft.Json.Linq;
@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Diagnostics;

@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService

@if  (Player != null)
{
    <tr class="@SqCssHelper.GetFactionClassFromId(Player.FactionId)">
        <td style="padding-right: 5px; width: 15px;" title="@(Player.IsOnline ? "Online" : "Offline")">@SqCssHelper.GetOnlineStatusEmoji(Player.IsOnline)</td>

        <td title="@Player.NameFull [@(Player.Id)]">
            <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@Player.NameFull</span>
            <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(Player.Id)]</span> @*opacity: 0.8;*@
        </td>

        <td style="opacity: @GetStatOpacity(Player.EventAggregate.Kills);">@(Player.EventAggregate.Kills)</td>
        <td style="opacity: @GetStatOpacity(Player.EventAggregate.Deaths);">@(Player.EventAggregate.Deaths)</td>
        <td style="opacity: @GetStatOpacity(Player.EventAggregate.Points);">@(Player.EventAggregate.Points)</td>
        <td style="font-weight: 700; font-size: larger; opacity: @GetStatOpacity(Player.EventAggregate.NetScore);">@(Player.EventAggregate.NetScore)</td>

        <td style="width: 15px; text-align: right;">
            @if (Player.IsBenched)
            {
                <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="HandleSubstitutePlayer" title="Substitute Player In. Benched players are hidden from the streaming overlay">
                    <span class="oi oi-account-login" style="font-size: 0.8rem; top: 1px;"></span>
                </button>
            }
            else
            {
                <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="HandleSubstitutePlayer" title="Substitute Player Out. Benched players are hidden from the streaming overlay">
                    <span class="oi oi-account-logout" style="font-size: 0.8rem; top: 1px;"></span>
                </button>
            }
        </td>

        @if (ShowRemovalControls)
        {
            <td style="width: 15px; text-align: right;">
                <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="RemovePlayer" title="Remove Player">
                    <span class="oi oi-x" style="font-size: 0.7rem; top: 0;"></span>
                </button>
            </td>
        }
    </tr>
}

@code {
    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public bool ShowRemovalControls { get; set; }

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }
    #endregion

    #region Event Handling
    private void ReceiveTeamPlayerChangeEvent(object sender, TeamPlayerChangeEventArgs e)
    {
        if (e.Message.ChangeType != TeamPlayerChangeType.Add)
        {
            return;
        }

        InvokeSateHasChangedIfPlayer(e.Message.Player);
    }

    private void ReceivePlayerStatUpdateEvent(object sender, PlayerStatUpdateEventArgs e)
    {
        InvokeSateHasChangedIfPlayer(e.Message.Player);
    }

    private void ReceivePlayerLoginEvent(object sender, PlayerLoginEventArgs e)
    {
        InvokeSateHasChangedIfPlayer(e.Message.Player);
    }

    private void ReceivePlayerLogoutEvent(object sender, PlayerLogoutEventArgs e)
    {
        InvokeSateHasChangedIfPlayer(e.Message.Player);
    }

    private void InvokeSateHasChangedIfPlayer(Player eventPlayer)
    {
        if (eventPlayer.Id != Player.Id)
        {
            return;
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    #endregion

    #region UI & Form Controls
    private void RemovePlayer()
    {
        ScrimTeamsManager.RemoveCharacterFromTeam(Player.Id);
        //if (ScrimTeamsManager.RemoveCharacterFromTeam(characterId))
        //{
        //    _teamPlayers.RemoveAll(p => p.Id == characterId);
        //    _teamNonOutfitPlayers.RemoveAll(p => p.Id == characterId);
        //}
    }

    private void HandleSubstitutePlayer()
    {
        ScrimTeamsManager.SetPlayerBenchedStatus(Player.Id, !Player.IsBenched);
    }
    #endregion

    private double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }
}
