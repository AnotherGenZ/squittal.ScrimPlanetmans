@page "/RulesetBrowser"
@page "/Rulesets"

@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.Forms;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.Models.ScrimMatchReports;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Rulesets;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatchReports;
@using System.Threading;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@inject IRulesetDataService RulesetDataService 
@*@inject IScrimMatchReportDataService ReportDataService*@
@*@inject IFacilityService FacilityService*@
@*@inject IZoneService ZoneService*@
@*@inject IWorldService WorldService*@
@inject NavigationManager NavManager

@implements IDisposable

<div class="container-fluid" style="margin-top: 16px;">

    <div class="row">

        <div class="col-lg-8" style="margin-left: auto; margin-right: auto;">

            <div class="header-card-container default" style="background-color: transparent; box-shadow: 0px 2px 5px 0px var(--sq-light-blue-gray);">
                <h4>Ruleset Browser</h4>

                @if (_showNewRulesetForm)
                {
                    @*<div class="col-lg-4">

                        <div class="header-card-container default">

                            <h5 class="default" style="margin-bottom: 0.1rem;">
                                Team Creation Form
                            </h5>

                            <div class="sq-content">*@
                                <EditForm Model="@_newRuleset" OnValidSubmit="OnCreateNewRulesetSubmit" style="margin-top: 0.5rem;">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <p style="margin-bottom: 0.5rem;"><span style="width: 55px; display: inline-block;">Name:</span><InputText id="inputTeamName" @bind-Value=@_newRuleset.Name maxlength="100" pattern="^([A-Za-z0-9()\[\]\-_][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_]$" style="display: inline-block; width: 248px;" /></p>

                                    <button type="submit" class="btn btn-primary" style="display: inline-block; margin: 8px 0;">
                                        <span class="oi oi-check"></span>Save
                                    </button>

                                    <button @onclick="OnCreateNewRulesetCancel" class="btn btn-outline-primary" style="display: inline-block; margin: 8px 0;" title="Cancel creating new team">
                                        <span class="oi oi-x" style="top: 0;"></span>Cancel
                                    </button>

                                    <p style="margin: 8px 0; font-size: 0.9rem;">Open Team On Save? <InputCheckbox id="openNewTeamOnSave" @bind-Value="_openNewRulesetOnSave" />@($"{(_openNewRulesetOnSave ? " Yes" : " No")}")</p>

                                </EditForm>
                            @*</div>
                        </div>
                    </div>*@
                }
                else
                {
                    <button class="btn btn-outline-primary" @onclick="ToggleCreateNewRulesetFormVisibility" style="display: inline-block; margin: 12px 0 16px 0; font-size: small;">
                        <span class="oi oi-plus"></span>Create New
                    </button>
                }


                <table style="width: 100%; border-bottom: 1px solid var(--sq-gray);" class="table-responsive-sm table-striped-light">
                    <thead>
                        <tr style="line-height: 1.2; font-size: 0.85rem; vertical-align: bottom; background-color: transparent; font-family: Roboto, 'Segoe UI', sans-serif; border-bottom: 1px solid var(--sq-gray);">
                            <th style="font-weight: 300;">Is Default?</th>
                            <th style="font-weight: 300;">ID</th>
                            <th style="font-weight: 300;">Name</th>
                            <th style="font-weight: 300;">Created</th>
                            <th style="font-weight: 300;">Edited</th>
                            <th style="font-weight: 300;">Source File</th>
                            <th style="font-weight: 300;">Author</th>
                            <th style="font-weight: 300;">Description</th>
                            <th style="font-weight: 300;"></th>
                            <th style="font-weight: 300;"></th>
                            <th style="font-weight: 300;"></th>
                        </tr>
                    </thead>

                    @if (_storeRulesetList != null)
                    {
                        <tbody style="@(_isLoadingRulesetList ? "opacity: 0.5;" : string.Empty)">
                            @foreach (var ruleset in _storeRulesetList)
                            {
                                <tr>
                                    @*<td>@ruleset.IsActive</td>*@
                                    <td>@ruleset.IsDefault</td>
                                    <td>@ruleset.Id</td>
                                    <td>@ruleset.Name</td>
                                    <td>@GetLocalizedDateString(ruleset.DateCreated)</td>
                                    <td>@(ruleset.DateLastModified != null ? GetLocalizedDateString((DateTime)ruleset.DateLastModified) : "--")</td>
                                    <td>ruleset.SourceFile</td>
                                    <td>ruleset.Author</td>
                                    <td>ruleset.Description</td>
                                    <td>
                                        <NavLink class="nav-link" href=@($"Ruleset/{ruleset.Id}") style="padding: 4px 8px;">View</NavLink>
                                    </td>
                                    @if (ruleset.IsDefault)
                                    {
                                        <td></td>
                                    }
                                    else
                                    {
                                        <td>
                                            <NavLink class="nav-link" href=@($"Ruleset/{ruleset.Id}?edit=true") style="padding: 4px 8px;">Edit</NavLink>
                                        </td>
                                    }
                                    <td>
                                        <div class="btn btn-outline-primary" style="padding: 4px 8px; display: inline-block;" @onclick="@(() => OnSetActiveClick(ruleset.Id))">
                                            <span class="oi oi-target" style="padding-right: 4px; padding-left: 0.1rem;"></span>Set Active
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    }
                </table>

                @if (_isLoadingRulesetList)
                {
                    <div class="thin">
                        <SpinnerEllipsis />
                    </div>
                }
                else
                {

                    <div style="margin: 8px auto 1px auto; width: 200px; text-align: center;">
                        @if (_renderedHasPreviousPage)
                        {
                            <NavLink title="Go to previous page" class="nav-link btn btn-outline-primary" href=@($"/reports?page={_renderedPageIndex - 1}") style="padding: 4px 8px; display: inline-block;">
                                <span class="oi oi-caret-left" style="padding-right: 0.1rem;"></span>
                            </NavLink>
                        }
                        else
                        {
                            <div class="btn btn-outline-primary disabled" style="padding: 4px 8px; color: var(--sq-gray); display: inline-block;">
                                <span class="oi oi-caret-left" style="padding-right: 0.1rem;"></span>
                            </div>
                        }


                        <div style="padding: 4px 8px; display: inline-block;"><span style="font-size: 1.1rem; padding-right: 8px; color: var(--sq-pink);">@_renderedPageIndex</span><span style="color: var(--sq-gray);">/ @_renderedPageCount</span></div>

                        @if (_renderedHasNextPage)
                        {
                            <NavLink title="Go to next page" class="nav-link btn btn-outline-primary" href=@($"/reports?page={_renderedPageIndex + 1}") style="padding: 4px 8px; display: inline-block;">
                                <span class="oi oi-caret-right" style="padding-right: 0rem; padding-left: 0.1rem;"></span>
                            </NavLink>
                        }
                        else
                        {
                            <div class="btn btn-outline-primary disabled" style="padding: 4px 8px; color: var(--sq-gray); display: inline-block;">
                                <span class="oi oi-caret-right" style="padding-right: 0rem; padding-left: 0.1rem;"></span>@*Next*@
                            </div>
                        }

                    </div>
                }

                @*
        <p>@_storeRulesetList.Count()</p>
        <p>Search Terms: @_debug</p>
        @foreach (var term in _searchFilter.SearchTermsList)
        {
            <p style="margin: 0;">@term</p>
        }
        <p>Is Filtered: @_isFilteredResults</p>
        <p>Is Default: @_searchFilter.IsDefaultFilter</p>

        <p>Start: @(_searchFilter.SearchStartDate.ToString())</p>
        <p>  End: @(_searchFilter.SearchEndDate.ToString())</p>
                *@
            </div>

        </div>

    </div>
</div>


@code {
    [Parameter]
    public int i_pageIndex { get; set; } = 1;
    public int _renderedPageIndex { get; set; } = 1;

    [Parameter]
    public int? _uriPageIndex { get; set; }

    private int _defaultPageIndex { get; set; } = 1;

    private List<Ruleset> _storeRulesetList { get; set; } = new List<Ruleset>();

    private int _renderedPageCount { get; set; } = 0;
    private bool _renderedHasNextPage { get; set; } = false;
    private bool _renderedHasPreviousPage { get; set; } = false;

    private bool _isLoadingRulesetList { get; set; } = true;

    private CancellationTokenSource ctsRulesets;

    #region New Ruleset Form
    private Ruleset _newRuleset { get; set; } = new Ruleset();

    private bool _showNewRulesetForm { get; set; } = false;
    private bool _openNewRulesetOnSave { get; set; } = true;

    #endregion New Ruleset Form

    private string _debug { get; set; } = string.Empty;


    #region Initialization Methods
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;

        if (ctsRulesets != null)
        {
            ctsRulesets.Cancel();
            ctsRulesets.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _renderedPageIndex = i_pageIndex;

        await LoadRulesetListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        UpdateUriParameters();

        _renderedPageIndex = i_pageIndex;
        await LoadRulesetListAsync();

        paramsChanged = true;

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetListAsync()
    {
        _isLoadingRulesetList = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (ctsRulesets != null)
        {
            ctsRulesets.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        ctsRulesets = newCTS;

        try
        {

            var paginatedList = await RulesetDataService.GetRulesetListAsync(_renderedPageIndex, ctsRulesets.Token);

            ctsRulesets.Token.ThrowIfCancellationRequested();

            _storeRulesetList = new List<Ruleset>();

            _storeRulesetList.AddRange(paginatedList.Contents);

            _renderedPageCount = paginatedList.PageCount;
            _renderedHasNextPage = paginatedList.HasNextPage;
            _renderedHasPreviousPage = paginatedList.HasPreviousPage;
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (ctsRulesets == newCTS)
        {
            ctsRulesets = null;
        }

        _isLoadingRulesetList = false;
    }
    #endregion Initialization Methods

    #region Event Handling
    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (UpdateUriParameters())
        {
            await LoadRulesetListAsync();

            StateHasChanged();
        }
    }
    #endregion Event Handling

    #region Form Controls
    private async void OnSetActiveClick(int rulesetId)
    {

    }

    private async void OnCreateNewRulesetSubmit()
    {
        var newRuleset = _newRuleset;

        if (string.IsNullOrWhiteSpace(newRuleset.Name))
        {
            return;
        }

        //Regex nameRegex = new Regex("^([A-Za-z0-9()\\[\\]\\-_][ ]{0,1}){1,49}[A-Za-z0-9()\\[\\]\\-_]$", RegexOptions.Compiled | RegexOptions.IgnoreCase);
        //if (!nameRegex.Match(newTeam.Name).Success)
        //{
        //    return;
        //}

        //Regex aliasRegex = new Regex("^[A-Za-z0-9]{1,4}$", RegexOptions.Compiled | RegexOptions.IgnoreCase);
        //if (!aliasRegex.Match(newTeam.Alias).Success)
        //{
        //    return;
        //}

        var newRulesetEntity = await RulesetDataService.SaveNewRulesetAsync(newRuleset);

        _newRuleset = new Ruleset();

        _showNewRulesetForm = false;

        if (_openNewRulesetOnSave && newRulesetEntity != null)
        {
            //HandleOnSelectTeamChange(newTeamEntity.Id.ToString());
            NavManager.NavigateTo($"/Ruleset/{newRulesetEntity.Id}?edit=true");
        }
        else
        {
            await LoadRulesetListAsync();
        }

        //_storeRulesetList = await TeamService.GetConstructedTeams(true);

        InvokeAsyncStateHasChanged();
    }

    private void OnCreateNewRulesetCancel()
    {
        _newRuleset = new Ruleset();

        _showNewRulesetForm = false;
    }

    private void ToggleCreateNewRulesetFormVisibility()
    {
        _showNewRulesetForm = !_showNewRulesetForm;
    }
    #endregion Form Controls

    private bool UpdateUriParameters()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var stateChanged = false;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var qPage))
        {
            if (int.TryParse(qPage, out int page))
            {
                if (_uriPageIndex != page)
                {
                    _uriPageIndex = page;
                    i_pageIndex = page;
                    _renderedPageIndex = page;
                    stateChanged = true;
                }
            }
            else
            {
                if (_uriPageIndex != null)
                {
                    stateChanged = true;
                }

                _uriPageIndex = null;
                i_pageIndex = _defaultPageIndex;
                _renderedPageIndex = _defaultPageIndex;
            }
        }

        return stateChanged;
    }

    private string GetLocalizedDateTimeString(DateTime dateTime)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);

        var dateTimeLocal = dateTime.ToLocalTime();

        return $"{dateTimeLocal.ToString("ddd")} {dateTimeLocal.ToString("g")}";
    }

    private string GetLocalizedDateString(DateTime dateTime)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);

        var dateTimeLocal = dateTime.ToLocalTime();

        return $"{dateTimeLocal.ToString("ddd")} {dateTime.ToShortDateString()}";
    }

    private string GetLocalizedTimeString(DateTime dateTime)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);

        var dateTimeLocal = dateTime.ToLocalTime();

        return $"{dateTimeLocal.ToShortTimeString()}";
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}

