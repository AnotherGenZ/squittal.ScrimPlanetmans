@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Rulesets;
@using System.Threading;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@using squittal.ScrimPlanetmans.Logging;

@inject IScrimRulesetManager RulesetManager
@inject IRulesetDataService RulesetDataService
@inject NavigationManager NavManager

@implements IDisposable

<div class="header-card-container default">

    @if (_renderedRuleset == null)
    {
        <h5>Ruleset Editor</h5>
        <SpinnerEllipsis />
    }
    else
    {
        @if (_isSavingRuleset)
        {
            <h5>Saving changes...</h5>
            <SpinnerEllipsis />
        }
        else
        {
            <div style="display: grid; grid-template-columns: 48% 8% 18% 8% 18%; align-items: baseline; font-family: Roboto, 'Segoe UI', sans-serif;">
                <h5 class="mono-font" style="margin-bottom: 0px;">
                    Ruleset Editor: @_renderedRuleset.Name <span style="font-size: small; color: var(--sq-gray); font-weight: 300;">[@(_renderedRuleset.Id)]</span>
                </h5>

                <span style="padding-right: 8px; text-align: right; color: var(--sq-gray);">Created: </span>
                <p style="margin-bottom: 0px; text-align: left;">@_renderedRuleset.DateCreated.ToString("f")</p>

                <span style="padding-right: 8px; text-align: right; color: var(--sq-gray); grid-column: 4;">Last Modified: </span>
                <p style="margin-bottom: 0px; text-align: left; grid-column: 5;">@(_renderedRuleset.DateLastModified != null ? ((DateTime)_renderedRuleset.DateLastModified).ToString("f") : "--")</p>

            </div>

            <div style="display: block; font-size: 1rem; margin-top: -4px; margin-bottom: 12px;">
                @if (!_showEditForm)
                {
                    <button class="btn btn-link sans-serif-font" style="padding: 0 0 0 0; font-size: smaller; vertical-align: baseline;" @onclick="ToggleEditRulesetFormVisibility">Edit Info</button>

                    @if (!_isExportingRuleset)
                    {
                        <span style="font-size: smaller; display: inline-block; vertical-align: text-bottom;"> | </span>
                        <button class="btn btn-link sans-serif-font" style="padding: 0 0 0 0; font-size: smaller; vertical-align: baseline;" @onclick="ExportRulesetToJsonFile">Export to File</button>
                    }

                    <p class="sans-serif-font" style="margin: 0 0 4px 0; font-size: smaller;">
                        <div>Is Active? @(IsActiveRuleset(_renderedRuleset.Id) ? "Yes" : "No")</div>
                        <div>Default Round Length: @_renderedRuleset.DefaultRoundLength seconds</div>
                        <div>Default Match Title: @_renderedRuleset.DefaultMatchTitle</div>
                    </p>
                }
                else
                {
                    <EditForm Model="@_editFormRuleset" class="sans-serif-font" style="font-size: smaller; margin-top: 8px; margin-left: 4px;" OnValidSubmit="HandleEditRulesetSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div style="margin-bottom: 0.5rem;"><span style="width: 152px; display: inline-block;">Name:</span><InputText @bind-Value=@_editFormRuleset.Name maxlength="100" pattern="^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" style="display: inline-block; width: 248px;" /></div>
                        <div style="margin-bottom: 0.5rem;"><span style="width: 152px; display: inline-block;">Default Round Length:</span><InputNumber min="1" type="text" @bind-Value=@_editFormRuleset.DefaultRoundLength style="display: inline-block; width: 64px; padding-left: 4px;" /><span style="padding-left: 8px;">seconds</span></div>
                        <div style="margin-bottom: 0.5rem;"><span style="width: 152px; display: inline-block;">Default Match Title:</span><InputText @bind-Value=@_editFormRuleset.DefaultMatchTitle maxlength="100" pattern="(?!.)$|^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" style="display: inline-block; width: 248px;" /></div>

                        <button type="submit" class="btn btn-primary">
                            <span class="oi oi-check"></span>Save
                        </button>

                        <button type="reset" @onclick="HandleEditTeamCancel" class="btn btn-outline-primary" style="display: inline-block;" title="Cancel editing team info">
                            <span class="oi oi-x" style="top: 0;"></span>Cancel
                        </button>

                    </EditForm>
                }
            </div>
        }

        <div style="display: flex;">

            <EditRulesetActionRules i_rulesetId="@_renderedRulesetId" />

            <EditRulesetItemCategoryRules i_rulesetId="@_renderedRulesetId" />

            <EditRulesetFacilityRules i_rulesetId="@_renderedRulesetId" />

        </div>
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private Ruleset _renderedRuleset { get; set; }

    [Parameter]
    public bool i_editMode { get; set; } = false;
    private bool _renderedEditMode { get; set; } = false;

    [Parameter]
    public bool? _uriEditMode { get; set; }

    private bool _defaultEditMode = false;

    private bool _isLoadingRuleset { get; set; } = false;
    private bool _isSavingRuleset { get; set; } = false;
    private bool _isExportingRuleset { get; set; } = false;


    private bool _showEditForm { get; set; } = false;
    private Ruleset _editFormRuleset { get; set; } = new Ruleset();

    private CancellationTokenSource cts;


    #region Initializtion Methods
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;

        _renderedRulesetId = i_rulesetId;

        if (_renderedRulesetId == RulesetDataService.DefaultRulesetId)
        {
            NavManager.NavigateTo($"ruleset/{_renderedRulesetId}?edit=false");
        }
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;

        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRulesetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (UpdateUriParameters())
        {
            await LoadRulesetAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetAsync()
    {
        _isLoadingRuleset = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            _renderedRuleset = await RulesetDataService.GetRulesetFromIdAsync(_renderedRulesetId, cts.Token, false);

            cts.Token.ThrowIfCancellationRequested();

            _editFormRuleset.Name = _renderedRuleset.Name;
            _editFormRuleset.DefaultRoundLength = _renderedRuleset.DefaultRoundLength;
            _editFormRuleset.DefaultMatchTitle = _renderedRuleset.DefaultMatchTitle;
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingRuleset = false;
    }
    #endregion Initializtion Methods

    #region Event Handling
    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (UpdateUriParameters())
        {
            await LoadRulesetAsync();

            StateHasChanged();
        }
    }
    #endregion Event Handling

    #region Form Handling
    private async void HandleEditRulesetSubmit()
    {
        var updateRuleset = _editFormRuleset;
        updateRuleset.Id = _renderedRulesetId;

        _isSavingRuleset = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {

            var success = await RulesetDataService.UpdateRulesetInfo(updateRuleset, cts.Token);

            cts.Token.ThrowIfCancellationRequested();

            if (success)
            {
                _renderedRuleset = await RulesetDataService.GetRulesetFromIdAsync(_renderedRulesetId, cts.Token, false);

                cts.Token.ThrowIfCancellationRequested();

                _editFormRuleset.Name = _renderedRuleset.Name;
                _editFormRuleset.DefaultRoundLength = _renderedRuleset.DefaultRoundLength;
                _editFormRuleset.DefaultMatchTitle = _renderedRuleset.DefaultMatchTitle;

                _showEditForm = false;

                InvokeAsyncStateHasChanged();
            }
        }
        catch
        {
            //Ingore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isSavingRuleset = false;
        InvokeAsyncStateHasChanged();
    }

    private void HandleEditTeamCancel()
    {
        _editFormRuleset.Name = _renderedRuleset.Name;
        _editFormRuleset.DefaultRoundLength = _renderedRuleset.DefaultRoundLength;
        _editFormRuleset.DefaultMatchTitle = _renderedRuleset.DefaultMatchTitle;

        _showEditForm = false;
    }

    private void ToggleEditRulesetFormVisibility()
    {
        _showEditForm = !_showEditForm;

        if (_showEditForm)
        {
            _editFormRuleset.Name = _renderedRuleset.Name;
            _editFormRuleset.DefaultRoundLength = _renderedRuleset.DefaultRoundLength;
            _editFormRuleset.DefaultMatchTitle = _renderedRuleset.DefaultMatchTitle;
        }
    }

    private async void ExportRulesetToJsonFile()
    {
        _isExportingRuleset = true;

        await RulesetDataService.ExportRulesetToJsonFile(_renderedRulesetId, CancellationToken.None);

        _isExportingRuleset = false;

        InvokeAsyncStateHasChanged();

        //var ruleset = _renderedRuleset;

        //char[] characters = ruleset.Name.ToCharArray();

        //characters = Array.FindAll<char>(characters, (c => (char.IsLetterOrDigit(c)
        //                                                    || char.IsWhiteSpace(c)
        //                                                    || c == '-'
        //                                                    || c == '_')));
        //var fileName = new string(characters);

        //await RulesetFileHandler.WriteToJsonFile(fileName, ruleset);
    }

    #endregion Form Handling

    private bool UpdateUriParameters()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var stateChanged = false;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("edit", out var qEdit))
        {
            if (bool.TryParse(qEdit, out bool edit))
            {
                if (_uriEditMode != edit)
                {
                    _uriEditMode = edit;
                    i_editMode = edit;
                    _renderedEditMode = edit;
                    stateChanged = true;
                }
            }
            else
            {
                if (_uriEditMode != null)
                {
                    stateChanged = true;
                }

                _uriEditMode = null;
                i_editMode = _defaultEditMode;
                _renderedEditMode = _defaultEditMode;
            }
        }

        return stateChanged;
    }

    private bool IsActiveRuleset(int rulesetId)
    {
        return RulesetDataService.ActiveRulesetId == rulesetId;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
