@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models.Forms;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Rulesets;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using System.Threading;
@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@inject IScrimRulesetManager RulesetManager
@inject IRulesetDataService RulesetDataService
@inject IScrimMessageBroadcastService MessageService
@inject NavigationManager NavManager

@implements IDisposable

<div class="header-card-container default">

    @if (_renderedRuleset == null)
    {
        <h5>Ruleset Editor</h5>
        <SpinnerEllipsis />
    }
    else
    {
        @if (_isSavingRuleset)
        {
            <h5>Saving changes...</h5>
            <SpinnerEllipsis />
        }
        else if (_isDeletingRuleset)
        {
            <h5>Deleting ruleset...</h5>
            <SpinnerEllipsis />
        }
        else
        {
            <div style="display: grid; grid-template-columns: 48% 8% 18% 8% 18%; align-items: baseline; font-family: Roboto, 'Segoe UI', sans-serif;">
                <h5 class="mono-font" style="margin-bottom: 0px;">
                    Ruleset Editor: @_renderedRuleset.Name <span style="font-size: small; color: var(--sq-gray); font-weight: 300;">[@(_renderedRuleset.Id)]</span>
                </h5>

                <span style="padding-right: 8px; text-align: right; color: var(--sq-gray);">Created: </span>
                <p style="margin-bottom: 0px; text-align: left;">@GetLocalizedDateTimeString(_renderedRuleset.DateCreated)</p>

                <span style="padding-right: 8px; text-align: right; color: var(--sq-gray); grid-column: 4;">Last Modified: </span>
                <p style="margin-bottom: 0px; text-align: left; grid-column: 5;">@(_renderedLastModifiedDateTime != null ? (GetLocalizedDateTimeString((DateTime)_renderedLastModifiedDateTime)) : "--")</p>

            </div>

            <div style="display: block; font-size: 1rem; margin-top: -4px; margin-bottom: 12px;">
                @if (!_showEditForm)
                {
                    @if (!_showExportConfirmationForm && !_showDeleteConfirmationForm)
                    {
                        <button class="btn btn-link sans-serif-font" style="padding: 0 0 0 0; font-size: smaller; vertical-align: baseline;" @onclick="ToggleEditRulesetFormVisibility">Edit Info</button>
                    }

                    @if (!_isExportingRuleset && !_showDeleteConfirmationForm && !_showEditForm)
                    {
                        @if (!_showExportConfirmationForm)
                        {
                            <span style="font-size: smaller; display: inline-block; vertical-align: text-bottom;"> | </span>
                            <button title="Export this ruleset to a JSON file" class="btn btn-link sans-serif-font" style="padding: 0 0 0 0; font-size: smaller; vertical-align: baseline;" @onclick="HandleShowExportRulesetConfirmationForm">Export to File</button>
                        }
                        else
                        {
                            <div class="sq-content sans-serif-font" style="font-family: Roboto, 'Segoe UI', sans-serif; margin: 16px 0 16px 0; padding: 8px 16px; border: 1px solid var(--sq-black-alpha-50); border-radius: 0.2rem; width: max-content; box-shadow: 0px 1px 3px 0px var(--sq-light-blue-gray); font-size: 0.9rem;">
                                <p class="sans-serif-font" style="margin: 0 0 4px 0;">Are you sure you want to export this ruleset? This action may overwrite an existing file.</p>

                                <div style="text-align: right; margin-top: 12px;">
                                    <button title="Cancel exporting this ruleset" class="btn btn-primary sans-serif-font" style="" @onclick="HandleExportRulesetCancel">
                                        <span class="oi oi-x" style="top: 0;"></span>Cancel
                                    </button>

                                    <button title="Export this ruleset" class="btn btn-outline-primary sans-serif-font" style="margin-left: 8px;" @onclick="HandleExportRulesetToJsonFileSubmit">
                                        <span class="oi oi-data-transfer-download"></span>Export
                                    </button>
                                </div>

                            </div>
                        }
                    }

                    @if (_canDeleteRuleset && !_showEditForm && !_showExportConfirmationForm)
                    {
                        @if (!_showDeleteConfirmationForm)
                        {
                            <span style="font-size: smaller; display: inline-block; vertical-align: text-bottom;"> | </span>
                            <button class="btn btn-link sans-serif-font" style="padding: 0 0 0 0; font-size: smaller; vertical-align: baseline;" @onclick="HandleShowDeleteRulesetConfirmationForm">Delete Ruleset</button>
                        }
                        else
                        {
                            <div class="sq-content sans-serif-font" style="font-family: Roboto, 'Segoe UI', sans-serif; margin: 16px 0 16px 0; padding: 8px 16px; border: 1px solid var(--sq-black-alpha-50); border-radius: 0.2rem; width: max-content; box-shadow: 0px 1px 3px 0px var(--sq-light-blue-gray); font-size: 0.9rem;">
                                <p class="sans-serif-font" style="margin: 0 0 4px 0;">Are you sure you want to permanently delete this ruleset? This action cannot be undone.</p>

                                <div style="text-align: right; margin-top: 12px;">
                                    <button class="btn btn-primary sans-serif-font" style="" @onclick="HandleDeleteRulesetCancel">
                                        <span class="oi oi-x" style="top: 0;"></span>Cancel
                                    </button>

                                    <button class="btn btn-outline-primary sans-serif-font" style="margin-left: 8px;" @onclick="HandleDeleteRulesetSubmit">
                                        <span class="oi oi-trash"></span>Delete
                                    </button>
                                </div>

                            </div>
                        }
                    }

                    <p class="sans-serif-font" style="margin: 0 0 4px 0; font-size: 0.9rem;">

                        <div style="margin-top: 4px; font-weight: 600; display: block;">Match Settings</div>
                        <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Is Active?</span>@(IsActiveRuleset(_renderedRuleset.Id) ? "Yes" : "No")</div>
                        <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Default Round Length:</span>@_renderedRuleset.DefaultRoundLength seconds</div>
                        <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Default Match Title:</span>@_renderedRuleset.DefaultMatchTitle</div>
                        @if (!string.IsNullOrWhiteSpace(_renderedRuleset.SourceFile))
                        {
                            <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Source File:</span>@_renderedRuleset.SourceFile</div>
                        }

                        <div style="margin-top: 8px; font-weight: 600; display: block;">Overlay Settings</div>
                        <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Use Compact Layout:</span>@(_renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout ? "Yes" : "No")</div>
                        <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Displayed Stats Type:</span>@GetOverlayStatsDisplayString(_renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType)</div>
                        <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Show Player Scores:</span>@GetOverlayShowPlayerScoresString(_renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores)</div>

                    </p>
                }
                else
                {
                    <div class="sq-content sans-serif-font" style="font-family: Roboto, 'Segoe UI', sans-serif; margin: 16px 0 16px 0; padding: 8px 16px; border: 1px solid var(--sq-black-alpha-50); border-radius: 0.2rem; width: max-content; box-shadow: 0px 1px 3px 0px var(--sq-light-blue-gray); font-size: 0.9rem;">

                        <EditForm Model="@_editFormRuleset" class="sans-serif-font" style="font-size: 0.9rem; margin-top: 8px; margin-left: 4px;" OnValidSubmit="HandleEditRulesetSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div style="font-weight: 600; display: block; margin-bottom: 4px;">Match Settings</div>
                            <div style="margin-bottom: 0.5rem;"><span style="width: 164px; display: inline-block;">Name:</span><InputText @bind-Value=@_editFormRuleset.RulesetName maxlength="100" pattern="^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" style="display: inline-block; width: 248px;" /></div>
                            <div style="margin-bottom: 0.5rem;"><span style="width: 164px; display: inline-block;">Name:</span>@*<InputText @bind-Value=@_editFormRuleset.Name maxlength="100" pattern="^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" style="display: inline-block; width: 248px;" />*@</div>
                            <div style="margin-bottom: 0.5rem;"><span style="width: 164px; display: inline-block;">Default Round Length:</span><InputNumber min="1" type="text" @bind-Value=@_editFormRuleset.DefaultRoundLength style="display: inline-block; width: 64px; padding-left: 4px;" /><span style="padding-left: 8px;">seconds</span></div>
                            <div style="margin-bottom: 0.5rem;"><span style="width: 164px; display: inline-block;">Default Match Title:</span><InputText @bind-Value=@_editFormRuleset.DefaultMatchTitle maxlength="100" pattern="(?!.)$|^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" style="display: inline-block; width: 248px;" /></div>

                            <div style="margin-top: 8px; font-weight: 600; display: block; margin-bottom: 4px;">Overlay Settings</div>
                            @*<div style="margin-bottom: 0.5rem;"><InputCheckbox style="position: relative; top: 2px;" @bind-Value=@_editFormRuleset.RulesetOverlayConfiguration.UseCompactLayout /><span style="padding-left: 8px;">Use Compact Layout</span></div>
                            <div style="margin-bottom: 0.5rem;">
                                <span style="width: 164px; display: inline-block;">Displayed Stats Type:</span><InputSelect @bind-Value=@_editFormRuleset.RulesetOverlayConfiguration.StatsDisplayType style="display: inline-block; width: 248px;">

                                    @foreach (OverlayStatsDisplayType statsType in Enum.GetValues(typeof(OverlayStatsDisplayType)))
                                    {
                                        <option value=@statsType label=@GetOverlayStatsDisplayString(statsType) />
                                    }

                                </InputSelect>
                            </div>
                             <div style="margin-bottom: 0.5rem;">
                                <span style="width: 164px; display: inline-block;">Show Player Scores:</span><InputSelect Value="@_inputShowScoresSelection" ValueChanged="@((ShowStatusPanelScoresSelectOptions s) => OnChangeShowScoresSelection(s))" ValueExpression="@(() => _inputShowScoresSelection)" style="display: inline-block; width: 248px;">

                                    @foreach (ShowStatusPanelScoresSelectOptions showScoresSelection in Enum.GetValues(typeof(ShowStatusPanelScoresSelectOptions)))
                                    {
                                        <option value=@showScoresSelection label=@GetOverlayShowPlayerScoresSelectionString(showScoresSelection) />
                                    }

                                </InputSelect>
                            </div>*@


                            <div style="margin-bottom: 0.5rem;"><InputCheckbox style="position: relative; top: 2px;" @bind-Value="_editFormRuleset.UseCompactOverlayLayout" /><span style="padding-left: 8px;">Use Compact Layout</span></div>
                            <div style="margin-bottom: 0.5rem;">
                                <span style="width: 164px; display: inline-block;">Displayed Stats Type:</span><InputSelect @bind-Value=@_editFormRuleset.OverlayStatsDisplayType style="display: inline-block; width: 248px;">

                                    @foreach (OverlayStatsDisplayType statsType in Enum.GetValues(typeof(OverlayStatsDisplayType)))
                                    {
                                        <option value=@statsType label=@GetOverlayStatsDisplayString(statsType) />
                                    }

                                </InputSelect>
                            </div>

                            <div style="margin-bottom: 0.5rem;">
                                <span style="width: 164px; display: inline-block;">Show Player Scores:</span><InputSelect @bind-Value=@_editFormRuleset.ShowOverlayStatusPanelScoresSelection style="display: inline-block; width: 248px;">

                                    @foreach (ShowStatusPanelScoresSelectOptions showScoresSelection in Enum.GetValues(typeof(ShowStatusPanelScoresSelectOptions)))
                                    {
                                        <option value=@showScoresSelection label=@GetOverlayShowPlayerScoresSelectionString(showScoresSelection) />
                                    }

                                </InputSelect>
                            </div>

                            <div style="text-align: right; margin-top: 12px;">
                                <button type="submit" class="btn btn-primary">
                                    <span class="oi oi-check"></span>Save
                                </button>

                                <button type="reset" @onclick="HandleEditRulesetCancel" class="btn btn-outline-primary" style="display: inline-block;" title="Cancel editing team info">
                                    <span class="oi oi-x" style="top: 0;"></span>Cancel
                                </button>
                            </div>

                        </EditForm>

                    </div>
                }
            </div>
        }

        @if (!_isDeletingRuleset)
        {
            <div class="row" style="margin-left: 0; margin-right: 0;">

                <EditRulesetActionRules i_rulesetId="@_renderedRulesetId" />

                <EditRulesetItemCategoryRules i_rulesetId="@_renderedRulesetId" />

                <EditRulesetItemRules i_rulesetId="@_renderedRulesetId" />

                <EditRulesetFacilityRules i_rulesetId="@_renderedRulesetId" />

            </div>
        }
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private Ruleset _renderedRuleset { get; set; }

    [Parameter]
    public bool i_editMode { get; set; } = false;
    private bool _renderedEditMode { get; set; } = false;

    [Parameter]
    public bool? _uriEditMode { get; set; }

    private bool _defaultEditMode = false;

    private bool _isLoadingRuleset { get; set; } = false;
    private bool _isSavingRuleset { get; set; } = false;
    private bool _isExportingRuleset { get; set; } = false;
    private bool _isDeletingRuleset { get; set; } = false;

    private bool _showEditForm { get; set; } = false;
    //private Ruleset _editFormRuleset { get; set; } = new Ruleset();
    private RulesetSettingsForm _editFormRuleset { get; set; }  //= new RulesetSettingsForm();

    private bool _canDeleteRuleset { get; set; } = false;
    private bool _showDeleteConfirmationForm { get; set; } = false;

    private bool _showExportConfirmationForm { get; set; } = false;

    private ShowStatusPanelScoresSelectOptions _inputShowScoresSelection { get; set; }

    private DateTime? _renderedLastModifiedDateTime { get; set; }

    private CancellationTokenSource cts;


    #region Initializtion Methods
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;

        MessageService.RaiseRulesetRuleChangeEvent += HandleRulesetRuleChangeEvent;

        _renderedRulesetId = i_rulesetId;

        if (_renderedRulesetId == RulesetDataService.DefaultRulesetId)
        {
            NavManager.NavigateTo($"ruleset/{_renderedRulesetId}?edit=false");
        }
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;

        MessageService.RaiseRulesetRuleChangeEvent -= HandleRulesetRuleChangeEvent;

        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRulesetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (UpdateUriParameters())
        {
            await LoadRulesetAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetAsync()
    {
        _isLoadingRuleset = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            var TaskList = new List<Task>();

            var rulesetTask = RulesetDataService.GetRulesetFromIdAsync(_renderedRulesetId, cts.Token, false, true);
            TaskList.Add(rulesetTask);

            cts.Token.ThrowIfCancellationRequested();

            var canDeleteTask = RulesetDataService.CanDeleteRuleset(_renderedRulesetId, cts.Token);
            TaskList.Add(canDeleteTask);

            await Task.WhenAll(TaskList);

            _renderedRuleset = rulesetTask.Result;
            _canDeleteRuleset = canDeleteTask.Result;

            _editFormRuleset = new RulesetSettingsForm(_renderedRuleset);

            //_editFormRuleset.Name = _renderedRuleset.Name;
            //_editFormRuleset.DefaultRoundLength = _renderedRuleset.DefaultRoundLength;
            //_editFormRuleset.DefaultMatchTitle = _renderedRuleset.DefaultMatchTitle;
            //_editFormRuleset.RulesetOverlayConfiguration.UseCompactLayout = _renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout;
            //_editFormRuleset.RulesetOverlayConfiguration.StatsDisplayType = _renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType;

            //_inputShowScoresSelection = ConvertToSelectOption(_renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores);
            //_editFormRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores = _renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores;

            _renderedLastModifiedDateTime = _renderedRuleset.DateLastModified;
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingRuleset = false;
    }
    #endregion Initializtion Methods

    #region Event Handling
    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (UpdateUriParameters())
        {
            await LoadRulesetAsync();

            StateHasChanged();
        }
    }

    private void HandleRulesetRuleChangeEvent(object sender, ScrimMessageEventArgs<RulesetRuleChangeMessage> e)
    {
        var ruleset = e.Message.Ruleset;

        if (ruleset.Id != _renderedRulesetId)
        {
            return;
        }

        if (_renderedLastModifiedDateTime == ruleset.DateLastModified)
        {
            return;
        }

        _renderedLastModifiedDateTime = ruleset.DateLastModified;

        InvokeAsyncStateHasChanged();
    }
    #endregion Event Handling

    #region Form Handling
    private async void HandleEditRulesetSubmit()
    {
        var updateRuleset = _editFormRuleset;

        //updateRuleset.Id = _renderedRulesetId;
        //updateRuleset.RulesetOverlayConfiguration.RulesetId = _renderedRulesetId;

        updateRuleset.RulesetId = _renderedRulesetId;

        _isSavingRuleset = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            /*** Version 1 ***/
            //var TaskList = new List<Task>();

            //var rulesetTask = RulesetDataService.UpdateRulesetInfo(updateRuleset.GetRuleset(), cts.Token);
            //TaskList.Add(rulesetTask);

            //var overlayConfigurationTask = RulesetDataService.SaveRulesetOverlayConfiguration(updateRuleset.RulesetId, updateRuleset.GetOverlayConfiguration(), cts.Token);
            //TaskList.Add(overlayConfigurationTask);

            //await Task.WhenAll(TaskList);

            //var success = rulesetTask.Result;

            /*** Version 2 ***/
            bool infoSuccess = false;
            bool overlaySuccess = false;

            //if (FormHasRulesetInfoChanges())
            //{
            //    infoSuccess = await RulesetDataService.UpdateRulesetInfo(updateRuleset.GetRuleset(), cts.Token);
            //    cts.Token.ThrowIfCancellationRequested();
            //}
            infoSuccess = await RulesetDataService.UpdateRulesetInfo(updateRuleset.GetRuleset(), cts.Token);
            cts.Token.ThrowIfCancellationRequested();

            if (FormHasOverlayConfigurationChanges())
            {
                overlaySuccess = await RulesetDataService.SaveRulesetOverlayConfiguration(updateRuleset.RulesetId, updateRuleset.GetOverlayConfiguration(), cts.Token);
                cts.Token.ThrowIfCancellationRequested();
            }

            var success = (infoSuccess || overlaySuccess);


            /*** Version 3 ***/
            //var success = await RulesetDataService.UpdateRulesetInfo(updateRuleset, cts.Token);

            //cts.Token.ThrowIfCancellationRequested();

            //await RulesetDataService.SaveRulesetOverlayConfiguration(updateRuleset.Id, updateRuleset.RulesetOverlayConfiguration, cts.Token);

            //cts.Token.ThrowIfCancellationRequested();




            if (success)
            {
                _renderedRuleset = await RulesetDataService.GetRulesetFromIdAsync(_renderedRulesetId, cts.Token, false, true);

                cts.Token.ThrowIfCancellationRequested();

                _editFormRuleset.SetProperties(_renderedRuleset);

                //_editFormRuleset.Name = _renderedRuleset.Name;
                //_editFormRuleset.DefaultRoundLength = _renderedRuleset.DefaultRoundLength;
                //_editFormRuleset.DefaultMatchTitle = _renderedRuleset.DefaultMatchTitle;
                //_editFormRuleset.RulesetOverlayConfiguration.UseCompactLayout = _renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout;
                //_editFormRuleset.RulesetOverlayConfiguration.StatsDisplayType = _renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType;

                //_inputShowScoresSelection = ConvertToSelectOption(_renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores);
                //_editFormRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores = _renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores;

                _showEditForm = false;

                InvokeAsyncStateHasChanged();
            }
        }
        catch
        {
            //Ingore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isSavingRuleset = false;
        InvokeAsyncStateHasChanged();
    }

    private void HandleEditRulesetCancel()
    {
        _editFormRuleset.SetProperties(_renderedRuleset);

        //_editFormRuleset.Name = _renderedRuleset.Name;
        //_editFormRuleset.DefaultRoundLength = _renderedRuleset.DefaultRoundLength;
        //_editFormRuleset.DefaultMatchTitle = _renderedRuleset.DefaultMatchTitle;
        //_editFormRuleset.RulesetOverlayConfiguration.UseCompactLayout = _renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout;
        //_editFormRuleset.RulesetOverlayConfiguration.StatsDisplayType = _renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType;

        //_inputShowScoresSelection = ConvertToSelectOption(_renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores);
        //_editFormRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores = _renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores;

        _showEditForm = false;
    }

    private void ToggleEditRulesetFormVisibility()
    {
        _showEditForm = !_showEditForm;

        if (_showEditForm)
        {
            _editFormRuleset.SetProperties(_renderedRuleset);

            //_editFormRuleset.Name = _renderedRuleset.Name;
            //_editFormRuleset.DefaultRoundLength = _renderedRuleset.DefaultRoundLength;
            //_editFormRuleset.DefaultMatchTitle = _renderedRuleset.DefaultMatchTitle;

            //_inputShowScoresSelection = ConvertToSelectOption(_renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores);

            //_editFormRuleset.RulesetOverlayConfiguration = new RulesetOverlayConfiguration
            //{
            //    UseCompactLayout = _renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout,
            //    StatsDisplayType = _renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType,
            //    ShowStatusPanelScores = _renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores
            //};



            //_editFormRuleset.RulesetOverlayConfiguration.UseCompactLayout = _renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout;
            //_editFormRuleset.RulesetOverlayConfiguration.StatsDisplayType = _renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType;
        }
    }

    private void HandleShowExportRulesetConfirmationForm()
    {
        _showExportConfirmationForm = true;
    }

    private async void HandleExportRulesetToJsonFileSubmit()
    {
        _isExportingRuleset = true;
        InvokeAsyncStateHasChanged();

        if (await RulesetDataService.ExportRulesetToJsonFile(_renderedRulesetId, CancellationToken.None))
        {
            _showExportConfirmationForm = false;
        }

        _isExportingRuleset = false;
        InvokeAsyncStateHasChanged();
    }

    private void HandleExportRulesetCancel()
    {
        _showExportConfirmationForm = false;
    }

    private void HandleShowDeleteRulesetConfirmationForm()
    {
        if (_canDeleteRuleset)
        {
            _showDeleteConfirmationForm = true;
        }
    }

    private async void HandleDeleteRulesetSubmit()
    {
        // TODO: implement ruleset deletion
        if (!_canDeleteRuleset)
        {
            return;
        }

        _isDeletingRuleset = true;
        InvokeAsyncStateHasChanged();

        if (await RulesetDataService.DeleteRulesetAsync(_renderedRulesetId))
        {
            NavManager.NavigateTo($"/rulesets");

            _showDeleteConfirmationForm = false;
        }

        _isDeletingRuleset = false;
        InvokeAsyncStateHasChanged();
    }

    private void HandleDeleteRulesetCancel()
    {
        _showDeleteConfirmationForm = false;
    }

    private bool FormHasRulesetInfoChanges()
    {
        if (_editFormRuleset.RulesetName != _renderedRuleset.Name)
        {
            return true;
        }

        if (_editFormRuleset.DefaultMatchTitle != _renderedRuleset.DefaultMatchTitle)
        {
            return true;
        }

        if (_editFormRuleset.DefaultRoundLength != _renderedRuleset.DefaultRoundLength)
        {
            return true;
        }

        return false;
    }

    private bool FormHasOverlayConfigurationChanges()
    {
        if (_editFormRuleset.UseCompactOverlayLayout != _renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout)
        {
            return true;
        }

        if (_editFormRuleset.OverlayStatsDisplayType != _renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType)
        {
            return true;
        }

        if (_editFormRuleset.ShowOverlayStatusPanelScores != _renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores)
        {
            return true;
        }

        return false;
    }

    //private void OnChangeShowScoresSelection(ShowStatusPanelScoresSelectOptions selection)
    //{
    //    switch (selection)
    //    {
    //        case ShowStatusPanelScoresSelectOptions.Yes:
    //            _editFormRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores = true;
    //            _inputShowScoresSelection = ShowStatusPanelScoresSelectOptions.Yes;
    //            return;

    //        case ShowStatusPanelScoresSelectOptions.No:
    //            _editFormRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores = false;
    //            _inputShowScoresSelection = ShowStatusPanelScoresSelectOptions.No;
    //            return;

    //        case ShowStatusPanelScoresSelectOptions.StatsDisplayDefault:
    //            _editFormRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores = null;
    //            _inputShowScoresSelection = ShowStatusPanelScoresSelectOptions.StatsDisplayDefault;
    //            return;
    //    }
    //}

    #endregion Form Handling

    private bool UpdateUriParameters()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var stateChanged = false;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("edit", out var qEdit))
        {
            if (bool.TryParse(qEdit, out bool edit))
            {
                if (_uriEditMode != edit)
                {
                    _uriEditMode = edit;
                    i_editMode = edit;
                    _renderedEditMode = edit;
                    stateChanged = true;
                }
            }
            else
            {
                if (_uriEditMode != null)
                {
                    stateChanged = true;
                }

                _uriEditMode = null;
                i_editMode = _defaultEditMode;
                _renderedEditMode = _defaultEditMode;
            }
        }

        return stateChanged;
    }

    private bool IsActiveRuleset(int rulesetId)
    {
        return RulesetDataService.ActiveRulesetId == rulesetId;
    }

    private string GetLocalizedDateTimeString(DateTime dateTime)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);

        var dateTimeLocal = dateTime.ToLocalTime();

        return $"{dateTimeLocal.ToString("f")}";
    }

    private string GetOverlayStatsDisplayString(OverlayStatsDisplayType statsType)
    {
        var rawString = Enum.GetName(typeof(OverlayStatsDisplayType), statsType);

        if (string.IsNullOrWhiteSpace(rawString))
        {
            return "Error";
        }

        return Regex.Replace(rawString, "([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))", "$1 ");
    }

    private string GetOverlayShowPlayerScoresSelectionString(ShowStatusPanelScoresSelectOptions showScoresSelection)
    {
        var rawString = Enum.GetName(typeof(ShowStatusPanelScoresSelectOptions), showScoresSelection);

        if (string.IsNullOrWhiteSpace(rawString))
        {
            return "Error";
        }

        return Regex.Replace(rawString, "([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))", "$1 ");
    }

    private string GetOverlayShowPlayerScoresString(bool? showScores)
    {
        switch (showScores)
        {
            case true:
                return GetOverlayShowPlayerScoresSelectionString(ShowStatusPanelScoresSelectOptions.Yes);

            case false:
                return GetOverlayShowPlayerScoresSelectionString(ShowStatusPanelScoresSelectOptions.No);

            case null:
                return GetOverlayShowPlayerScoresSelectionString(ShowStatusPanelScoresSelectOptions.StatsDisplayDefault);
        }
    }

    private bool? ConvertToNullableBool(ShowStatusPanelScoresSelectOptions showOverlayStatusPanelScoresSelection)
    {
        switch (showOverlayStatusPanelScoresSelection)
        {
            case ShowStatusPanelScoresSelectOptions.Yes:
                return true;

            case ShowStatusPanelScoresSelectOptions.No:
                return false;

            case ShowStatusPanelScoresSelectOptions.StatsDisplayDefault:
                return null;

            default:
                return null;
        }
    }

    private ShowStatusPanelScoresSelectOptions ConvertToSelectOption(bool? showStatusPanelScore)
    {
        switch (showStatusPanelScore)
        {
            case true:
                return ShowStatusPanelScoresSelectOptions.Yes;

            case false:
                return ShowStatusPanelScoresSelectOptions.No;

            case null:
                return ShowStatusPanelScoresSelectOptions.StatsDisplayDefault;
        }
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
