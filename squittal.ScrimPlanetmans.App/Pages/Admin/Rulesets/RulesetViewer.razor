@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models.Forms;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Rulesets;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using System.Threading;
@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@inject IScrimRulesetManager RulesetManager
@inject IRulesetDataService RulesetDataService
@inject IScrimMessageBroadcastService MessageService
@inject NavigationManager NavManager

@implements IDisposable

<div class="header-card-container default">

    @if (_renderedRuleset == null)
    {
        <h5>Ruleset Viewer</h5>
        <SpinnerEllipsis />
    }
    else
    {
        <div style="display: grid; grid-template-columns: 48% 8% 18% 8% 18%; align-items: baseline; font-family: Roboto, 'Segoe UI', sans-serif;">
            <h5 class="mono-font" style="margin-bottom: 0px;">
                Ruleset Viewer: @_renderedRuleset.Name <span style="font-size: small; color: var(--sq-gray); font-weight: 300;">[@(_renderedRuleset.Id)]</span>
            </h5>

            <span style="padding-right: 8px; text-align: right; color: var(--sq-gray);">Created: </span>
            <p style="margin-bottom: 0px; text-align: left;">@GetLocalizedDateTimeString(_renderedRuleset.DateCreated)</p>

            <span style="padding-right: 8px; text-align: right; color: var(--sq-gray); grid-column: 4;">Last Modified: </span>
            <p style="margin-bottom: 0px; text-align: left; grid-column: 5;">@(_renderedLastModifiedDateTime != null ? (GetLocalizedDateTimeString((DateTime)_renderedLastModifiedDateTime)) : "--")</p>

        </div>

        <div style="display: block; font-size: 1rem; margin-top: -4px; margin-bottom: 12px;">

            @if (_renderedRuleset != null && IsActiveRuleset(_renderedRuleset.Id))
            {
                <div title="Active Ruleset" class="sans-serif-font" style="padding-left: 0; display: inline-block;">
                    <span class="oi oi-target" style="padding-right: 0; font-size: 0.75rem;"></span>
                    <span style="font-size: smaller;">Active Ruleset</span>
                </div>

                @if (!_renderedRuleset.IsDefault)
                {
                    <span style="font-size: smaller; display: inline-block; vertical-align: text-bottom; padding: 0 4px 0 4px;">|</span>
                }
            }

            @if (!_renderedRuleset.IsDefault)
            {
                <NavLink class="nav-link sans-serif-font" href=@($"ruleset/{_renderedRuleset.Id}?edit=true") style="padding: 0; font-size: smaller; margin-top: -4px; display: inline-block;">Open in Editor</NavLink>
            }

            <p class="sans-serif-font" style="margin: 0 0 4px 0; font-size: 0.9rem;">

                <div style="margin-top: 4px; font-weight: 600; display: block;">Match Settings</div>
                <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Default Round Length:</span>@_renderedRuleset.DefaultRoundLength seconds</div>
                <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Default Match Title:</span>@_renderedRuleset.DefaultMatchTitle</div>
                <div><span style="display: inline-block; width: 156px; margin-right: 4px; line-height: 1.2; margin-top: 2px;">Default End Round<br>On Facility Capture:</span>@(_renderedRuleset.DefaultEndRoundOnFacilityCapture ? "Yes" : "No")</div>
                
                @if (!string.IsNullOrWhiteSpace(_renderedRuleset.SourceFile))
                {
                    <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Source File:</span>@_renderedRuleset.SourceFile</div>
                }

                @if (_renderedRuleset.RulesetOverlayConfiguration != null)
                {
                    <div style="margin-top: 8px; font-weight: 600; display: block;">Overlay Settings</div>
                    <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Use Compact Layout:</span>@(_renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout ? "Yes" : "No")</div>
                    <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Displayed Stats Type:</span>@GetOverlayStatsDisplayString(_renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType)</div>
                    <div><span style="display: inline-block; width: 156px; margin-right: 4px;">Show Player Scores:</span>@GetOverlayShowPlayerScoresString(_renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores)</div>
                }
            </p>

        </div>

        <div class="row" style="margin-left: 0; margin-right: 0;">

            <ViewRulesetActionRules i_rulesetId="@_renderedRulesetId" />

            <ViewRulesetItemCategoryRules i_rulesetId="@_renderedRulesetId" />

            <ViewRulesetItemRules i_rulesetId="@_renderedRulesetId" />

            <ViewRulesetFacilityRules i_rulesetId="@_renderedRulesetId" />

        </div>
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private Ruleset _renderedRuleset { get; set; }

    [Parameter]
    public bool i_editMode { get; set; } = false;
    private bool _renderedEditMode { get; set; } = false;

    [Parameter]
    public bool? _uriEditMode { get; set; }

    private bool _defaultEditMode = false;

    private bool _isLoadingRuleset { get; set; } = false;

    private DateTime? _renderedLastModifiedDateTime { get; set; }

    private CancellationTokenSource cts;


    #region Initializtion Methods
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;

        MessageService.RaiseRulesetRuleChangeEvent += HandleRulesetRuleChangeEvent;
        MessageService.RaiseRulesetSettingChangeEvent += HandleRulesetSettingChangeEvent;
        MessageService.RaiseRulesetOverlayConfigurationChangeEvent += HandleRulesetOverlayConfigurationChangeEvent;
        MessageService.RaiseActiveRulesetChangeEvent += HandleActiveRulesetChangeEvent;
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;

        MessageService.RaiseRulesetRuleChangeEvent -= HandleRulesetRuleChangeEvent;
        MessageService.RaiseRulesetSettingChangeEvent -= HandleRulesetSettingChangeEvent;
        MessageService.RaiseRulesetOverlayConfigurationChangeEvent -= HandleRulesetOverlayConfigurationChangeEvent;
        MessageService.RaiseActiveRulesetChangeEvent -= HandleActiveRulesetChangeEvent;

        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _renderedRulesetId = i_rulesetId;

        await LoadRulesetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (UpdateUriParameters())
        {
            await LoadRulesetAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetAsync()
    {
        _isLoadingRuleset = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            _renderedRuleset = await RulesetDataService.GetRulesetFromIdAsync(_renderedRulesetId, cts.Token, false, true);

            cts.Token.ThrowIfCancellationRequested();

            _renderedLastModifiedDateTime = _renderedRuleset.DateLastModified;
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingRuleset = false;
    }
    #endregion Initializtion Methods

    #region Event Handling
    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (UpdateUriParameters())
        {
            await LoadRulesetAsync();

            StateHasChanged();
        }
    }

    private void HandleActiveRulesetChangeEvent(object sender, ScrimMessageEventArgs<ActiveRulesetChangeMessage> e)
    {
        var newRuleset = e.Message.ActiveRuleset;
        var oldRuleset = e.Message.PreviousActiveRuleset;

        if (oldRuleset.Id == _renderedRulesetId || newRuleset.Id == _renderedRulesetId)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private void HandleRulesetRuleChangeEvent(object sender, ScrimMessageEventArgs<RulesetRuleChangeMessage> e)
    {
        var ruleset = e.Message.Ruleset;

        if (ruleset.Id != _renderedRulesetId)
        {
            return;
        }

        if (_renderedLastModifiedDateTime == ruleset.DateLastModified)
        {
            return;
        }

        InvokeAsyncStateHasChanged();
    }

    private void HandleRulesetSettingChangeEvent(object sender, ScrimMessageEventArgs<RulesetSettingChangeMessage> e)
    {
        var ruleset = e.Message.Ruleset;

        if (ruleset.Id != _renderedRulesetId)
        {
            return;
        }

        var changes = e.Message.ChangedSettings;
        if (!changes.Any())
        {
            return;
        }

        if (changes.Contains(RulesetSettingChange.Name))
        {
            _renderedRuleset.Name = ruleset.Name;
        }

        if (changes.Contains(RulesetSettingChange.DefaultMatchTitle))
        {
            _renderedRuleset.DefaultMatchTitle = ruleset.DefaultMatchTitle;
        }

        if (changes.Contains(RulesetSettingChange.DefaultRoundLength))
        {
            _renderedRuleset.DefaultRoundLength = ruleset.DefaultRoundLength;
        }

        if (changes.Contains(RulesetSettingChange.DefaultEndRoundOnFacilityCapture))
        {
            _renderedRuleset.DefaultEndRoundOnFacilityCapture = ruleset.DefaultEndRoundOnFacilityCapture;
        }

        InvokeAsyncStateHasChanged();
    }

    private void HandleRulesetOverlayConfigurationChangeEvent(object sender, ScrimMessageEventArgs<RulesetOverlayConfigurationChangeMessage> e)
    {
        var ruleset = e.Message.Ruleset;

        if (ruleset.Id != _renderedRulesetId)
        {
            return;
        }

        var changes = e.Message.ChangedSettings;
        if (!changes.Any())
        {
            return;
        }

        var configuration = e.Message.OverlayConfiguration;

        if (_renderedRuleset.RulesetOverlayConfiguration == null)
        {
            _renderedRuleset.RulesetOverlayConfiguration = new RulesetOverlayConfiguration();
        }

        if (changes.Contains(RulesetOverlayConfigurationChange.UseCompactLayout))
        {
            _renderedRuleset.RulesetOverlayConfiguration.UseCompactLayout = configuration.UseCompactLayout;
        }

        if (changes.Contains(RulesetOverlayConfigurationChange.StatsDisplayType))
        {
            _renderedRuleset.RulesetOverlayConfiguration.StatsDisplayType = configuration.StatsDisplayType;
        }

        if (changes.Contains(RulesetOverlayConfigurationChange.ShowStatusPanelScores))
        {
            _renderedRuleset.RulesetOverlayConfiguration.ShowStatusPanelScores = configuration.ShowStatusPanelScores;
        }

        InvokeAsyncStateHasChanged();
    }
    #endregion Event Handling

    private bool UpdateUriParameters()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var stateChanged = false;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("edit", out var qEdit))
        {
            if (bool.TryParse(qEdit, out bool edit))
            {
                if (_uriEditMode != edit)
                {
                    _uriEditMode = edit;
                    i_editMode = edit;
                    _renderedEditMode = edit;
                    stateChanged = true;
                }
            }
            else
            {
                if (_uriEditMode != null)
                {
                    stateChanged = true;
                }

                _uriEditMode = null;
                i_editMode = _defaultEditMode;
                _renderedEditMode = _defaultEditMode;
            }
        }

        return stateChanged;
    }

    private bool IsActiveRuleset(int rulesetId)
    {
        return RulesetDataService.ActiveRulesetId == rulesetId;
    }

    private string GetLocalizedDateTimeString(DateTime dateTime)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);

        var dateTimeLocal = dateTime.ToLocalTime();

        return $"{dateTimeLocal.ToString("f")}";
    }

    private string GetOverlayStatsDisplayString(OverlayStatsDisplayType statsType)
    {
        var rawString = Enum.GetName(typeof(OverlayStatsDisplayType), statsType);

        if (string.IsNullOrWhiteSpace(rawString))
        {
            return "Error";
        }

        return Regex.Replace(rawString, "([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))", "$1 ");
    }

    private string GetOverlayShowPlayerScoresSelectionString(ShowStatusPanelScoresSelectOptions showScoresSelection)
    {
        var rawString = Enum.GetName(typeof(ShowStatusPanelScoresSelectOptions), showScoresSelection);

        if (string.IsNullOrWhiteSpace(rawString))
        {
            return "Error";
        }

        return Regex.Replace(rawString, "([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))", "$1 ");
    }

    private string GetOverlayShowPlayerScoresString(bool? showScores)
    {
        switch (showScores)
        {
            case true:
                return GetOverlayShowPlayerScoresSelectionString(ShowStatusPanelScoresSelectOptions.Yes);

            case false:
                return GetOverlayShowPlayerScoresSelectionString(ShowStatusPanelScoresSelectOptions.No);

            case null:
                return GetOverlayShowPlayerScoresSelectionString(ShowStatusPanelScoresSelectOptions.UseStatsDisplayDefault);
        }
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
