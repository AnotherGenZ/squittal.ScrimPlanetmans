@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Rulesets;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using System.Threading;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@inject IScrimRulesetManager RulesetManager
@inject IRulesetDataService RulesetDataService
@inject IScrimMessageBroadcastService MessageService
@inject NavigationManager NavManager

@implements IDisposable

<div class="header-card-container default">

    @if (_renderedRuleset == null)
    {
        <h5>Ruleset Viewer</h5>
        <SpinnerEllipsis />
    }
    else
    {
        <div style="display: grid; grid-template-columns: 48% 8% 18% 8% 18%; align-items: baseline; font-family: Roboto, 'Segoe UI', sans-serif;">
            <h5 class="mono-font" style="margin-bottom: 0px;">
                Ruleset Viewer: @_renderedRuleset.Name <span style="font-size: small; color: var(--sq-gray); font-weight: 300;">[@(_renderedRuleset.Id)]</span>
            </h5>

            <span style="padding-right: 8px; text-align: right; color: var(--sq-gray);">Created: </span>
            <p style="margin-bottom: 0px; text-align: left;">@GetLocalizedDateTimeString(_renderedRuleset.DateCreated)</p>

            <span style="padding-right: 8px; text-align: right; color: var(--sq-gray); grid-column: 4;">Last Modified: </span>
            <p style="margin-bottom: 0px; text-align: left; grid-column: 5;">@(_renderedLastModifiedDateTime != null ? (GetLocalizedDateTimeString((DateTime)_renderedLastModifiedDateTime)) : "--")</p>

        </div>

        <div style="display: block; font-size: 1rem; margin-top: 4px; margin-bottom: 12px;">

            @if (!_renderedRuleset.IsDefault)
            {
                <NavLink class="nav-link" href=@($"ruleset/{_renderedRuleset.Id}?edit=true") style="padding: 0; font-size: smaller; margin-top: -4px; margin-bottom: 4px;">Open in Editor</NavLink>
            }

            <p class="sans-serif-font" style="margin: 0 0 4px 0; font-size: smaller;">
                <div><span style="display: inline-block; width: 140px; margin-right: 4px;">Is Active?</span>@(IsActiveRuleset(_renderedRuleset.Id) ? "Yes" : "No")</div>
                <div><span style="display: inline-block; width: 140px; margin-right: 4px;">Default Round Length:</span>@_renderedRuleset.DefaultRoundLength seconds</div>
                <div><span style="display: inline-block; width: 140px; margin-right: 4px;">Default Match Title:</span>@_renderedRuleset.DefaultMatchTitle</div>
                @if (!string.IsNullOrWhiteSpace(_renderedRuleset.SourceFile))
                {
                    <div><span style="display: inline-block; width: 140px; margin-right: 4px;">Source File:</span>@_renderedRuleset.SourceFile</div>
                }
            </p>
        </div>

        @*<div style="display: flex;">*@
        <div class="row" style="margin-left: 0; margin-right: 0;">

            <ViewRulesetActionRules i_rulesetId="@_renderedRulesetId" />

            <ViewRulesetItemCategoryRules i_rulesetId="@_renderedRulesetId" />

            <ViewRulesetItemRules i_rulesetId="@_renderedRulesetId" />

            <ViewRulesetFacilityRules i_rulesetId="@_renderedRulesetId" />

        </div>
    }
</div>


@code {
    [Parameter]
    public int i_rulesetId { get; set; }
    private int _renderedRulesetId { get; set; }

    private Ruleset _renderedRuleset { get; set; }

    [Parameter]
    public bool i_editMode { get; set; } = false;
    private bool _renderedEditMode { get; set; } = false;

    [Parameter]
    public bool? _uriEditMode { get; set; }

    private bool _defaultEditMode = false;

    private bool _isLoadingRuleset { get; set; } = false;

    private DateTime? _renderedLastModifiedDateTime { get; set; }

    private CancellationTokenSource cts;


    #region Initializtion Methods
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;

        MessageService.RaiseRulesetRuleChangeEvent -= HandleRulesetRuleChangeEvent;
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;

        MessageService.RaiseRulesetRuleChangeEvent -= HandleRulesetRuleChangeEvent;

        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _renderedRulesetId = i_rulesetId;

        await LoadRulesetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (UpdateUriParameters())
        {
            await LoadRulesetAsync();
            paramsChanged = true;
        }

        if (paramsChanged)
        {
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadRulesetAsync()
    {
        _isLoadingRuleset = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set ctsRulesets to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            _renderedRuleset = await RulesetDataService.GetRulesetFromIdAsync(_renderedRulesetId, cts.Token, false);

            cts.Token.ThrowIfCancellationRequested();

            _renderedLastModifiedDateTime = _renderedRuleset.DateLastModified;
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingRuleset = false;
    }
    #endregion Initializtion Methods

    #region Event Handling
    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (UpdateUriParameters())
        {
            await LoadRulesetAsync();

            StateHasChanged();
        }
    }

    private void HandleRulesetRuleChangeEvent(object sender, ScrimMessageEventArgs<RulesetRuleChangeMessage> e)
    {
        var ruleset = e.Message.Ruleset;

        if (ruleset.Id != _renderedRulesetId)
        {
            return;
        }

        if (_renderedLastModifiedDateTime == ruleset.DateLastModified)
        {
            return;
        }

        InvokeAsyncStateHasChanged();
    }
    #endregion Event Handling

    private bool UpdateUriParameters()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var stateChanged = false;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("edit", out var qEdit))
        {
            if (bool.TryParse(qEdit, out bool edit))
            {
                if (_uriEditMode != edit)
                {
                    _uriEditMode = edit;
                    i_editMode = edit;
                    _renderedEditMode = edit;
                    stateChanged = true;
                }
            }
            else
            {
                if (_uriEditMode != null)
                {
                    stateChanged = true;
                }

                _uriEditMode = null;
                i_editMode = _defaultEditMode;
                _renderedEditMode = _defaultEditMode;
            }
        }

        return stateChanged;
    }

    private bool IsActiveRuleset(int rulesetId)
    {
        return RulesetDataService.ActiveRulesetId == rulesetId;
    }

    private string GetLocalizedDateTimeString(DateTime dateTime)
    {
        dateTime = DateTime.SpecifyKind(dateTime, DateTimeKind.Utc);

        var dateTimeLocal = dateTime.ToLocalTime();

        return $"{dateTimeLocal.ToString("f")}";
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
