@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Rulesets;
@using System.Text.RegularExpressions;
@using System.Threading;
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

@inject IScrimRulesetManager RulesetManager
@inject IRulesetDataService RulesetDataService
@inject NavigationManager NavManager

@*@implements IDisposable*@

@if (_renderedActionRule != null)
{
    <tr>
        <td style="color: var(--sq-gray);">@((int)_renderedActionRule.ScrimActionType)</td>
        <td style="color: var(--sq-black);">@GetActionRuleDescription(_renderedActionRule.ScrimActionType)</td>
        @*<td style="text-align: right; opacity: @GetValueOpacity(_renderedActionRule.Points); color: var(--sq-black);">@_renderedActionRule.Points</td>*@

        <td style="opacity: @GetValueOpacity(_renderedActionRule.Points);">
            <InputNumber @bind-Value="_renderedActionRule.Points" style="width: 50px; text-align: right;  color: var(--sq-black);"/>@if (_renderedActionRule.Points != _originalPoints) {  <span>*</span>}
        </td>

        <td style="opacity: @GetDeferValueOpacity(_renderedActionRule.DeferToItemCategoryRules); color: var(--sq-black);">@_renderedActionRule.DeferToItemCategoryRules</td>
    </tr>
}


@code {
    [Parameter]
    public RulesetActionRule i_actionRule { get; set; }
    private RulesetActionRule _renderedActionRule { get; set; }

    private int _originalPoints { get; set; }

    #region Initialization Methods
    protected override void OnInitialized()
    {
        if (i_actionRule != null)
        {
            _renderedActionRule = i_actionRule;

            _originalPoints = _renderedActionRule.Points;
        }
    }

    protected override void OnParametersSet()
    {
        if (_renderedActionRule == null || i_actionRule.RulesetId != _renderedActionRule.RulesetId || i_actionRule.ScrimActionType != _renderedActionRule.ScrimActionType)
        {
            _renderedActionRule = i_actionRule;

            _originalPoints = _renderedActionRule.Points;

            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Initialization Methods


    private string GetActionRuleDescription(ScrimActionType actionType)
    {
        var name = Enum.GetName(typeof(ScrimActionType), actionType);

        return Regex.Replace(name, @"(\p{Ll})(\p{Lu})", "$1 $2");
    }

    private double GetValueOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }

    private double GetDeferValueOpacity(bool value)
    {
        return (value == true)
            ? 1.0
            : 0.5;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }



}
