@using squittal.ScrimPlanetmans.Data.Models;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.Forms;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent; 

@inject IConstructedTeamService ConstructedTeamsService
@inject IFactionService FactionService
@inject IWorldService WorldService


<div class="header-card-container default">

    @if (_renderedTeam != null)
    {
        <h3 style="font-size: 1.25rem;">@($"{(!string.IsNullOrWhiteSpace(_renderedTeam.Alias) ? $"[{_renderedTeam.Alias}] " : string.Empty)} {_renderedTeam.Name} ({_renderedTeam.Id})")</h3>

        <EditForm Model="@_renderedTeam" style="margin-top: 0.5rem;">
            @*OnValidSubmit="HandleNewTeamSubmit" *@
            <DataAnnotationsValidator />
            <ValidationSummary />

            <p style="margin-bottom: 0.5rem;">Name: <InputText id="inputTeamName" @bind-Value=@_renderedTeam.Name /></p>
            <p style="margin-bottom: 0.5rem;">Alias: <InputText id="inputTeamAlias" @bind-Value=@_renderedTeam.Alias /></p>

            <button type="submit" class="btn btn-primary">
                <span class="oi oi-check"></span>Save
            </button>

        </EditForm>


        <div class="sq-content">

            <table class="table-responsive-sm table-striped-light mono-font smaller">

                <thead>
                    <tr>
                        <th></th>
                        <th>Character</th>
                        <th>Faction</th>
                        <th>Server</th>
                        <th>[Edit]</th>
                    </tr>
                </thead>

                @lock (_renderedCharacters)
                { 
                    @if (_renderedCharacters != null && _renderedCharacters.Any() && _renderedCharactersCount > 0)
                    {
                        <tbody>
                            @foreach (var indexedCharacter in _renderedCharacters
                                                .OrderBy(c => c.Name)
                                                .AsEnumerable()
                                                .Select((c, Index) => new { Character = c, Index = Index }))
                            {
                                @*<ConstructedTeamBuilderForm_EditPlayerRow i_character=@indexedCharacter.Character i_index=@(_renderedTeam.Characters.ToList().IndexOf(character)+1) />*@
                                <ConstructedTeamBuilderForm_EditPlayerRow i_character=@indexedCharacter.Character i_index=@(indexedCharacter.Index + 1) />
                            
                                @*
                                <tr class="@SqCssHelper.GetFactionClassFromId(character.FactionId)" style="color: var(--sq-ps2-primary);">
                                    @*<td>@(_renderedTeam.Characters.ToList().IndexOf(character)+1)</td>
                                    <td>@(
                                            _renderedCharacters
                                                .OrderBy(c => c.Name)
                                                .AsEnumerable()
                                                .Select((c, Index) => new { Character = c, Index = Index })
                                                .Where(ci => ci.Character.Id == character.Id)
                                                .Select(ci => ci.Index + 1)
                                                .FirstOrDefault())</td>
                                    <td title="@character.Name [@(character.Id)]">
                                        <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@character.Name</span>
                                        @if (character.PrestigeLevel != 0)
                                        {
                                            <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                                                <sup>
                                                    <span class="oi oi-star small" aria-hidden="true"></span>
                                                </sup>
                                            </div>
                                        }
                                        <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(character.Id)]</span>
                                    </td>

                                    <td>
                                        @GetFactionAbbreviationFromId(character.FactionId)
                                    </td>



                                </tr>
                                *@
                            }

                            @*@for (var i = 0; i < _renderedTeam.Characters.Count(); i++) // in _renderedTeam.Characters)
                            @for (var i = 0; i < _renderedCharactersCount; i++) // in _renderedTeam.Characters)
                            {
                                <ConstructedTeamBuilderForm_EditPlayerRow i_character=@_renderedTeam.Characters.ElementAt(i) i_index=@(i+1) />
                                @*<tr class="@SqCssHelper.GetFactionClassFromId(_renderedTeam.Characters.ElementAt(i).FactionId)" style="color: var(--sq-ps2-primary);">
                                    <td>
                                        @(i+1)
                                    </td>
                                    <td title="@_renderedTeam.Characters.ElementAt(i).Name [@(_renderedTeam.Characters.ElementAt(i).Id)]">
                                        <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@_renderedTeam.Characters.ElementAt(i).Name</span>
                                        @if (_renderedTeam.Characters.ElementAt(i).PrestigeLevel != 0)
                                        {
                                            <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                                                <sup>
                                                    <span class="oi oi-star small" aria-hidden="true"></span>
                                                </sup>
                                            </div>
                                        }
                                        <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(_renderedTeam.Characters.ElementAt(i).Id)]</span>
                                    </td>

                                    <td>
                                        @GetFactionAbbreviationFromId(_renderedTeam.Characters.ElementAt(i).FactionId)
                                    </td>


                                </tr>
                            }*@

                        </tbody>
                    }
                }

            </table>

            <div style="display: block; margin: 0.2rem 0;">
                <EditForm Model="@_inputCharacter" OnValidSubmit="HandleAddCharacterSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    Add Player: <InputText id="addPlayerInput" @bind-Value="@_inputCharacter" />

                    <button type="submit" class="btn btn-primary">
                        <span class="oi oi-person"></span>Add
                    </button>
                </EditForm>
            </div>

        </div>

    }

</div>

@code {
    [Parameter]
    public int i_teamId { get; set; }
    private int _renderedTeamId { get; set; }

    [Parameter]
    public bool i_viewOnly { get; set; } = true;
    private bool _renderedViewOnly { get; set; } = true;


    private int _noTeamSelectedId { get; set; } = -1;

    private ConstructedTeamFormInfo _renderedTeam { get; set; }
    private List<Character> _renderedCharacters { get; set; } = new List<Character>();
    private int _renderedCharactersCount { get; set; } = 0;

    private string _inputCharacter { get; set; } = string.Empty;
    private bool _isSavingCharacter { get; set; } = false;

    private ConcurrentQueue<ConstructedTeamCharacterChange> _characterEditQueue { get; set; } = new ConcurrentQueue<ConstructedTeamCharacterChange>();


    private IEnumerable<World> _worlds;


    #region Initialization Methods
    protected override async Task OnInitializedAsync()
    {
        _worlds = await WorldService.GetAllWorldsAsync();

        var s = _worlds.ElementAt(1);
    }

    protected override async Task OnParametersSetAsync()
    {
        var viewOnlyChanged = false;

        if (i_viewOnly != _renderedViewOnly)
        {
            _renderedViewOnly = i_viewOnly;

            viewOnlyChanged = true;
        }

        if (i_teamId != _renderedTeamId || viewOnlyChanged)
        {
            _renderedTeamId = i_teamId;

            _renderedTeam = await ConstructedTeamsService.GetConstructedTeamFormInfo(_renderedTeamId);

            //_renderedCharacters = _renderedTeam.Characters.ToList();
            //paramsChanged = true;

            await InvokeAsync(() =>
            {
                lock (_renderedCharacters)
                {
                    _renderedCharacters = new List<Character>();

                    if (_renderedTeam.Characters != null && _renderedTeam.Characters.Any())
                    {
                        _renderedCharacters.AddRange(_renderedTeam?.Characters.ToList());

                        _renderedCharacters = _renderedCharacters.OrderBy(c => c.Name).ToList();

                        _renderedCharactersCount = _renderedCharacters.Count();
                    }

                    StateHasChanged();
                }
            });
        }

        //if (paramsChanged)
        //{
        //    // TODO: do I acutally need to use InvokeAsync here?
        //    InvokeAsyncStateHasChanged();
        //}
    }
    #endregion Initialization Methods

    #region Form Input Handling

    private async void HandleAddCharacterSubmit()
    {
        var input = _inputCharacter;

        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        //InfantryMatchReporTeam.ReceiveTeamPlayerChangeEvent
        var characterChange = new ConstructedTeamCharacterChange
        {
            CharacterInput = input,
            ChangeType = TeamPlayerChangeType.Add
        };


        _characterEditQueue.Enqueue(characterChange);

        _inputCharacter = string.Empty;

        await ProcessTeamCharacterChanges();


        //// TeamBuilder.HandleAddPlayerSubmit
        //_teamNonOutfitPlayersLoading.Add(input);

        //try
        //{
        //    var success = await ScrimTeamsManager.TryAddCharacterToTeam(i_teamOrdinal, input);

        //    if (success)
        //    {
        //        _inputPlayer = string.Empty;
        //        _teamNonOutfitPlayersLoading.Remove(input);
        //    }
        //    else
        //    {
        //        _teamNonOutfitPlayersLoading.Remove(input);

        //        await InvokeAsync(() =>
        //        {
        //            StateHasChanged();
        //        });
        //    }
        //}
        //catch (DaybreakGames.Census.Exceptions.CensusServiceUnavailableException ex)
        //{
        //    _teamNonOutfitPlayersLoading.Remove(input);

        //    LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add character {input}</span>. The Census API Character service may be broken: {ex}</span>");
        //}
        //catch (Exception ex)
        //{
        //    _teamNonOutfitPlayersLoading.Remove(input);
        //    LogMessage($"<span style=\"color: red;\"><span style=\"font-weight: 600;\">Failed to add character {input}</span>: {ex}</span>");
        //}

        //await InvokeAsync(() =>
        //{
        //    StateHasChanged();
        //});
    }

    #endregion Form Input Handling

    #region Character Processing
    private async Task ProcessTeamCharacterChanges()
    {
        await InvokeAsync(async () =>
        {
            //lock (_renderedCharacters)
            //{
            while (_characterEditQueue.TryDequeue(out ConstructedTeamCharacterChange changeMessage))
            {
                var characterInput = changeMessage.CharacterInput;

                if (changeMessage.ChangeType == TeamPlayerChangeType.Remove)
                {
                    lock (_renderedCharacters)
                    {

                        //_renderedCharacters.Remove(player);
                    }
                }
                else if (changeMessage.ChangeType == TeamPlayerChangeType.Add)
                {
                    _isSavingCharacter = true;
                    StateHasChanged();

                    var newCharacter = await ConstructedTeamsService.TryAddCharacterToConstructedTeam(_renderedTeamId, characterInput);

                    if (newCharacter != null)
                    {
                        lock (_renderedCharacters)
                        {
                            if (!_renderedCharacters.Any(c => c.Id == newCharacter.Id))
                            {
                                _renderedCharacters.Add(newCharacter);
                                //_renderedCharacters = _renderedCharacters.ToList();
                                _renderedCharacters = _renderedCharacters.OrderBy(c => c.Name).ToList();

                                _renderedCharactersCount = _renderedCharacters.Count();
                            }
                        }
                        //if (newCharacter != null && !_renderedCharacters.Any(c => c.Id == newCharacter.Id))
                        //{
                        //    _renderedCharacters.Add(newCharacter)
                        //}

                    }

                    _isSavingCharacter = false;
                    StateHasChanged();
                }

                StateHasChanged();
                //}
            }

            lock (_renderedCharacters)
            {
                //_renderedCharacters = _renderedCharacters.ToList();
                _renderedCharacters = _renderedCharacters.OrderBy(c => c.Name).ToList();
                _renderedCharactersCount = _renderedCharacters.Count();
            }
            StateHasChanged();
        });
    }

    #endregion CharacterProcessing

    private string GetFactionAbbreviationFromId(int factionId)
    {
        return FactionService.GetFactionAbbrevFromId(factionId);
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}
