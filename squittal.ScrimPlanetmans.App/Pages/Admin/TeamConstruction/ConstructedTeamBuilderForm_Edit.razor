@using squittal.ScrimPlanetmans.Data.Models;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.Forms;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent; 
@using squittal.ScrimPlanetmans.App.Pages.Shared; 

@inject IConstructedTeamService ConstructedTeamsService
@inject IScrimMessageBroadcastService MessageService
@inject IFactionService FactionService
@inject IWorldService WorldService

@implements IDisposable

<div class="header-card-container default">

    @if (_renderedTeam != null && !_isChangingTeam)
    {
        <h3 style="font-size: 1.25rem; margin-bottom: 0;">
            <span><b>@($"{(!string.IsNullOrWhiteSpace(_renderedTeam.Alias) ? $"[{_renderedTeam.Alias}]" : string.Empty)}")</b></span>
            <span style="font-family: 'Helvetica Neue',Arial,'Noto Sans',sans-serif;"><b>@_renderedTeam.Name</b> (@_renderedTeam.Id)</span>
        </h3>

        <p style="margin: 0 0 0.1rem 0;">
            @if (!_showEditForm)
            {
                <button class="btn btn-link" style="padding: 0 0 0 4px; font-size: smaller; vertical-align: baseline;" @onclick="ToggleEditTeamFormVisibility">Edit Team Info</button>
            }
        </p>

        @if (_showEditForm)
        {
            <EditForm Model="@_editFormTeam" style="margin-top: 16px; margin-left: 4px;" OnValidSubmit="HandleEditTeamSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <p style="margin-bottom: 0.5rem;"><span style="width: 55px; display: inline-block;">Name:</span><InputText id="inputTeamName" @bind-Value=@_editFormTeam.Name maxlength="50" pattern="^([A-Za-z0-9()\[\]\-_][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_]$" style="display: inline-block; width: 248px;" /></p>
                <p style="margin-bottom: 0.5rem;"><span style="width: 55px; display: inline-block;">Alias:</span><InputText id="inputTeamAlias" @bind-Value=@_editFormTeam.Alias maxlength="4" pattern="[A-Za-z0-9]{1,4}" style="display: inline-block; width: 48px;" /></p>

                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-check"></span>Save
                </button>

                <button @onclick="HandleEditTeamCancel" class="btn btn-outline-primary" style="display: inline-block;" title="Cancel editing team info">
                    <span class="oi oi-x" style="top: 0;"></span>Cancel
                </button>

            </EditForm>
        }


        <div class="" style="margin-top: 16px; color: var(--sq-black);">

            <h6> Team Members <span style="font-weight: 400;">(@_renderedCharactersCount)</span></h6>

            <div style="display: block; margin: 0.2rem 0;">
                <EditForm Model="@_inputCharacter" OnValidSubmit="HandleAddCharacterSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    Add Character: <InputText id="addPlayerInput" @bind-Value="@_inputCharacter" title="Enter character's full name or ID" />

                    <button type="submit" class="btn btn-primary" title="Add character to team">
                        <span class="oi oi-plus"></span>Add
                    </button>

                    @if (_processingInputs.Any())
                    {
                        <span class="inline">
                            <SpinnerEllipsis />
                        </span>
                    }

                </EditForm>
            </div>


            <div style="display: flex; flex-wrap: wrap;">

                @* VS Members *@
                <ConstructedTeamBuilderForm_EditFactionMembers i_factionId=1 i_teamId=@_renderedTeamId />

                @* NC MEMBERS*@
                <ConstructedTeamBuilderForm_EditFactionMembers i_factionId=2 i_teamId=@_renderedTeamId />

                @* TR Members *@
                <ConstructedTeamBuilderForm_EditFactionMembers i_factionId=3 i_teamId=@_renderedTeamId />

            </div>
        </div>

    }
    else
    {
        <SpinnerEllipsis />
    }

</div>

@code {
    [Parameter]
    public int i_teamId { get; set; }
    private int _renderedTeamId { get; set; }

    [Parameter]
    public bool i_viewOnly { get; set; } = true;
    private bool _renderedViewOnly { get; set; } = true;

    private bool _showEditForm { get; set; } = false;
    private ConstructedTeam _editFormTeam { get; set; } = new ConstructedTeam();

    private bool _isChangingTeam { get; set; } = false;

    private int _noTeamSelectedId { get; set; } = -1;

    private ConstructedTeamFormInfo _renderedTeam { get; set; }
    private List<Character> _renderedCharacters { get; set; } = new List<Character>();
    private int _renderedCharactersCount { get; set; } = 0;

    private string _inputCharacter { get; set; } = string.Empty;
    private bool _isSavingCharacter { get; set; } = false;

    private List<string> _processingInputs { get; set; } = new List<string>();

    private ConcurrentQueue<ConstructedTeamCharacterChange> _characterEditQueue { get; set; } = new ConcurrentQueue<ConstructedTeamCharacterChange>();

    private ConcurrentQueue<ConstructedTeamMemberChangeMessage> _changeMessagesQueue { get; set; } = new ConcurrentQueue<ConstructedTeamMemberChangeMessage>();


    private IEnumerable<World> _worlds;


    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseConstructedTeamMemberChangeEvent += ReceiveConstructedTeamMemberChangeEvent;
        MessageService.RaiseConstructedTeamInfoChangeEvent += ReceiveConstructedTeamInfoChangeEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseConstructedTeamMemberChangeEvent -= ReceiveConstructedTeamMemberChangeEvent;
        MessageService.RaiseConstructedTeamInfoChangeEvent -= ReceiveConstructedTeamInfoChangeEvent;
    }

    protected override async Task OnInitializedAsync()
    {
        _worlds = await WorldService.GetAllWorldsAsync();

        var s = _worlds.ElementAt(1);
    }

    protected override async Task OnParametersSetAsync()
    {
        var viewOnlyChanged = false;

        if (i_viewOnly != _renderedViewOnly)
        {
            _renderedViewOnly = i_viewOnly;

            viewOnlyChanged = true;
        }

        if (i_teamId != _renderedTeamId || viewOnlyChanged)
        {
            _isChangingTeam = true;
            InvokeAsyncStateHasChanged();

            _renderedTeamId = i_teamId;

            _renderedTeam = await ConstructedTeamsService.GetConstructedTeamFormInfo(_renderedTeamId, true);

            _editFormTeam = new ConstructedTeam();
            _editFormTeam.Name = _renderedTeam.Name;
            _editFormTeam.Alias = _renderedTeam.Alias;

            _processingInputs = new List<string>();

            await InvokeAsync(async () =>
            {
                _renderedCharactersCount = await ConstructedTeamsService.GetConstructedTeamMemberCount(_renderedTeamId);

                _isChangingTeam = false;
                StateHasChanged();
            });
        }
    }
    #endregion Initialization Methods

    #region Event Handling
    private async void ReceiveConstructedTeamMemberChangeEvent(object sender, ConstructedTeamMemberChangeEventArgs e)
    {
        var message = e.Message;

        var teamId = message.TeamId;
        if (message.TeamId != _renderedTeamId)
        {
            return;
        }

        var changeType = message.ChangeType;
        if (changeType != ConstructedTeamMemberChangeType.Add && changeType != ConstructedTeamMemberChangeType.Remove)
        {
            return;
        }

        _renderedCharactersCount = await ConstructedTeamsService.GetConstructedTeamMemberCount(_renderedTeamId);

        InvokeAsyncStateHasChanged();
    }

    private void ReceiveConstructedTeamInfoChangeEvent(object sender, ConstructedTeamInfoChangeEventArgs e)
    {
        var message = e.Message;
        var team = message.ConstructedTeam;

        if (team.Id != _renderedTeamId)
        {
            return;
        }

        _renderedTeam.Name = team.Name;
        _renderedTeam.Alias = team.Alias;

        _editFormTeam.Name = team.Name;
        _editFormTeam.Alias = team.Alias;

        InvokeAsyncStateHasChanged();
    }
    #endregion Event Handling

    #region Form Input Handling
    private async void HandleAddCharacterSubmit()
    {
        var input = _inputCharacter;

        if (string.IsNullOrWhiteSpace(input))
        {
            return;
        }

        var characterInput = _inputCharacter;
        _processingInputs.Add(characterInput);

        InvokeAsyncStateHasChanged();

        var character = await ConstructedTeamsService.TryAddCharacterToConstructedTeam(_renderedTeamId, characterInput);

        // Don't clear input field if failed to find this character
        if (character != null)
        {
            _inputCharacter = string.Empty;
        }

        _processingInputs.Remove(characterInput);

        InvokeAsyncStateHasChanged();
    }

    private async void HandleEditTeamSubmit()
    {
        var updateTeam = _editFormTeam;
        updateTeam.Id = _renderedTeamId;

        if (await ConstructedTeamsService.UpdateConstructedTeamInfo(updateTeam))
        {
            _editFormTeam = new ConstructedTeam();
            _editFormTeam.Name = _renderedTeam.Name;
            _editFormTeam.Alias = _renderedTeam.Alias;

            _showEditForm = false;

            InvokeAsyncStateHasChanged();
        }
    }

    private void HandleEditTeamCancel()
    {
        _editFormTeam = new ConstructedTeam();
        _editFormTeam.Name = _renderedTeam.Name;
        _editFormTeam.Alias = _renderedTeam.Alias;

        _showEditForm = false;
    }


    private void ToggleEditTeamFormVisibility()
    {
        _showEditForm = !_showEditForm;
    }
    #endregion Form Input Handling

    #region Character Processing
    private void UpdateRenderedMembers()
    {
        InvokeAsync(() =>
        {
            lock (_renderedCharacters)
            {
                while (_changeMessagesQueue.TryDequeue(out ConstructedTeamMemberChangeMessage changeMessage))
                {
                    var changeType = changeMessage.ChangeType;
                    var characterId = changeMessage.CharacterId;


                    if (changeType == ConstructedTeamMemberChangeType.Remove)
                    {
                        _renderedCharacters.RemoveAll(c => c.Id == characterId);
                    }
                    else if (changeType == ConstructedTeamMemberChangeType.Add)
                    {
                        var character = changeMessage.Character;

                        if (!_renderedCharacters.Any(c => c.Id == characterId))
                        {
                            _renderedCharacters.Add(character);
                        }
                    }
                }

                _renderedCharacters = _renderedCharacters
                                        .OrderBy(c => c.FactionId)
                                        .ThenBy(c => c.Name)
                                        .ToList();

                _renderedCharactersCount = _renderedCharacters.Count();

                StateHasChanged();
            }
        });
    }
    #endregion CharacterProcessing

    private string GetFactionAbbreviationFromId(int factionId)
    {
        return FactionService.GetFactionAbbrevFromId(factionId);
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}
