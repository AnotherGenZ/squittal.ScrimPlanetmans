@using squittal.ScrimPlanetmans.Data.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;

@inject IConstructedTeamService ConstructedTeamService

<div class="header-card-container default">

    @if (_renderedTeam != null)
    {
        <h3>@($"{(!string.IsNullOrWhiteSpace(_renderedTeam.Alias) ? $"[{_renderedTeam.Alias}] " : string.Empty)} {_renderedTeam.Name} ({_renderedTeam.Id})")</h3>
        
        <EditForm Model="@_renderedTeam" style="margin-top: 0.5rem;">
            @*OnValidSubmit="HandleNewTeamSubmit" *@
            <DataAnnotationsValidator />
            <ValidationSummary />

            <p style="margin-bottom: 0.5rem;">Name: <InputText id="inputTeamName" @bind-Value=@_renderedTeam.Name /></p>
            <p style="margin-bottom: 0.5rem;">Alias: <InputText id="inputTeamAlias" @bind-Value=@_renderedTeam.Alias /></p>

            <button type="submit" class="btn btn-primary">
                <span class="oi oi-check"></span>Save
            </button>

        </EditForm>
    }

    <p>ConstructedTeamBuilderForm_Edit</p>
</div>

@code {
    [Parameter]
    public int i_teamId { get; set; }
    private int _renderedTeamId { get; set; }

    [Parameter]
    public bool i_viewOnly { get; set; } = true;
    private bool _renderedViewOnly { get; set; } = true;


    private int _noTeamSelectedId { get; set; } = -1;

    private ConstructedTeamFormInfo _renderedTeam { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_teamId != _renderedTeamId)
        {
            _renderedTeamId = i_teamId;

            _renderedTeam = await ConstructedTeamService.GetConstructedTeamFormInfo(_renderedTeamId);

            paramsChanged = true;
        }

        if (i_viewOnly != _renderedViewOnly)
        {
            _renderedViewOnly = i_viewOnly;

            paramsChanged = true;
        }

        if (paramsChanged)
        {
            // TODO: do I acutally need to use InvokeAsync here?
            InvokeAsyncStateHasChanged();
        }
    }


    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}
