@using squittal.ScrimPlanetmans.Data.Models;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.Forms;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent;

@inject IConstructedTeamService ConstructedTeamsService
@inject ICharacterService CharacterService
@inject IFactionService FactionService
@inject IWorldService WorldService

@if (_renderedCharacter != null)
{
    <tr class="@SqCssHelper.GetFactionClassFromId(_renderedFactionId)" style="color: var(--sq-ps2-primary);">
        <td>@_renderedIndex</td>
        <td title="@_renderedCharacter.Name [@(_renderedCharacterId)]">
            <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@_renderedCharacter.Name</span>
            @if (_renderedCharacter.PrestigeLevel != 0)
            {
                <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                    <sup>
                        <span class="oi oi-star small" aria-hidden="true"></span>
                    </sup>
                </div>
            }
            <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(_renderedCharacterId)]</span>
        </td>

        <td>@_renderedWorldName</td>

        @if (_renderedShowRemoveControls)
        {
            <td style="width: 15px; text-align: right;">
                <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="HandleRemovePlayer" title="Remove Character from Team">
                    <span class="oi oi-x" style="font-size: 0.7rem; top: 0;"></span>
                </button>
            </td>
        }
    </tr>
}

@*
    @if (_renderedCharacter != null)
    {
        <tr class="@SqCssHelper.GetFactionClassFromId(_renderedCharacter.FactionId)" style="color: var(--sq-ps2-primary);">
            <td>@_renderedIndex</td>
            <td title="@_renderedCharacter.Name [@(_renderedCharacter.Id)]">
                <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@_renderedCharacter.Name</span>
                @if (_renderedCharacter.PrestigeLevel != 0)
                {
                    <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                        <sup>
                            <span class="oi oi-star small" aria-hidden="true"></span>
                        </sup>
                    </div>
                }
                <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(_renderedCharacter.Id)]</span>
            </td>

            <td>
                @WorldService.GetWorld(_renderedCharacter.WorldId).Name
            </td>

            @if (_renderedShowRemoveControls)
            {
                <td style="width: 15px; text-align: right;">
                    <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="HandleRemovePlayer" title="Remove Character from Team">
                        <span class="oi oi-x" style="font-size: 0.7rem; top: 0;"></span>
                    </button>
                </td>
            }
        </tr>
    }
*@

@code {
    [Parameter]
    public string i_characterId { get; set; } = string.Empty;
    private string _renderedCharacterId { get; set; } = string.Empty;

    private Character _renderedCharacter = new Character();

    [Parameter]
    public EventCallback<Character> OnCharacterApiDataLoad { get; set; }

    [Parameter]
    public int i_index { get; set; } = 0;
    private int _renderedIndex { get; set; } = 0;

    [Parameter]
    public int i_teamId { get; set; }
    private int _renderedTeamId { get; set; }

    [Parameter]
    public int i_factionId { get; set; }
    private int _renderedFactionId { get; set; }

    //[Parameter]
    public bool i_showRemovalControls { get; set; } = true;
    private bool _renderedShowRemoveControls { get; set; } = true;

    private string _renderedWorldName { get; set; } = string.Empty;


    #region Initialization Methods
    protected override void OnParametersSet()
    {
        if (i_index != _renderedIndex || i_factionId != _renderedFactionId /*|| i_characterId != _renderedCharacterId*/ || i_teamId != _renderedTeamId)
        {
            //_renderedCharacterId = i_characterId;
            _renderedIndex = i_index;
            _renderedTeamId = i_teamId;
            _renderedFactionId = i_factionId;

            InvokeAsyncStateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (i_characterId != _renderedCharacterId || i_index != _renderedIndex || i_factionId != _renderedFactionId)
        {
            _renderedIndex = i_index;
            _renderedFactionId = i_factionId;

            _renderedCharacterId = i_characterId;
            _renderedCharacter = await CharacterService.GetCharacterAsync(_renderedCharacterId);

            if (_renderedCharacter != null)
            {
                _renderedWorldName = WorldService.GetWorld(_renderedCharacter.WorldId).Name;
            }

            await OnCharacterApiDataLoad.InvokeAsync(_renderedCharacter);

            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Initialization Methods

    #region UI & Form Controls
    private async void HandleRemovePlayer()
    {
        await ConstructedTeamsService.TryRemoveCharacterFromConstructedTeam(_renderedTeamId, _renderedCharacterId);

        //InvokeAsyncStateHasChanged();
    }
    #endregion UI & Form Controls

    #region Helper Methods
    private string GetFactionAbbreviationFromId(int factionId)
    {
        return FactionService.GetFactionAbbrevFromId(factionId);
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    #endregion Helper Methods

    //[Parameter]
    //public Character i_character { get; set; } = new Character();
    //private Character _renderedCharacter { get; set; } = new Character();

    //[Parameter]
    //public int i_index { get; set; } = 0;
    //private int _renderedIndex { get; set; } = 0;

    //[Parameter]
    //public int i_teamId { get; set; }
    //private int _renderedTeamId { get; set; }

    ////[Parameter]
    //public bool i_showRemovalControls { get; set; } = true;
    //private bool _renderedShowRemoveControls { get; set; } = true;

    //#region Initialization Methods
    //protected override void OnParametersSet()
    //{
    //    if (i_index != _renderedIndex || i_character.Id != _renderedCharacter.Id || i_teamId != _renderedTeamId)
    //    {
    //        _renderedCharacter = i_character;
    //        _renderedIndex = i_index;
    //        _renderedTeamId = i_teamId;

    //        _renderedWorldName = WorldService.GetWorld(_renderedCharacter.WorldId).Name;

    //        InvokeAsyncStateHasChanged();
    //    }
    //}
    //#endregion Initialization Methods

    //#region UI & Form Controls
    //private async void HandleRemovePlayer()
    //{
    //    await ConstructedTeamsService.TryRemoveCharacterFromConstructedTeam(_renderedTeamId, _renderedCharacter.Id);

    //    //InvokeAsyncStateHasChanged();
    //}
    //#endregion UI & Form Controls

    //#region Helper Methods
    //private string GetFactionAbbreviationFromId(int factionId)
    //{
    //    return FactionService.GetFactionAbbrevFromId(factionId);
    //}

    //private void InvokeAsyncStateHasChanged()
    //{
    //    InvokeAsync(() =>
    //    {
    //        StateHasChanged();
    //    });
    //}
    //#endregion Helper Methods
}
