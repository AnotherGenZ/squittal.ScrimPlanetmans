@using squittal.ScrimPlanetmans.Data.Models;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.Forms;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent;

@inject IConstructedTeamService ConstructedTeamsService
@inject IFactionService FactionService
@inject IWorldService WorldService

@if (_renderedCharacter != null)
{
    <tr class="@SqCssHelper.GetFactionClassFromId(_renderedCharacter.FactionId)" style="color: var(--sq-ps2-primary);">
        <td>@_renderedIndex</td>
        <td title="@_renderedCharacter.Name [@(_renderedCharacter.Id)]">
            <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@_renderedCharacter.Name</span>
            @if (_renderedCharacter.PrestigeLevel != 0)
            {
                <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                    <sup>
                        <span class="oi oi-star small" aria-hidden="true"></span>
                    </sup>
                </div>
            }
            <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(_renderedCharacter.Id)]</span>
        </td>

        <td>
            @GetFactionAbbreviationFromId(_renderedCharacter.FactionId)
        </td>

        <td>
            @WorldService.GetWorld(_renderedCharacter.WorldId).Name
        </td>
    </tr>
}

@code {
    [Parameter]
    public Character i_character { get; set; } = new Character();
    private Character _renderedCharacter { get; set; } = new Character();

    [Parameter]
    public int i_index { get; set; } = 0;
    private int _renderedIndex { get; set; } = 0;

    #region Initialization Methods

    protected override void OnParametersSet()
    {
        if (i_index != _renderedIndex || i_character.Id != _renderedCharacter.Id)
        {
            _renderedCharacter = i_character;
            _renderedIndex = i_index;

            InvokeAsyncStateHasChanged();
        }
    }
    #endregion Initialization Methods

    private string GetFactionAbbreviationFromId(int factionId)
    {
        return FactionService.GetFactionAbbrevFromId(factionId);
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}
