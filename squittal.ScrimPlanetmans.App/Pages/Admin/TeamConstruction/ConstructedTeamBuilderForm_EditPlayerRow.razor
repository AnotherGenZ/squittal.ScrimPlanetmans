@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;

@inject IConstructedTeamService ConstructedTeamsService
@inject ICharacterService CharacterService
@inject IFactionService FactionService
@inject IWorldService WorldService

@if (_renderedCharacter != null)
{
    <tr class="@SqCssHelper.GetFactionClassFromId(_renderedFactionId)" style="color: var(--sq-ps2-primary);">
        <td>@_renderedIndex</td>
        <td title="@_renderedCharacter.Name [@(_renderedCharacterId)]">
            <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@_renderedCharacter.Name</span>
            @if (_renderedCharacter.PrestigeLevel != 0)
            {
                <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                    <sup>
                        <span class="oi oi-star small" aria-hidden="true"></span>
                    </sup>
                </div>
            }
            <span style="font-size: 0.7rem;  color: var(--sq-black);"> [@(_renderedCharacterId)]</span>
        </td>

        <td>@_renderedWorldName</td>

        @if (_renderedShowRemoveControls)
        {
            <td style="width: 15px; text-align: right;">
                <button style="padding: 0; font-size: smaller; vertical-align: baseline; background-color: transparent; border: none;" @onclick="HandleRemovePlayer" title="Remove Character from Team">
                    <span class="oi oi-x" style="font-size: 0.7rem; top: 0;"></span>
                </button>
            </td>
        }
    </tr>
}


@code {
    [Parameter]
    public Character i_character { get; set; } = new Character();
    private Character _renderedCharacter { get; set; } = new Character();

    private string _renderedCharacterId { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<Character> OnCharacterApiDataLoad { get; set; }

    [Parameter]
    public int i_index { get; set; } = 0;
    private int _renderedIndex { get; set; } = 0;

    [Parameter]
    public int i_teamId { get; set; }
    private int _renderedTeamId { get; set; }

    [Parameter]
    public int i_factionId { get; set; }
    private int _renderedFactionId { get; set; }

    public bool i_showRemovalControls { get; set; } = true;
    private bool _renderedShowRemoveControls { get; set; } = true;

    private string _renderedWorldName { get; set; } = string.Empty;


    #region Initialization Methods
    protected override void OnParametersSet()
    {
        if (i_character.Id != _renderedCharacter.Id || i_index != _renderedIndex || i_factionId != _renderedFactionId || i_teamId != _renderedTeamId)
        {
            _renderedIndex = i_index;
            _renderedTeamId = i_teamId;
            _renderedFactionId = i_factionId;

            _renderedCharacter = i_character;

            if (_renderedCharacter != null)
            {
                _renderedCharacterId = _renderedCharacter.Id;
                _renderedWorldName = WorldService.GetWorld(_renderedCharacter.WorldId)?.Name;
            }

            InvokeAsyncStateHasChanged();
        }
    }
    /*
    protected override async Task OnParametersSetAsync()
    {
        if (i_character != _renderedCharacter || i_index != _renderedIndex || i_factionId != _renderedFactionId || i_teamId != _renderedTeamId)
        {
            _renderedIndex = i_index;
            _renderedFactionId = i_factionId;
            _renderedTeamId = i_teamId;

            _renderedCharacterId = i_character.Id;

            _renderedCharacter = i_character;

            _renderedCharacter = await CharacterService.GetCharacterAsync(_renderedCharacterId);

            //if ((string.IsNullOrWhiteSpace(_renderedWorldName) || _renderedCharacter.Name == "Unnamed Character"))
            //{
            //    _renderedCharacter = await CharacterService.GetCharacterAsync(_renderedCharacterId);

            //}

            if (_renderedCharacter != null)
            {
                _renderedWorldName = WorldService.GetWorld(_renderedCharacter.WorldId).Name;
            }

            InvokeAsyncStateHasChanged();
        }
    }
    */
    #endregion Initialization Methods

    #region UI & Form Controls
    private async void HandleRemovePlayer()
    {
        await ConstructedTeamsService.TryRemoveCharacterFromConstructedTeam(_renderedTeamId, _renderedCharacterId);
    }
    #endregion UI & Form Controls

    #region Helper Methods
    private string GetFactionAbbreviationFromId(int factionId)
    {
        return FactionService.GetFactionAbbrevFromId(factionId);
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    #endregion Helper Methods
}
