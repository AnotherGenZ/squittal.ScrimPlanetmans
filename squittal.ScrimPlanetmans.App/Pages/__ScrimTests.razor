@page "/scrimtests"
@using Microsoft.AspNetCore.SignalR.Client;
@using squittal.ScrimPlanetmans.Shared.Models.ScrimEngine;
@using squittal.ScrimPlanetmans.Shared.Models.Planetside;
@using squittal.ScrimPlanetmans.App.Pages.Admin;
@using Newtonsoft.Json.Linq;
@inject Services.WebsocketMonitorService _wsMonitor
@inject Services.PlanetsideDataService _planetside
@inject NavigationManager NavigationManager

<h2>__ScrimTests</h2>

<EditForm Model="@_inputAlias1" OnValidSubmit="HandleValidOutfitAliasSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    Team 1 Outfit Alias: <InputAlias id="alias1" @bind-Value="_inputAlias1" />

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (_teamOutfits1.Any())
{
    foreach (var outfit in _teamOutfits1)
    {
        <p><b>[@outfit.Alias] @outfit.Name</b> (@outfit.MemberCount) - w<span>@outfit.WorldId</span> - f<span>@outfit.FactionId</span></p>

        @if (_isMembersLoading.Contains(outfit.Alias))
        {
            <SpinnerEllipsis />
        }

        else if(_membersOnlineMap != null && _membersOnlineMap.ContainsKey(outfit.Alias) && _membersOnlineMap[outfit.Alias].Any())
        {
            foreach (var member in _membersOnlineMap[outfit.Alias].ToList().Take(15))
            {
                <p>@member.Name (@member.Id)</p>
            }
        }
    }
}
@if (_isAliasLoading.Any())
{
    <SpinnerEllipsis />
}

<p>_______________________________________________________</p>
<button class="btn btn-primary" @onclick="SubscribeToCensus">Subscribe!</button>
<button class="btn btn-primary" @onclick="EndCensusSubscription">STOP!</button>

<p>Status: @isStreamServiceEnabled.ToString() (@debug)</p>
<p id="event-log" bind="@logText" style="font-size: 10px;">@logText</p>


@code {
    private OutfitAlias _inputAlias1 = new OutfitAlias();

    private Dictionary<string, List<Character>> _membersMap = new Dictionary<string, List<Character>>();
    private Dictionary<string, List<Character>> _membersOnlineMap = new Dictionary<string, List<Character>>();
    private Dictionary<string, string> _outfitMap = new Dictionary<string, string>(); //<characterId, alias>

    private List<Character> _outfitMembers = new List<Character>();
    private List<Character> _outfitOnlineMembers = new List<Character>();

    private List<string> _isAliasLoading = new List<string>();
    private List<string> _isMembersLoading = new List<string>();

    private List<Outfit> _teamOutfits1 = new List<Outfit>();
    private List<string> _validOutfitAliasHistory = new List<string>();
    private List<string> _subscribedOutfitsHistory = new List<string>();

    private MarkupString logText { get; set; } = (MarkupString)string.Empty;
    private bool isStreamServiceEnabled { get; set; } = false;
    private bool isSubscribed { get; set; } = false;

    private string debug { get; set; } = "init";

    HubConnection connection;


    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.BaseUri);

        Console.WriteLine($"Base URL: {uri} || {uri}eventhub");

        connection = new HubConnectionBuilder()
            .WithUrl($"{uri}eventhub")
            .WithAutomaticReconnect()
            .Build();

        connection.On<string>("ReceiveMessage", ReceiveMessage);
        //connection.On<string>("ReceivePlayerLoginMessage", ReceivePlayerLoginMessage); // async m => await ReceivePlayerLoginMessage(m));
        //connection.On<string>("ReceivePlayerLogoutMessage", ReceivePlayerLogoutMessage);

        await connection.StartAsync();

        await GetCensusStreamStatus();
    }

    private void ReceiveMessage(string message)
    {
        var payload = TryParseMessagePayload(message);
        if (payload == null)
        {
            return;
        }

        //var payload = jMsg.SelectToken("payload");
        //if (payload == null)
        //{
        //    return;
        //}

        //var escaped = message.Replace("/&/", "&amp;")
        //                     .Replace("/</", "&lt;")
        //                     .Replace("/>/", "&gt;")
        //                     .Replace("/\"/", "&quot;");

        //var newLog = (MarkupString)$"{escaped} <br/> {logText}";
        var newLog = (MarkupString)$"{payload.ToString()} <br/> {logText}";

        logText = newLog;

        StateHasChanged();

        var eventName = payload.Value<string>("event_name");

        if (eventName == "PlayerLogin")
        {
            HandlePlayerLoginPayload(payload);
        }

        else if (eventName == "PlayerLogout")
        {
            HandlePlayerLogoutPayload(payload);
        }
    }


    private void HandlePlayerLoginPayload(JToken payload)
    {
        //var jMsg = TryParseMessagePayload(message);
        //if (jMsg == null)
        //{
        //    return;
        //}

        //var characterId = jMsg.Value<string>("CharacterId");
        var characterId = payload.Value<string>("character_id");

        string alias;

        var isOutfitTracked = _outfitMap.TryGetValue(characterId, out alias);

        if (!isOutfitTracked)
        {
            return;
        }

        //ReceiveMessage(message);

        if (!_membersOnlineMap[alias].Any(m => m.Id == characterId))
        {
            var character = _membersMap[alias].FirstOrDefault(m => m.Id == characterId);
            if(character == null)
            {
                return;
            }

            _membersOnlineMap[alias].Add(character);

            //await TrySubscribeNewCharacterDeath(characterId);
        }

        StateHasChanged();
    }

    private void HandlePlayerLogoutPayload(JToken payload)
    {
        //var jMsg = TryParseMessagePayload(message);
        //if (jMsg == null)
        //{
        //    return;
        //}

        //var characterId = jMsg.Value<string>("CharacterId");
        var characterId = payload.Value<string>("character_id");

        string alias;

        var isOutfitTracked = _outfitMap.TryGetValue(characterId, out alias);

        if (!isOutfitTracked)
        {
            return;
        }

        //ReceiveMessage(message);

        if (_membersOnlineMap[alias].Any(m => m.Id == characterId))
        {
            var character = _membersMap[alias].FirstOrDefault(m => m.Id == characterId);
            if(character == null)
            {
                return;
            }

            _membersOnlineMap[alias].Remove(character);
            StateHasChanged();
        }
    }

    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            Console.WriteLine($"(91097) Failed to parse message: {message}");
            return null;
        }

        return jMsg;
    }


    private async Task GetCensusStreamStatus()
    {
        var status = await _wsMonitor.GetStatus();
        isStreamServiceEnabled = status.IsEnabled;
        debug = "GetCensusStreamStatus";
        StateHasChanged();
    }

    //private async Task SubscribeToCensus()
    private void SubscribeToCensus()
    {
        //if (!isSubscribed)
        //{
        //    var response = await Http.PostAsync("api/CensusStream/subscribe", null);
        //    isStreamServiceEnabled = isSubscribed = response.IsSuccessStatusCode;
        //    StateHasChanged();
        //}

        //await _wsMonitor.StartStreamSubscription();
        foreach(var alias in _validOutfitAliasHistory)
        {
            if (_isMembersLoading.Contains(alias) || _subscribedOutfitsHistory.Contains(alias))
            {
                continue;
            }

            _wsMonitor.AddCharacterSubscriptions(_membersMap[alias].Select(m => m.Id).ToList());
            _subscribedOutfitsHistory.Add(alias);
        }
        debug = "SubscribeToCensus";
        StateHasChanged();
    }

    //private async Task EndCensusSubscription()
    private void EndCensusSubscription()
    {
        //await _wsMonitor.StopStreamSubscription();
        _wsMonitor.RemoveAllCharacterSubscriptions();
        _subscribedOutfitsHistory.Clear();
        debug = "EndCensusSubscription";
        StateHasChanged();
    }

    private async void HandleValidOutfitAliasSubmit()
    {
        Outfit newOutfit;

        if (!_validOutfitAliasHistory.Contains(_inputAlias1.Alias))
        {
            var newAlias = _inputAlias1.Alias;

            _isAliasLoading.Add(newAlias);

            newOutfit = await _planetside.GetOutfitByAlias(newAlias);

            if (newOutfit != null)
            {
                _teamOutfits1.Add(newOutfit);
                _validOutfitAliasHistory.Add(newAlias); // _inputAlias1.Alias);
                _inputAlias1.Alias = string.Empty;

                _isAliasLoading.Remove(newAlias);

                StateHasChanged();

                await GetOutfitMembers(newAlias);
            }
        }
    }

    private async Task GetOutfitMembers(string alias)
    {
        _isMembersLoading.Add(alias);

        StateHasChanged();

        var censusMembers = await _planetside.GetOutfitMembersByAlias(alias);

        if (censusMembers != null && censusMembers.Any())
        {
            _membersMap.Add(alias, censusMembers.ToList());

            var onlineMembers = censusMembers.Where(m => m.IsOnline == true);

            _membersOnlineMap.Add(alias, onlineMembers.ToList());

            foreach(var member in censusMembers)
            {
                _outfitMap.Add(member.Id, alias);
            }

            _isMembersLoading.Remove(alias);

            StateHasChanged();
        }
    }

}
