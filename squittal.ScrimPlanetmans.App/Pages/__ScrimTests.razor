@page "/scrimtests"
@using squittal.ScrimPlanetmans.Shared.Models.ScrimEngine;
@using squittal.ScrimPlanetmans.Shared.Models.Planetside;
@using squittal.ScrimPlanetmans.App.Pages.Admin;
@using squittal.ScrimPlanetmans.Hubs.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using Newtonsoft.Json.Linq;
@using System.Diagnostics;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.CensusStream;

@inject squittal.ScrimPlanetmans.Services.WebsocketMonitorService _wsMonitor
@inject squittal.ScrimPlanetmans.Services.PlanetsideDataService _planetside
@inject ScrimTeamsManagerService _teamsManager

@inject IScrimTeamsManager ScrimTeamsManager
@inject IWebsocketMonitor  WebsocketMonitor

@using squittal.ScrimPlanetmans.ScrimMatch.Events;

@inject squittal.ScrimPlanetmans.Services.ScrimMatch.ScrimTeamsManagerService _teamsManager

@inject NavigationManager NavigationManager

<h2>__ScrimTests</h2>

<div style="width: calc(45% - 1rem); float: left; margin-right: 1rem; font-size: smaller; font-family: 'Roboto Mono', 'Input Mono', Consolas, monospace;">

    <EditForm Model="@_inputAlias1" OnValidSubmit="HandleValidOutfitAliasSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Team 1 Outfit Alias: <InputAlias id="alias1" @bind-Value="_inputAlias1" />

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

    @if (_teamOutfits1.Any())
    {
        foreach (var outfit in _teamOutfits1)
        {
            <p style="margin-bottom: 0.1rem; margin-top: 0.5rem;"><b>[@outfit.Alias] @outfit.Name</b> (@outfit.MemberCount | @outfit.MembersOnlineCount) - w<span>@outfit.WorldId</span> - f<span>@outfit.FactionId</span></p>

            @if (_isMembersLoading.Contains(outfit.AliasLower) && (_outfitOnlinePlayers == null || !_outfitOnlinePlayers.Any(p => p.OutfitId == outfit.Id)))
            {
                <SpinnerEllipsis />
            }

            else if (_outfitOnlinePlayers.Any(p => p.OutfitId == outfit.Id))
            {
                <ul style="list-style-type: circle; margin-bottom: 0.5rem;">

                    @foreach (var member in _outfitOnlinePlayers.Where(p => p.OutfitId == outfit.Id).ToList())
                    {
                        <li>@member.NameDisplay (@member.Id)</li>
                    }

                </ul>
            }
        }
    }
    @if (_isAliasLoading.Any())
    {
        <SpinnerEllipsis />
    }



    @*<p>_______________________________________________________</p>*@
    <p style="width: 95%; margin: 1rem 0; border-bottom: 1px solid gray;"></p>

    <button class="btn btn-primary" @onclick="SubscribeToCensus">Subscribe!</button>
    <button class="btn btn-primary" @onclick="EndCensusSubscription">STOP!</button>

</div>

<div style="width: 55%; float: right; font-size: 10px; max-height: 500px; overflow-y: scroll;word-wrap: normal; font-family: 'Roboto Mono', 'Input Mono', Consolas, monospace;">
    <h5>Status: @isStreamServiceEnabled.ToString() (@debug)</h5>
    @*<p id="event-log" bind="@logText" style="font-size: 10px;">@logText</p>*@

    @if (logTexts.Any())
    {
        foreach (var log in logTexts.Reverse<MarkupString>())
        {
            <p style="font-size: 10px; margin: 0;">@log</p>
        }
    }

</div>

@code {
    private OutfitAlias _inputAlias1 = new OutfitAlias();

    /* CHARACTER */
    private Dictionary<string, List<Character>> _membersMap = new Dictionary<string, List<Character>>();
    private Dictionary<string, List<Character>> _membersOnlineMap = new Dictionary<string, List<Character>>();
    private Dictionary<string, string> _outfitMap = new Dictionary<string, string>(); //<characterId, alias>

    private List<Character> _outfitMembers = new List<Character>();
    private List<Character> _outfitOnlineMembers = new List<Character>();
    /* END CHARACTER */

    /* PLAYER */
    private Dictionary<string, List<Player>> _playersMap = new Dictionary<string, List<Player>>(); //<characterId, Player>
    private Dictionary<string, List<Player>> _playersOnlineMap = new Dictionary<string, List<Player>>();
    private Dictionary<string, string> _playerIdOutfitMap = new Dictionary<string, string>(); //<characterId, alias>

    private List<Player> _outfitPlayers = new List<Player>();
    private List<Player> _outfitOnlinePlayers = new List<Player>();
    /* END PLAYER */


    private List<string> _isAliasLoading = new List<string>();
    private List<string> _isMembersLoading = new List<string>();

    private List<Outfit> _teamOutfits1 = new List<Outfit>();
    private List<Outfit> _outfits = new List<Outfit>();

    private List<string> _validOutfitAliasHistory = new List<string>();
    private List<string> _subscribedOutfitsHistory = new List<string>();

    //private MarkupString logText { get; set; } = (MarkupString)string.Empty;
    private bool isStreamServiceEnabled { get; set; } = false;
    private bool isSubscribed { get; set; } = false;

    private string debug { get; set; } = "init";

    private List<MarkupString> logTexts { get; set; } = new List<MarkupString>();


    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.BaseUri);

        Console.WriteLine($"Base URL: {uri} || {uri}eventhub");

        ScrimTeamsManager.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;

        WebsocketMonitor.RaiseSimpleMessageEvent += ReceiveSimpleMessageEvent;

        var team1 = ScrimTeamsManager.GetTeamOne();

        if (team1 != null)
        {
            _teamOutfits1 = team1.Outfits;
            _validOutfitAliasHistory = team1.Outfits.Select(o => o.AliasLower).ToList();

            var players = team1.Players;

            foreach (var player in players)
            {
                _outfitPlayers.Add(player);

                if (player.IsOnline)
                {
                    _outfitOnlinePlayers.Add(player);
                    UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, 1);
                }
            }

            foreach (var outfit in _teamOutfits1)
            {
                var message = $"Team 1 Outfit: [{outfit.Alias}] {outfit.Name} ({outfit.MemberCount} | {outfit.MembersOnlineCount}) - w{outfit.WorldId} - f{outfit.FactionId}";
                LogMessage(message);
            }
        }

        await GetCensusStreamStatus();
    }

    private void ReceiveTeamPlayerChangeEvent(object sender, TeamPlayerChangeEventArgs e)
    {
        debug = "ReceiveTeamPlayerChangeMessage";

        var message = e.Message;

        var name = message.PlayerNameDisplay;
        var id = message.PlayerId;
        var team = message.TeamOrdinal;
        var type = Enum.GetName(typeof(TeamPlayerChangeType), message.ChangeType);

        var online = message.IsOnline == true ? " ONLINE" : string.Empty;

        switch (message.ChangeType)
        {
            case TeamPlayerChangeType.Add:
                HandleTeamPlayerChangeAdd(message);
                break;

            case TeamPlayerChangeType.Remove:
                HandleTeamPlayerChangeRemove(message);
                break;
        }

        var text = message.Info; // $"Team {team} {type.ToUpper()}: {name} [{id}]{online}";

        LogMessage(text);
    }

    private void HandleTeamPlayerChangeAdd(TeamPlayerChangeMessage message)
    {
        var player = message.Player;

        _outfitPlayers.Add(player);

        if (player.IsOnline)
        {
            _outfitOnlinePlayers.Add(player);
            UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, 1);
        }
    }

    private void HandleTeamPlayerChangeRemove(TeamPlayerChangeMessage message)
    {
        var player = message.Player;

        _outfitPlayers.RemoveAll(p => p.Id == player.Id);

        if (_outfitOnlinePlayers.Any(p => p.Id == player.Id))
        {
            _outfitOnlinePlayers.RemoveAll(p => p.Id == player.Id);
            UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, -1);
        }
    }


    private void ReceiveSimpleMessageEvent(object sender, SimpleMessageEventArgs e)
    {
        ReceiveMessage(e.Message);
    }

    private void ReceiveMessage(string message)
    {
        var payload = TryParseMessagePayload(message);
        if (payload == null)
        {
            return;
        }

        LogMessage(payload.ToString());

        var eventName = payload.Value<string>("event_name");

        if (eventName == "PlayerLogin")
        {
            HandlePlayerLoginPayload(payload);
        }

        else if (eventName == "PlayerLogout")
        {
            HandlePlayerLogoutPayload(payload);
        }
    }

    void LogMessage(string message)
    {

        //var newLog = (MarkupString)$"{message} <br/> {logText}";

        //logText = newLog;

        var time = DateTime.Now.ToString("hh:mm:ss.fff tt");
        logTexts.Add((MarkupString)$"<span style=\"font-weight: 600;\">{time}:</span>  {message}");

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void HandlePlayerLoginPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = _outfitPlayers.Where(p => p.Id == characterId).FirstOrDefault();

        if (player == null)
        {
            return;
        }

        if (!_outfitOnlinePlayers.Any(p => p.Id == player.Id))
        {
            _outfitOnlinePlayers.Add(player);

            if (_outfits.Any(o => o.Id == player.OutfitId))
            {
                UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, 1);
            }
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void HandlePlayerLogoutPayload(JToken payload)
    {
        var characterId = payload.Value<string>("character_id");

        var player = _outfitPlayers.Where(p => p.Id == characterId).FirstOrDefault();

        if (player == null)
        {
            return;
        }

        if (_outfitOnlinePlayers.Any(p => p.Id == player.Id))
        {
            _outfitOnlinePlayers.Remove(player);

            if (_outfits.Any(o => o.Id == player.OutfitId))
            {
                UpdateOutfitMembersOnlineCount(player.OutfitAliasLower, -1);
            }
        }

        InvokeAsync(() =>
        {

            StateHasChanged();
        });
    }

    private JToken TryParseMessagePayload(string message)
    {
        if (message == null)
        {
            return null;
        }

        JToken jMsg;

        try
        {
            jMsg = JToken.Parse(message).SelectToken("payload");
        }
        catch (Exception)
        {
            Console.WriteLine($"(91097) Failed to parse message: {message}");
            return null;
        }

        return jMsg;
    }

    private async Task GetCensusStreamStatus()
    {
        var status = await _wsMonitor.GetStatus();
        isStreamServiceEnabled = status.IsEnabled;
        debug = "GetCensusStreamStatus";
        StateHasChanged();
    }

    private void SubscribeToCensus()
    {
        foreach (var alias in _validOutfitAliasHistory)
        {
            if (_isMembersLoading.Contains(alias) || _subscribedOutfitsHistory.Contains(alias))
            {
                continue;
            }
            WebsocketMonitor.AddCharacterSubscriptions(_outfitPlayers.Where(p => p.OutfitAliasLower == alias.ToLower()).Select(p => p.Id).ToList()); // _membersMap[alias].Select(m => m.Id).ToList());

            _subscribedOutfitsHistory.Add(alias);
        }
        debug = "SubscribeToCensus";
        StateHasChanged();
    }

    private void EndCensusSubscription()
    {
        _wsMonitor.RemoveAllCharacterSubscriptions();
        _subscribedOutfitsHistory.Clear();
        debug = "EndCensusSubscription";
        StateHasChanged();
    }

    private async void HandleValidOutfitAliasSubmit()
    {
        Outfit newOutfit;

        var newAlias = _inputAlias1.Alias;
        var newAliasLower = newAlias.ToLower();

        if (!_validOutfitAliasHistory.Contains(newAliasLower))
        {
            _isAliasLoading.Add(newAliasLower);

            newOutfit = await _planetside.GetOutfitByAlias(newAliasLower);

            if (newOutfit != null)
            {
                _teamOutfits1.Add(newOutfit);
                _outfits.Add(newOutfit);
                _validOutfitAliasHistory.Add(newAliasLower);
                _inputAlias1.Alias = string.Empty;

                _isAliasLoading.Remove(newAliasLower);

                StateHasChanged();

                _isMembersLoading.Add(newAliasLower);

                StateHasChanged();

                var success = await ScrimTeamsManager.AddOutfitAliasToTeam(1, newAliasLower);

                _isMembersLoading.Remove(newAliasLower);

                StateHasChanged();
            }
            else
            {
                _isAliasLoading.Remove(newAliasLower);

                StateHasChanged();
            }
        }
    }

    //alias should already be AliasLower or alias.ToLower()
    private async Task GetOutfitMembers(string alias)
    {
        _isMembersLoading.Add(alias);

        StateHasChanged();

        var censusMembers = await _planetside.GetOutfitMembersByAlias(alias);

        if (censusMembers != null && censusMembers.Any())
        {
            _membersMap.Add(alias, censusMembers.ToList());

            var onlineMembers = censusMembers.Where(m => m.IsOnline == true);

            _membersOnlineMap.Add(alias, onlineMembers.ToList());

            foreach (var member in censusMembers)
            {
                _outfitMap.Add(member.Id, alias);
            }

            _isMembersLoading.Remove(alias);

            UpdateOutfitMembersOnlineCount(alias, onlineMembers.Count());

            StateHasChanged();
        }
    }

    private void UpdateOutfitMembersOnlineCount(string aliasLower, int addend)
    {
        var outfit = _outfits.FirstOrDefault(o => o.AliasLower == aliasLower);
        if (outfit == null)
        {
            return;
        }
        outfit.MembersOnlineCount += addend;
    }
}
